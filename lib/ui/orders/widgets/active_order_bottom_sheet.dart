import 'dart:async';
import 'dart:convert';
import 'dart:typed_data';
import 'dart:ui' as ui;
import 'dart:ui';
import 'dart:math' as math;

import 'package:aktau_go/domains/active_request/active_request_domain.dart';
import 'package:aktau_go/domains/user/user_domain.dart';
import 'package:aktau_go/interactors/common/mapbox_api/mapbox_api.dart';
import 'package:aktau_go/interactors/order_requests_interactor.dart';
import 'package:aktau_go/ui/widgets/primary_button.dart';
import 'package:aktau_go/utils/logger.dart';
import 'package:aktau_go/utils/num_utils.dart';
import 'package:aktau_go/utils/utils.dart';
import 'package:elementary_helper/elementary_helper.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_map_cancellable_tile_provider/flutter_map_cancellable_tile_provider.dart';
import 'package:flutter_map_location_marker/flutter_map_location_marker.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:flutter_svg/svg.dart' as vg;
import 'package:geolocator/geolocator.dart';
import 'package:mapbox_maps_flutter/mapbox_maps_flutter.dart' as mapbox;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:url_launcher/url_launcher_string.dart';
import 'package:flutter/rendering.dart';
import 'package:geotypes/geotypes.dart' as geotypes;
import 'package:latlong2/latlong.dart' hide Position;

import '../../../core/colors.dart';
import '../../../core/images.dart';
import '../../../core/text_styles.dart';
import '../../widgets/primary_bottom_sheet.dart';
import '../orders_wm.dart';

class ActiveOrderBottomSheet extends StatefulWidget {
  final UserDomain me;
  final ActiveRequestDomain activeOrder;
  final VoidCallback onCancel;
  final StateNotifier<ActiveRequestDomain> activeOrderListener;
  final OrdersWM? ordersWm;

  const ActiveOrderBottomSheet({
    super.key,
    required this.me,
    required this.activeOrder,
    required this.onCancel,
    required this.activeOrderListener,
    this.ordersWm,
  });

  @override
  State<ActiveOrderBottomSheet> createState() => _ActiveOrderBottomSheetState();
}

class _ActiveOrderBottomSheetState extends State<ActiveOrderBottomSheet> {
  late ActiveRequestDomain activeRequest = widget.activeOrder;
  mapbox.MapboxMap? mapboxMapController;
  Map<String, dynamic> route = {};

  int waitingTimerLeft = 180;

  Timer? waitingTimer;
  Timer? mapUpdateTimer;
  StreamSubscription<Position>? positionStreamSubscription;

  bool isLoading = false;
  bool isOrderFinished = false;

  Position? _currentPosition;

  @override
  void initState() {
    super.initState();
    
    print('üöÄ ActiveOrderBottomSheet initState - —Å—Ç–∞—Ç—É—Å: ${activeRequest.orderRequest?.orderStatus}');
    
    WidgetsBinding.instance.addPostFrameCallback((_) {
      widget.activeOrderListener.addListener(() {
        fetchActiveOrder();
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
      _setupDriverPositionListener();

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ orders_wm
      widget.ordersWm?.driverPosition.addListener(() {
        final position = widget.ordersWm?.driverPosition.value;
        if (position != null && mounted && mapboxMapController != null) {
          _currentPosition = Position(
            latitude: position.latitude,
            longitude: position.longitude,
            timestamp: DateTime.now(),
            accuracy: 0,
            altitude: 0,
            heading: 0,
            speed: 0,
            speedAccuracy: 0,
            altitudeAccuracy: 0,
            headingAccuracy: 0,
          );
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—è
          addDriverMarker(position.latitude, position.longitude);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
          _updateRouteBasedOnDriverPosition(position.latitude, position.longitude);
          
          // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª–µ
          mapboxMapController!.flyTo(
            mapbox.CameraOptions(
              center: mapbox.Point(coordinates: mapbox.Position(position.longitude, position.latitude)),
              zoom: 16.0,
              padding: mapbox.MbxEdgeInsets(top: 100, left: 50, bottom: 300, right: 50),
            ),
            mapbox.MapAnimationOptions(duration: 1000),
          );
          
          print('üìç –ü–æ–∑–∏—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ orders_wm: [32m${position.latitude}, ${position.longitude}[0m');
        }
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
      _startMapUpdateTimer();
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
      // –ò–Ω–∞—á–µ —ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤ onMapCreated
      if (mapboxMapController != null) {
        fetchActiveOrderRoute();
      }
    });
  }

  @override
  void dispose() {
    waitingTimer?.cancel();
    mapUpdateTimer?.cancel();
    positionStreamSubscription?.cancel();
    super.dispose();
  }

  Future<void> fetchActiveOrder() async {
    try {
      final response = await inject<OrderRequestsInteractor>().getActiveOrder();

      if (response == null) {
        // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        print('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞');
        if (mounted) {
          setState(() {
            isOrderFinished = true;
          });
          
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
          Future.delayed(Duration(milliseconds: 500), () {
            if (mounted) {
              Navigator.of(context).pop();
            }
          });
        }
        return;
      }

      activeRequest = response;

      String? sessionId = inject<SharedPreferences>().getString('access_token');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      if (activeRequest.orderRequest?.orderStatus == 'COMPLETED') {
        // –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω - –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        if (mounted) {
          Navigator.of(context).pop();
        }
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º mounted –ø–µ—Ä–µ–¥ setState
      if (mounted) {
        setState(() {});
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º mounted –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º fetchActiveOrderRoute
      if (mounted) {
        await fetchActiveOrderRoute();
      }
    } on Exception catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: $e');
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
      if (mounted) {
        setState(() {
          isOrderFinished = true;
        });
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        Future.delayed(Duration(milliseconds: 500), () {
          if (mounted) {
            Navigator.of(context).pop();
          }
        });
      }
    }
  }

  Future<void> fetchActiveOrderRoute() async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º mounted –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    if (!mounted) {
      print('‚ö†Ô∏è fetchActiveOrderRoute –≤—ã–∑–≤–∞–Ω –ø–æ—Å–ª–µ dispose');
      return;
    }
    
    final orderStatus = activeRequest.orderRequest?.orderStatus;
    
    print('üó∫Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞: $orderStatus');
    
    try {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ä—Ç—ã
      if (mapboxMapController != null) {
        await clearAllMapElements();
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
      final driverPosition = await _getCurrentDriverPosition();
      if (driverPosition == null) {
        print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º mounted –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–∞—Ä—à—Ä—É—Ç–∞
      if (!mounted) return;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
      await _updateRouteBasedOnDriverPosition(driverPosition.latitude, driverPosition.longitude);
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: $e');
      // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –∫–ª–∏–µ–Ω—Ç ‚Üí –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
      if (mounted) {
        await _showFallbackRoute();
      }
    }
  }
  
  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
  Future<void> addMarkersBasedOnStatus(
    String orderStatus,
    Position driverPosition,
    double clientLat,
    double clientLng,
    double destinationLat,
    double destinationLng,
  ) async {
    print('üéØ –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞: $orderStatus');
    
    // –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –∫–∞–∫ –º–∞—à–∏–Ω–∫—É (–≤–æ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö)
    await addDriverMarker(driverPosition.latitude, driverPosition.longitude);
    
    switch (orderStatus) {
      case 'CREATED':
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—á–∫–∏ –ê –∏ –ë –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ (–±–µ–∑ –≤–æ–¥–∏—Ç–µ–ª—è)
        await addStaticMarkers([
          {'lat': clientLat, 'lng': clientLng, 'type': 'point_a'},
          {'lat': destinationLat, 'lng': destinationLng, 'type': 'point_b'},
        ]);
        break;
        
      case 'STARTED':
        // –í–æ–¥–∏—Ç–µ–ª—å –µ–¥–µ—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—á–∫—É –ê (–∫–ª–∏–µ–Ω—Ç)
        await addStaticMarkers([
          {'lat': clientLat, 'lng': clientLng, 'type': 'point_a'},
        ]);
        break;
        
      case 'WAITING':
      case 'ONGOING':
        // –í–æ–¥–∏—Ç–µ–ª—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—á–∫—É –ë (–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ)
        await addStaticMarkers([
          {'lat': destinationLat, 'lng': destinationLng, 'type': 'point_b'},
        ]);
        break;
        
      default:
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–µ —Ç–æ—á–∫–∏
        await addStaticMarkers([
          {'lat': clientLat, 'lng': clientLng, 'type': 'point_a'},
          {'lat': destinationLat, 'lng': destinationLng, 'type': 'point_b'},
        ]);
        break;
    }
    
    print('‚úÖ –ú–∞—Ä–∫–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ $orderStatus');
  }
  
  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ä—Ç—ã
  Future<void> clearAllMapElements() async {
    try {
      if (mapboxMapController == null) return;
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–ª–æ–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
      final layersToRemove = [
        'route-layer',
        'route-outline-layer',
        'driver-marker-layer',
        'client-marker-layer',
        'destination-marker-layer',
        'live-driver-marker-layer',
      ];
      
      final sourcesToRemove = [
        'route-source',
        'driver-marker-source',
        'client-marker-source',
        'destination-marker-source',
        'live-driver-marker-source',
      ];
      
      // –£–¥–∞–ª—è–µ–º —Å–ª–æ–∏
      for (final layerId in layersToRemove) {
        try {
          if (await mapboxMapController!.style.styleLayerExists(layerId)) {
            await mapboxMapController!.style.removeStyleLayer(layerId);
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª–æ–µ–≤ - –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º
        }
      }
      
      // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
      for (final sourceId in sourcesToRemove) {
        try {
          if (await mapboxMapController!.style.styleSourceExists(sourceId)) {
            await mapboxMapController!.style.removeStyleSource(sourceId);
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ - –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º
        }
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–∞—Ä—Ç—ã: $e');
    }
  }
  
  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ (—Ç–æ—á–∫–∏ –ê –∏ –ë)
  Future<void> addStaticMarkers(List<Map<String, dynamic>> markers) async {
    if (mapboxMapController == null || markers.isEmpty) return;
    
    try {
      List<Map<String, dynamic>> features = [];
      
      for (final marker in markers) {
        features.add({
          "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [marker['lng'], marker['lat']]
          },
          "properties": {
            "type": marker['type']
          }
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
      bool sourceExists = await mapboxMapController!.style.styleSourceExists('static-markers-source');
      bool startLayerExists = await mapboxMapController!.style.styleLayerExists('start-marker-layer');
      bool endLayerExists = await mapboxMapController!.style.styleLayerExists('end-marker-layer');
      
      if (sourceExists && startLayerExists && endLayerExists) {
        // –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ —Å–ª–æ–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        try {
          await mapboxMapController!.style.setStyleSourceProperty(
            'static-markers-source',
            'data',
            json.encode({
              "type": "FeatureCollection",
              "features": features
            }),
          );
          print('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${markers.map((m) => m['type']).join(', ')}');
          return;
        } catch (e) {
          print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ: $e');
        }
      }
      
      // –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ —Å–ª–æ–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
      try {
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
        if (endLayerExists) {
          await mapboxMapController!.style.removeStyleLayer('end-marker-layer');
        }
        if (startLayerExists) {
          await mapboxMapController!.style.removeStyleLayer('start-marker-layer');
        }
        if (sourceExists) {
          await mapboxMapController!.style.removeStyleSource('static-markers-source');
        }
      } catch (e) {
        print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: $e');
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
      await mapboxMapController!.style.addSource(mapbox.GeoJsonSource(
        id: 'static-markers-source',
        data: json.encode({
          "type": "FeatureCollection",
          "features": features
        }),
      ));
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è —Ç–æ—á–∫–∏ –ê
      if (markers.any((m) => m['type'] == 'point_a')) {
        await mapboxMapController!.style.addLayer(mapbox.SymbolLayer(
          id: 'start-marker-layer',
          sourceId: 'static-markers-source',
          filter: ['==', ['get', 'type'], 'point_a'],
          iconImage: 'point_a',
          iconSize: 0.5, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
          iconAllowOverlap: true,
          symbolSortKey: 1.0, // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        ));
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è —Ç–æ—á–∫–∏ –ë
      if (markers.any((m) => m['type'] == 'point_b')) {
        await mapboxMapController!.style.addLayer(mapbox.SymbolLayer(
          id: 'end-marker-layer',
          sourceId: 'static-markers-source',
          filter: ['==', ['get', 'type'], 'point_b'],
          iconImage: 'point_b',
          iconSize: 0.5, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
          iconAllowOverlap: true,
          symbolSortKey: 1.0, // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        ));
      }
      
      print('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: ${markers.map((m) => m['type']).join(', ')}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: $e');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
  Future<Position?> _getCurrentDriverPosition() async {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
      if (_currentPosition != null) {
        return _currentPosition;
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é
      final permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        final newPermission = await Geolocator.requestPermission();
        if (newPermission == LocationPermission.denied) {
          return null;
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
      final position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
        timeLimit: Duration(seconds: 5),
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
      _currentPosition = position;
      return position;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è: $e');
      return null;
    }
  }
  
  // –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç (–∫–ª–∏–µ–Ω—Ç ‚Üí –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ)
  Future<void> _showFallbackRoute() async {
    try {
      final directions = await inject<MapboxApi>().getDirections(
        fromLat: activeRequest.orderRequest!.lat.toDouble(),
        fromLng: activeRequest.orderRequest!.lng.toDouble(),
        toLat: double.parse(activeRequest.orderRequest!.toMapboxId.split(';')[0]),
        toLng: double.parse(activeRequest.orderRequest!.toMapboxId.split(';')[1]),
      );

      setState(() {
        route = directions;
      });

      if (mapboxMapController != null && route.isNotEmpty) {
        await addRouteToMap();
        await addMarkersToMap();
        await fitRouteInView();
        print('‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞: $e');
    }
  }

  Future<void> addRouteToMap() async {
    if (mapboxMapController == null || route.isEmpty) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞
      bool sourceExists = await mapboxMapController!.style.styleSourceExists('route-source');
      bool layerExists = await mapboxMapController!.style.styleLayerExists('route-layer');
      bool outlineLayerExists = await mapboxMapController!.style.styleLayerExists('route-outline-layer');

      // Create GeoJSON LineString from route geometry
      final routeGeometry = route['routes'][0]['geometry'];
      final lineString = {
        "type": "Feature",
        "geometry": routeGeometry,
        "properties": {}
      };

      if (sourceExists && layerExists && outlineLayerExists) {
        // –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ —Å–ª–æ–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        try {
          await mapboxMapController!.style.setStyleSourceProperty(
            'route-source',
            'data',
            json.encode({
              "type": "FeatureCollection",
              "features": [lineString]
            }),
          );
          print('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∫–∞—Ä—Ç–µ');
          return;
        } catch (e) {
          print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä—à—Ä—É—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π: $e');
        }
      }

      // –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ —Å–ª–æ–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
      try {
        // Remove existing route layers if they exist
        if (outlineLayerExists) {
          await mapboxMapController!.style.removeStyleLayer('route-outline-layer');
        }
        if (layerExists) {
          await mapboxMapController!.style.removeStyleLayer('route-layer');
        }
        if (sourceExists) {
          await mapboxMapController!.style.removeStyleSource('route-source');
        }
      } catch (e) {
        print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤: $e');
      }

      // Add source for the route
      await mapboxMapController!.style.addSource(mapbox.GeoJsonSource(
        id: 'route-source',
        data: json.encode({
          "type": "FeatureCollection",
          "features": [lineString]
        }),
      ));

      // Add outline layer for the route (–¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞)
      await mapboxMapController!.style.addLayer(mapbox.LineLayer(
        id: 'route-outline-layer',
        sourceId: 'route-source',
        lineColor: 0xFF1565C0, // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π –∫–æ–Ω—Ç—É—Ä
        lineWidth: 8.0,
        lineOpacity: 0.8,
        lineCap: mapbox.LineCap.ROUND,
        lineJoin: mapbox.LineJoin.ROUND,
      ));

      // Add main line layer for the route
      await mapboxMapController!.style.addLayer(mapbox.LineLayer(
        id: 'route-layer',
        sourceId: 'route-source',
        lineColor: 0xFF2196F3, // –Ø—Ä–∫–∏–π —Å–∏–Ω–∏–π
        lineWidth: 5.0,
        lineOpacity: 1.0,
        lineCap: mapbox.LineCap.ROUND,
        lineJoin: mapbox.LineJoin.ROUND,
      ));
      
      print('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: $e');
    }
  }

  Future<void> addMarkersToMap() async {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ addMarkersBasedOnStatus
    return;
  }

  Future<void> arrivedDriver() async {
    setState(() {
      isLoading = false;
    });
    try {
      await inject<OrderRequestsInteractor>().arrivedOrderRequest(
        driver: widget.me,
        orderRequest: widget.activeOrder.orderRequest!,
      );

      waitingTimer = Timer.periodic(Duration(seconds: 1), (timer) {
        if (waitingTimerLeft > 0) {
          setState(() {
            waitingTimerLeft--;
          });
        } else {
          rejectOrder();
          timer.cancel();
        }
      });

      fetchActiveOrder();
    } on Exception catch (e) {
      // TODO
    }
    setState(() {
      isLoading = false;
    });
  }

  Future<void> rejectOrder() async {
    await showDialog(
      context: context,
      builder: (context) => Center(
        child: Container(
          padding: const EdgeInsets.symmetric(vertical: 24, horizontal: 16),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(16),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              SizedBox(
                width: double.infinity,
                child: Text(
                  '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?',
                  style: text400Size16Greyscale90,
                ),
              ),
              const SizedBox(height: 24),
              Row(
                children: [
                  Expanded(
                    child: PrimaryButton.secondary(
                      text: '–ù–∞–∑–∞–¥',
                      onPressed: Navigator.of(context).pop,
                    ),
                  ),
                  const SizedBox(width: 10),
                  Expanded(
                    child: PrimaryButton.primary(
                      text: '–û—Ç–º–µ–Ω–∏—Ç—å',
                      textStyle: text400Size16White,
                      onPressed: () async {
                        Navigator.of(context).pop();
                        await inject<OrderRequestsInteractor>().rejectOrderRequest(
                          orderRequestId: widget.activeOrder.orderRequest!.id,
                        );
                        fetchActiveOrder();
                      },
                    ),
                  ),
                ],
              )
            ],
          ),
        ),
      ),
    );
  }

  Future<void> startDrive() async {
    setState(() {
      isLoading = true;
    });
    try {
      await inject<OrderRequestsInteractor>().startOrderRequest(
        driver: widget.me,
        orderRequest: widget.activeOrder.orderRequest!,
      );
      waitingTimer?.cancel();
      fetchActiveOrder();
    } on Exception catch (e) {
      // TODO
    }
    setState(() {
      isLoading = false;
    });
  }

  Future<void> endDrive() async {
    setState(() {
      isLoading = true;
    });
    try {
      await inject<OrderRequestsInteractor>().endOrderRequest(
        driver: widget.me,
        orderRequest: widget.activeOrder.orderRequest!,
      );
      fetchActiveOrder();
    } on Exception catch (e) {
      // TODO
    }

    setState(() {
      isLoading = false;
    });
  }

  Future<void> fitRouteInView() async {
    if (mapboxMapController == null || route.isEmpty) {
      print('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–æ–≥–Ω–∞—Ç—å –∫–∞–º–µ—Ä—É: controller –∏–ª–∏ route –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞
      final routeCoordinates = route['routes'][0]['geometry']['coordinates'] as List;
      if (routeCoordinates.isEmpty) return;
      
      // –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Ä—à—Ä—É—Ç–∞
      double minLat = double.infinity;
      double maxLat = -double.infinity;
      double minLng = double.infinity;
      double maxLng = -double.infinity;
      
      for (var coord in routeCoordinates) {
        final lng = (coord[0] as num).toDouble();
        final lat = (coord[1] as num).toDouble();
        
        minLat = math.min(minLat, lat);
        maxLat = math.max(maxLat, lat);
        minLng = math.min(minLng, lng);
        maxLng = math.max(maxLng, lng);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º (20% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞)
      final latPadding = (maxLat - minLat) * 0.25;
      final lngPadding = (maxLng - minLng) * 0.25;
      
      minLat -= latPadding;
      maxLat += latPadding;
      minLng -= lngPadding;
      maxLng += lngPadding;
      
      // –¶–µ–Ω—Ç—Ä –º–∞—Ä—à—Ä—É—Ç–∞
      final centerLat = (minLat + maxLat) / 2;
      final centerLng = (minLng + maxLng) / 2;
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
      final distance = _calculateDistance(minLat, minLng, maxLat, maxLng);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∑—É–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–π –∑—É–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      double zoom;
      if (distance < 0.3) {
        zoom = 17.0; // –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ
      } else if (distance < 0.5) {
        zoom = 16.5;
      } else if (distance < 0.8) {
        zoom = 16.0;
      } else if (distance < 1.2) {
        zoom = 15.5;
      } else if (distance < 2.0) {
        zoom = 15.0;
      } else if (distance < 3.0) {
        zoom = 14.5;
      } else if (distance < 5.0) {
        zoom = 14.0;
      } else if (distance < 8.0) {
        zoom = 13.5;
      } else if (distance < 12.0) {
        zoom = 13.0;
      } else if (distance < 20.0) {
        zoom = 12.5;
      } else if (distance < 30.0) {
        zoom = 12.0;
      } else if (distance < 50.0) {
        zoom = 11.5;
      } else {
        zoom = 11.0; // –î–∞–ª–µ–∫–æ
      }
      
      print('üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance.toStringAsFixed(2)} –∫–º, –ó—É–º: $zoom');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –∑—É–º –∫–∞–º–µ—Ä—ã
      final currentCamera = await mapboxMapController!.getCameraState();
      final currentZoom = currentCamera.zoom;
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–±–ª–∏–∑–∏–ª –∫–∞—Ä—Ç—É –≤—Ä—É—á–Ω—É—é, –Ω–µ –æ—Ç–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      if (currentZoom != null && currentZoom > zoom) {
        print('üîç –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∑—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $currentZoom');
        zoom = currentZoom;
      }
      
      // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫–∞–º–µ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      await mapboxMapController!.flyTo(
        mapbox.CameraOptions(
          center: mapbox.Point(coordinates: mapbox.Position(centerLng, centerLat)),
          zoom: zoom,
          padding: mapbox.MbxEdgeInsets(
            top: 80,
            left: 40,
            bottom: 300, // –ë–æ–ª—å—à–µ –æ—Ç—Å—Ç—É–ø–∞ —Å–Ω–∏–∑—É –¥–ª—è bottom sheet
            right: 40,
          ),
        ),
        mapbox.MapAnimationOptions(
          duration: 800, // –ë—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
          startDelay: 0,
        ),
      );
      
      print('‚úÖ –ö–∞–º–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã: $e');
    }
  }
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
  double _calculateDistance(double lat1, double lon1, double lat2, double lon2) {
    const double earthRadius = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    
    double dLat = _toRadians(lat2 - lat1);
    double dLon = _toRadians(lon2 - lon1);
    
    double a = math.sin(dLat / 2) * math.sin(dLat / 2) +
        math.cos(_toRadians(lat1)) * math.cos(_toRadians(lat2)) *
        math.sin(dLon / 2) * math.sin(dLon / 2);
    
    double c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a));
    
    return earthRadius * c;
  }
  
  double _toRadians(double degree) {
    return degree * math.pi / 180;
  }

  @override
  Widget build(BuildContext context) {
    final orderStatus = activeRequest.orderRequest?.orderStatus ?? '';
    
    return PopScope(
      canPop: false,
      child: Container(
        height: MediaQuery.of(context).size.height, // –ó–∞–Ω–∏–º–∞–µ–º –ø–æ—á—Ç–∏ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(24),
            topRight: Radius.circular(24),
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 20,
              offset: Offset(0, -5),
            ),
          ],
        ),
        child: Column(
          children: [
            // –ü–æ–ª–æ—Å–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            Container(
              margin: EdgeInsets.only(top: 12),
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey.shade300,
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            
            SizedBox(height: 20),
            
            // –ö–∞—Ä—Ç–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞
            Expanded(
              child: Stack(
                children: [
                  // –ö–∞—Ä—Ç–∞ Mapbox
                  ClipRRect(
                    borderRadius: BorderRadius.circular(16),
                    child: mapbox.MapWidget(
                      key: ValueKey("driver_active_order_map"),
                      cameraOptions: mapbox.CameraOptions(
                        center: mapbox.Point(
                          coordinates: geotypes.Position(
                            activeRequest.orderRequest?.lng ?? 0,
                            activeRequest.orderRequest?.lat ?? 0,
                          ),
                        ),
                        zoom: 15.0, // –ù–∞—á–∞–ª—å–Ω—ã–π –∑—É–º –±–ª–∏–∂–µ
                      ),
                      onMapCreated: (mapboxController) async {
                        print('üó∫Ô∏è –ö–∞—Ä—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω–∞');
                        mapboxMapController = mapboxController;
                        
                        try {
                          // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
                          await Future.delayed(Duration(milliseconds: 500));
                          
                          // –ü—Ä–æ–≤–µ—Ä—è–µ–º mounted –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∂–µ—Å—Ç–æ–≤
                          if (!mounted) return;
                          
                          // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∂–µ—Å—Ç—ã –∫–∞—Ä—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                          try {
                            await mapboxController.gestures.updateSettings(
                              mapbox.GesturesSettings(
                                rotateEnabled: true,
                                scrollEnabled: true,
                                pitchEnabled: true,
                                doubleTapToZoomInEnabled: true,
                                doubleTouchToZoomOutEnabled: true,
                                quickZoomEnabled: true,
                                pinchToZoomEnabled: true,
                              ),
                            );
                            print('‚úÖ –ñ–µ—Å—Ç—ã –∫–∞—Ä—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã');
                          } catch (gestureError) {
                            print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∂–µ—Å—Ç–æ–≤ –∫–∞—Ä—Ç—ã: $gestureError');
                            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∂–µ—Å—Ç–æ–≤
                          }
                          
                          // –ü—Ä–æ–≤–µ—Ä—è–µ–º mounted –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                          if (!mounted) return;
                          
                          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
                          try {
                            await addImageFromAsset('point_a', 'assets/images/point_a.png');
                            await addImageFromAsset('point_b', 'assets/images/point_b.png');
                          } catch (imageError) {
                            print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ä–æ–≤: $imageError');
                          }
                          
                          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                          await Future.delayed(Duration(milliseconds: 300));
                          
                          // –ü—Ä–æ–≤–µ—Ä—è–µ–º mounted –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –º–∞—Ä—à—Ä—É—Ç–∞
                          if (!mounted) return;
                          
                          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
                          await fetchActiveOrderRoute();
                          
                          print('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
                        } catch (e) {
                          print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã: $e');
                        }
                      },
                    ),
                  ),
                
                ],
              ),
            ),
            
            // –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            Container(
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(24),
                  topRight: Radius.circular(24),
                ),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.05),
                    blurRadius: 10,
                    offset: Offset(0, -2),
                  ),
                ],
              ),
              padding: EdgeInsets.all(20),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ
                  _buildRouteSection(),
                  
                  SizedBox(height: 16),
                  
                  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                  Row(
                    children: [
                      Expanded(
                        child: _buildInfoCard(
                          icon: Icons.account_circle,
                          title: '–ö–ª–∏–µ–Ω—Ç',
                          value: activeRequest.whatsappUser?.fullName ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                          color: Colors.blue,
                        ),
                      ),
                      SizedBox(width: 12),
                      Expanded(
                        child: _buildInfoCard(
                          icon: Icons.payments,
                          title: '–°—Ç–æ–∏–º–æ—Å—Ç—å',
                          value: '${NumUtils.humanizeNumber(activeRequest.orderRequest?.price, isCurrency: true) ?? '0'}',
                          color: Colors.green,
                        ),
                      ),
                    ],
                  ),
                  
                  SizedBox(height: 10),
                  
                  // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                  _buildActionButtons(),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildRouteSection() {
    return Column(
      children: [
        Row(
          children: [
            Container(
              width: 12,
              height: 12,
              decoration: BoxDecoration(
                color: Colors.green,
                borderRadius: BorderRadius.circular(6),
              ),
            ),
            SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    '–û—Ç–∫—É–¥–∞',
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.grey.shade600,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  Text(
                    activeRequest.orderRequest?.from ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                      color: Colors.black87,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            ),
          ],
        ),
        
        Container(
          margin: EdgeInsets.only(left: 6, top: 8, bottom: 8),
          width: 2,
          height: 20,
          color: Colors.grey.shade300,
        ),
        
        Row(
          children: [
            Container(
              width: 12,
              height: 12,
              decoration: BoxDecoration(
                color: primaryColor,
                borderRadius: BorderRadius.circular(6),
              ),
            ),
            SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    '–ö—É–¥–∞',
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.grey.shade600,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  Text(
                    activeRequest.orderRequest?.to ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                      color: Colors.black87,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildInfoCard({
    required IconData icon,
    required String title,
    required String value,
    required Color color,
  }) {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: Colors.grey.shade200,
          width: 1,
        ),
      ),
      child: Column(
        children: [
          Icon(
            icon,
            color: color,
            size: 24,
          ),
          SizedBox(height: 8),
          Text(
            title,
            style: TextStyle(
              fontSize: 12,
              color: Colors.grey.shade600,
              fontWeight: FontWeight.w500,
            ),
          ),
          SizedBox(height: 4),
          Text(
            value,
            style: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w600,
              color: Colors.black87,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildActionButtons() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å
    if (activeRequest.orderRequest == null) {
      print('‚ö†Ô∏è activeRequest.orderRequest is null');
      return Column(
        children: [
          SizedBox(
            width: double.infinity,
            child: OutlinedButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              style: OutlinedButton.styleFrom(
                foregroundColor: Colors.blue,
                side: BorderSide(color: Colors.blue),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                ),
                padding: EdgeInsets.symmetric(vertical: 14),
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.arrow_back, size: 20),
                  SizedBox(width: 8),
                  Text(
                    '–í–µ—Ä–Ω—É—Ç—å—Å—è',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      );
    }
    
    final orderStatus = activeRequest.orderRequest?.orderStatus ?? '';
    print('üîÑ Building action buttons for order status: $orderStatus');
    
    if (orderStatus == 'CREATED') {
      return Column(
        children: [
          SizedBox(
            width: double.infinity,
            height: 52,
            child: ElevatedButton(
              onPressed: isLoading ? null : () async {
                await startDrive();
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                foregroundColor: Colors.white,
                elevation: 0,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                ),
                disabledBackgroundColor: Colors.grey.shade300,
              ),
              child: isLoading
                  ? SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(
                        color: Colors.white,
                        strokeWidth: 2,
                      ),
                    )
                  : Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.play_arrow, size: 20),
                        SizedBox(width: 8),
                        Text(
                          '–ù–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ],
                    ),
            ),
          ),
          SizedBox(height: 12),
          Row(
            children: [
              Expanded(
                child: OutlinedButton(
                  onPressed: () => Navigator.of(context).pop(),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.grey.shade700,
                    side: BorderSide(color: Colors.grey.shade300),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                    padding: EdgeInsets.symmetric(vertical: 14),
                  ),
                  child: Text(
                    '–ù–∞–∑–∞–¥',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ),
              SizedBox(width: 12),
              Expanded(
                child: OutlinedButton(
                  onPressed: () async {
                    Navigator.of(context).pop();
                    await inject<OrderRequestsInteractor>().rejectOrderRequest(
                      orderRequestId: widget.activeOrder.orderRequest!.id,
                    );
                    fetchActiveOrder();
                  },
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.red,
                    side: BorderSide(color: Colors.red.shade300),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                    padding: EdgeInsets.symmetric(vertical: 14),
                  ),
                  child: Text(
                    '–û—Ç–º–µ–Ω–∏—Ç—å',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ],
      );
    } else {
      return Column(
        children: [
          if (orderStatus == 'STARTED') ...[
            SizedBox(
              width: double.infinity,
              height: 52,
              child: ElevatedButton(
                onPressed: isLoading ? null : waitForClient,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.orange,
                  foregroundColor: Colors.white,
                  elevation: 0,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(16),
                  ),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.location_on, size: 20),
                    SizedBox(width: 8),
                    Text(
                      '–Ø –Ω–∞ –º–µ—Å—Ç–µ',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ] else if (orderStatus == 'WAITING') ...[
            SizedBox(
              width: double.infinity,
              height: 52,
              child: ElevatedButton(
                onPressed: isLoading ? null : startTrip,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                  elevation: 0,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(16),
                  ),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.directions_car, size: 20),
                    SizedBox(width: 8),
                    Text(
                      '–ù–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ] else if (orderStatus == 'ONGOING') ...[
            SizedBox(
              width: double.infinity,
              height: 52,
              child: ElevatedButton(
                onPressed: isLoading ? null : finishTrip,
                style: ElevatedButton.styleFrom(
                  backgroundColor: primaryColor,
                  foregroundColor: Colors.white,
                  elevation: 0,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(16),
                  ),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.check_circle, size: 20),
                    SizedBox(width: 8),
                    Text(
                      '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ] else ...[
            // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            Container(
              width: double.infinity,
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.orange.shade50,
                borderRadius: BorderRadius.circular(16),
                border: Border.all(color: Colors.orange.shade200),
              ),
              child: Row(
                children: [
                  Icon(Icons.info_outline, color: Colors.orange),
                  SizedBox(width: 12),
                  Expanded(
                    child: Text(
                      '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: $orderStatus. –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.',
                      style: TextStyle(
                        fontSize: 14,
                        color: Colors.orange.shade800,
                      ),
                    ),
                  ),
                ],
              ),
            ),
            SizedBox(height: 12),
            SizedBox(
              width: double.infinity,
              height: 52,
              child: ElevatedButton(
                onPressed: fetchActiveOrder,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                  elevation: 0,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(16),
                  ),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.refresh, size: 20),
                    SizedBox(width: 8),
                    Text(
                      '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
          
          SizedBox(height: 12),
          
          // –ö–Ω–æ–ø–∫–∞ –∑–≤–æ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç—É
          SizedBox(
            width: double.infinity,
            child: OutlinedButton(
              onPressed: () => _callClient(activeRequest.whatsappUser?.phone),
              style: OutlinedButton.styleFrom(
                foregroundColor: primaryColor,
                side: BorderSide(color: primaryColor),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                ),
                padding: EdgeInsets.symmetric(vertical: 14),
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.phone, size: 20),
                  SizedBox(width: 8),
                  Text(
                    '–ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      );
    }
  }

  Map<String, dynamic> _getStatusInfo(String status) {
    switch (status) {
      case 'CREATED':
        return {
          'title': '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç',
          'subtitle': '–ù–∞—á–Ω–∏—Ç–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –∫–ª–∏–µ–Ω—Ç—É',
          'icon': Icons.check_circle,
          'color': Colors.green,
        };
      case 'STARTED':
        return {
          'title': '–í –ø—É—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É',
          'subtitle': '–î–æ–±–µ—Ä–∏—Ç–µ—Å—å –¥–æ –º–µ—Å—Ç–∞ –ø–æ—Å–∞–¥–∫–∏',
          'icon': Icons.directions_car,
          'color': Colors.blue,
        };
      case 'WAITING':
        return {
          'title': '–û–∂–∏–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞',
          'subtitle': '–ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–¥–æ–π—Ç–∏ –∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—é',
          'icon': Icons.timer,
          'color': Colors.orange,
        };
      case 'ONGOING':
        return {
          'title': '–ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å',
          'subtitle': '–í–µ–∑–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∫ –º–µ—Å—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
          'icon': Icons.directions,
          'color': primaryColor,
        };
      default:
        return {
          'title': '–ó–∞–∫–∞–∑',
          'subtitle': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞',
          'icon': Icons.info,
          'color': Colors.grey,
        };
    }
  }

  Future<void> _callClient(String? phoneNumber) async {
    if (phoneNumber == null) return;
    
    final url = 'tel:$phoneNumber';
    try {
      await launchUrlString(url);
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å: $e');
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
  Future<void> waitForClient() async {
    setState(() {
      isLoading = true;
    });
    try {
      await inject<OrderRequestsInteractor>().arrivedOrderRequest(
        driver: widget.me,
        orderRequest: widget.activeOrder.orderRequest!,
      );

      waitingTimer = Timer.periodic(Duration(seconds: 1), (timer) {
        if (waitingTimerLeft > 0) {
          setState(() {
            waitingTimerLeft--;
          });
        } else {
          rejectOrder();
          timer.cancel();
        }
      });

      fetchActiveOrder();
    } on Exception catch (e) {
      // TODO
    }
    setState(() {
      isLoading = false;
    });
  }

  Future<void> startTrip() async {
    setState(() {
      isLoading = true;
    });
    try {
      await inject<OrderRequestsInteractor>().startOrderRequest(
        driver: widget.me,
        orderRequest: widget.activeOrder.orderRequest!,
      );
      waitingTimer?.cancel();
      fetchActiveOrder();
    } on Exception catch (e) {
      // TODO
    }
    setState(() {
      isLoading = false;
    });
  }

  Future<void> finishTrip() async {
    setState(() {
      isLoading = true;
    });
    try {
      await inject<OrderRequestsInteractor>().endOrderRequest(
        driver: widget.me,
        orderRequest: widget.activeOrder.orderRequest!,
      );
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
      if (mounted) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–ü–æ–µ–∑–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 2),
          ),
        );
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        Navigator.of(context).pop();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
        // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç fetchActiveOrder –≤ orders_wm.dart
      }
    } on Exception catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏'),
            backgroundColor: Colors.red,
            duration: Duration(seconds: 2),
          ),
        );
      }
    }

    if (mounted) {
      setState(() {
        isLoading = false;
      });
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
  void _setupDriverPositionListener() {
    positionStreamSubscription = Geolocator.getPositionStream(
      locationSettings: LocationSettings(
        accuracy: LocationAccuracy.high,
        distanceFilter: 5, // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–µ—Ç—Ä–æ–≤
      ),
    ).listen((Position position) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –∫–∞—Ä—Ç–µ
      if (mounted && mapboxMapController != null) {
        _currentPosition = position; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        
        try {
          addDriverMarker(position.latitude, position.longitude);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
          _updateRouteBasedOnDriverPosition(position.latitude, position.longitude);
          
          print('üìç –ü–æ–∑–∏—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${position.latitude}, ${position.longitude}');
        } catch (e) {
          print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è: $e');
        }
      }
    });
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
  void _startMapUpdateTimer() {
    mapUpdateTimer = Timer.periodic(Duration(seconds: 10), (timer) {
      if (mounted && mapboxMapController != null) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –∏ –º–∞—Ä–∫–µ—Ä—ã
        fetchActiveOrderRoute();
        
        print('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã');
      } else if (!mounted) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –≤–∏–¥–∂–µ—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
        timer.cancel();
      }
    });
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è
  Future<void> _updateRouteBasedOnDriverPosition(double driverLat, double driverLng) async {
    try {
      final orderStatus = activeRequest.orderRequest?.orderStatus;
      print('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞: $orderStatus');
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      final clientLat = activeRequest.orderRequest!.lat.toDouble();
      final clientLng = activeRequest.orderRequest!.lng.toDouble();
      
      // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—Ç–æ—á–∫–∞ –ë) - –ø–∞—Ä—Å–∏–º –∏–∑ toMapboxId
      double destinationLat, destinationLng;
      try {
        final toCoords = activeRequest.orderRequest!.toMapboxId.split(';');
        if (toCoords.length >= 2) {
          destinationLat = double.tryParse(toCoords[0]) ?? 0.0;
          destinationLng = double.tryParse(toCoords[1]) ?? 0.0;
        } else {
          destinationLat = clientLat + 0.01;
          destinationLng = clientLng + 0.01;
        }
      } catch (e) {
        print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        destinationLat = clientLat + 0.01;
        destinationLng = clientLng + 0.01;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
      switch (orderStatus) {
        case 'STARTED':
        case 'ACCEPTED':
          // –í–æ–¥–∏—Ç–µ–ª—å –µ–¥–µ—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É - –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –¥–æ –∫–ª–∏–µ–Ω—Ç–∞
          print('üìç STARTED/ACCEPTED: –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –∫ –∫–ª–∏–µ–Ω—Ç—É');
          await _updateRouteOnMap(
            fromLat: driverLat,
            fromLng: driverLng,
            toLat: clientLat,
            toLng: clientLng,
            showDriverMarker: true,
            showClientMarker: true,
            showDestinationMarker: false,
          );
          break;
          
        case 'ONGOING':
          // –í–æ–¥–∏—Ç–µ–ª—å –≤–µ–∑–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
          print('üìç ONGOING: –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é');
          await _updateRouteOnMap(
            fromLat: driverLat,
            fromLng: driverLng,
            toLat: destinationLat,
            toLng: destinationLng,
            showDriverMarker: true,
            showClientMarker: false,
            showDestinationMarker: true,
          );
          break;
          
        case 'WAITING':
          // –í–æ–¥–∏—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ - —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è
          print('üìç WAITING: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è');
          await addDriverMarker(driverLat, driverLng);
          // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª–µ
          await mapboxMapController!.flyTo(
            mapbox.CameraOptions(
              center: mapbox.Point(coordinates: mapbox.Position(driverLng, driverLat)),
              zoom: 16.0,
              padding: mapbox.MbxEdgeInsets(top: 100, left: 50, bottom: 300, right: 50),
            ),
            mapbox.MapAnimationOptions(duration: 1000),
          );
          break;
          
        default:
          print('üìç DEFAULT: –°—Ç–∞—Ç—É—Å $orderStatus - –º–∞—Ä—à—Ä—É—Ç –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è');
          break;
      }
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è: $e');
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
  Future<void> _updateRouteOnMap({
    required double fromLat,
    required double fromLng,
    required double toLat,
    required double toLng,
    required bool showDriverMarker,
    required bool showClientMarker,
    required bool showDestinationMarker,
  }) async {
    try {
      if (mapboxMapController == null) return;
      
      // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç Mapbox API
      final directions = await inject<MapboxApi>().getDirections(
        fromLat: fromLat,
        fromLng: fromLng,
        toLat: toLat,
        toLng: toLng,
      );
      
      if (directions == null || directions['routes'] == null || directions['routes'].isEmpty) {
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç API');
        return;
      }
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
      await _clearRouteLayers();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
      await _addRouteToMap(directions);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
      if (showDriverMarker) {
        await addDriverMarker(fromLat, fromLng);
      }
      
      if (showClientMarker) {
        await addStaticMarkers([
          {'lat': activeRequest.orderRequest!.lat.toDouble(), 'lng': activeRequest.orderRequest!.lng.toDouble(), 'type': 'point_a'},
        ]);
      }
      
      if (showDestinationMarker) {
        final toCoords = activeRequest.orderRequest!.toMapboxId.split(';');
        if (toCoords.length >= 2) {
          final destLat = double.tryParse(toCoords[0]) ?? 0.0;
          final destLng = double.tryParse(toCoords[1]) ?? 0.0;
          await addStaticMarkers([
            {'lat': destLat, 'lng': destLng, 'type': 'point_b'},
          ]);
        }
      }
      
      // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
      await _fitCameraToRoute(fromLat, fromLng, toLat, toLng);
      
      print('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: –æ—Ç ($fromLat, $fromLng) –¥–æ ($toLat, $toLng)');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ: $e');
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ª–æ–µ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
  Future<void> _clearRouteLayers() async {
    try {
      if (mapboxMapController == null) return;
      
      // –£–¥–∞–ª—è–µ–º —Å–ª–æ–∏ –º–∞—Ä—à—Ä—É—Ç–∞
      if (await mapboxMapController!.style.styleLayerExists('route-layer')) {
        await mapboxMapController!.style.removeStyleLayer('route-layer');
      }
      if (await mapboxMapController!.style.styleLayerExists('route-outline-layer')) {
        await mapboxMapController!.style.removeStyleLayer('route-outline-layer');
      }
      if (await mapboxMapController!.style.styleSourceExists('route-source')) {
        await mapboxMapController!.style.removeStyleSource('route-source');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–ª–æ–µ–≤ –º–∞—Ä—à—Ä—É—Ç–∞: $e');
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É
  Future<void> _addRouteToMap(Map<String, dynamic> directions) async {
    try {
      if (mapboxMapController == null) return;
      
      final routeGeometry = directions['routes'][0]['geometry'];
      final lineString = {
        "type": "Feature",
        "geometry": routeGeometry,
        "properties": {}
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞
      await mapboxMapController!.style.addSource(mapbox.GeoJsonSource(
        id: 'route-source',
        data: json.encode({
          "type": "FeatureCollection",
          "features": [lineString]
        }),
      ));

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –∫–æ–Ω—Ç—É—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞
      await mapboxMapController!.style.addLayer(mapbox.LineLayer(
        id: 'route-outline-layer',
        sourceId: 'route-source',
        lineColor: 0xFF1565C0, // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π –∫–æ–Ω—Ç—É—Ä
        lineWidth: 8.0,
        lineOpacity: 0.8,
        lineCap: mapbox.LineCap.ROUND,
        lineJoin: mapbox.LineJoin.ROUND,
      ));

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π –º–∞—Ä—à—Ä—É—Ç–∞
      await mapboxMapController!.style.addLayer(mapbox.LineLayer(
        id: 'route-layer',
        sourceId: 'route-source',
        lineColor: 0xFF2196F3, // –Ø—Ä–∫–∏–π —Å–∏–Ω–∏–π
        lineWidth: 5.0,
        lineOpacity: 1.0,
        lineCap: mapbox.LineCap.ROUND,
        lineJoin: mapbox.LineJoin.ROUND,
      ));
      
      print('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: $e');
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
  Future<void> _fitCameraToRoute(double fromLat, double fromLng, double toLat, double toLng) async {
    try {
      if (mapboxMapController == null) return;
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
      final minLat = math.min(fromLat, toLat);
      final maxLat = math.max(fromLat, toLat);
      final minLng = math.min(fromLng, toLng);
      final maxLng = math.max(fromLng, toLng);

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø
      const padding = 0.01;
      final bounds = mapbox.CoordinateBounds(
        southwest: mapbox.Point(coordinates: mapbox.Position(minLng - padding, minLat - padding)),
        northeast: mapbox.Point(coordinates: mapbox.Position(maxLng + padding, maxLat + padding)),
        infiniteBounds: false,
      );

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
      await mapboxMapController!.flyTo(
        mapbox.CameraOptions(
          center: mapbox.Point(coordinates: mapbox.Position(
            (minLng + maxLng) / 2,
            (minLat + maxLat) / 2,
          )),
          zoom: 14.0,
          padding: mapbox.MbxEdgeInsets(top: 100, left: 50, bottom: 300, right: 50),
        ),
        mapbox.MapAnimationOptions(duration: 1000),
      );

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã: $e');
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –∫–∞—Ä—Ç—É
  Future<void> addDriverMarker(double lat, double lng) async {
    try {
      if (mapboxMapController == null) return;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–∫–æ–Ω–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —á—Ç–æ –∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
      bool iconExists = false;
      try {
        iconExists = await mapboxMapController!.style.hasStyleImage('professional_car_icon');
        print('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∫–æ–Ω–∫–∏ –º–∞—à–∏–Ω—ã: $iconExists');
      } catch (e) {
        iconExists = false;
        print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∫–æ–Ω–∫–∏: $e');
      }
      
      // –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–µ
      if (!iconExists) {
        await _loadCarIconFromPng();
      }
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è
      final driverFeature = {
        "type": "Feature",
        "id": "driver-marker",
        "properties": {
          "icon": "professional_car_icon"
        },
        "geometry": {
          "type": "Point",
          "coordinates": [lng, lat]
        }
      };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –º–∞—Ä–∫–µ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è
      bool sourceExists = await mapboxMapController!.style.styleSourceExists('live-driver-marker-source');
      bool layerExists = await mapboxMapController!.style.styleLayerExists('live-driver-marker-layer');
      
      if (sourceExists && layerExists) {
        // –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ —Å–ª–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        try {
          await mapboxMapController!.style.setStyleSourceProperty(
            'live-driver-marker-source',
            'data',
            json.encode({
              "type": "FeatureCollection",
              "features": [driverFeature]
            }),
          );
          print('‚úÖ –ú–∞—Ä–∫–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω: $lat, $lng');
          return;
        } catch (e) {
          print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä–∫–µ—Ä, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π: $e');
        }
      }
      
      // –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ —Å–ª–æ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
      try {
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (layerExists) {
          await mapboxMapController!.style.removeStyleLayer('live-driver-marker-layer');
        }
        if (sourceExists) {
          await mapboxMapController!.style.removeStyleSource('live-driver-marker-source');
        }
      } catch (e) {
        print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: $e');
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è
      await mapboxMapController!.style.addSource(mapbox.GeoJsonSource(
        id: 'live-driver-marker-source',
        data: json.encode({
          "type": "FeatureCollection",
          "features": [driverFeature]
        }),
      ));
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
      await mapboxMapController!.style.addLayer(
        mapbox.SymbolLayer(
          id: 'live-driver-marker-layer',
          sourceId: 'live-driver-marker-source',
          iconImage: "professional_car_icon",
          iconSize: 0.7, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ä–∞–∑–º–µ—Ä —á—Ç–æ –∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
          iconAllowOverlap: true,
          iconIgnorePlacement: true,
          iconAnchor: mapbox.IconAnchor.BOTTOM,
          symbolZOrder: mapbox.SymbolZOrder.SOURCE, // –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ z-index
        ),
      );
      
      print('‚úÖ –ú–∞—Ä–∫–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—è (–º–∞—à–∏–Ω–∫–∞) –¥–æ–±–∞–≤–ª–µ–Ω: $lat, $lng');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è: $e');
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å fallback
      try {
        await _createFallbackCarIcon();
        
        // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ —Å–ª–æ–π –∑–∞–Ω–æ–≤–æ
        final driverFeature = {
          "type": "Feature",
          "id": "driver-marker",
          "properties": {
            "icon": "professional_car_icon"
          },
          "geometry": {
            "type": "Point",
            "coordinates": [lng, lat]
          }
        };
        
        await mapboxMapController!.style.addSource(mapbox.GeoJsonSource(
          id: 'live-driver-marker-source',
          data: json.encode({
            "type": "FeatureCollection",
            "features": [driverFeature]
          }),
        ));
        
        await mapboxMapController!.style.addLayer(
          mapbox.SymbolLayer(
            id: 'live-driver-marker-layer',
            sourceId: 'live-driver-marker-source',
            iconImage: "professional_car_icon",
            iconSize: 0.7,
            iconAllowOverlap: true,
            iconIgnorePlacement: true,
            iconAnchor: mapbox.IconAnchor.BOTTOM,
          ),
        );
        
        print('‚úÖ Fallback –º–∞—Ä–∫–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω');
      } catch (fallbackError) {
        print('‚ùå‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è: $fallbackError');
      }
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º PNG –∏–∫–æ–Ω–∫—É –º–∞—à–∏–Ω—ã (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏)
  Future<void> _loadCarIconFromPng() async {
    try {
      print('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º PNG –∏–∫–æ–Ω–∫—É –º–∞—à–∏–Ω—ã...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ —É–∂–µ –∏–∫–æ–Ω–∫–∞
      bool iconExists = await mapboxMapController!.style.hasStyleImage('professional_car_icon');
      if (iconExists) {
        print('‚úÖ –ò–∫–æ–Ω–∫–∞ –º–∞—à–∏–Ω—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        return;
      }
      
      final ByteData data = await rootBundle.load('assets/images/car-white-svgrepo-com.png');
      print('üìÅ PNG —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: ${data.lengthInBytes} –±–∞–π—Ç');
      
      // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã —Ä–∞–∑—É–º–Ω—ã–µ –¥–ª—è Mapbox
      const int width = 60;
      const int height = 60;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º PNG –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π Mapbox —Å–º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
      final ui.Codec codec = await ui.instantiateImageCodec(
        data.buffer.asUint8List(),
        targetWidth: width,
        targetHeight: height,
      );
      final ui.FrameInfo frameInfo = await codec.getNextFrame();
      final ByteData? resizedData = await frameInfo.image.toByteData(format: ui.ImageByteFormat.png);
      
      if (resizedData == null) {
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      }
      
      print('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä: ${resizedData.lengthInBytes} –±–∞–π—Ç');
      
      await mapboxMapController!.style.addStyleImage(
        'professional_car_icon', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∏–º—è –≤–µ–∑–¥–µ
        1.0,
        mapbox.MbxImage(
          width: width,
          height: height,
          data: resizedData.buffer.asUint8List(),
        ),
        false,
        [],
        [],
        null,
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∫–æ–Ω–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞
      bool added = await mapboxMapController!.style.hasStyleImage('professional_car_icon');
      if (added) {
        print('‚úÖ PNG –∏–∫–æ–Ω–∫–∞ –º–∞—à–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ professional_car_icon');
      } else {
        throw Exception('–ò–∫–æ–Ω–∫–∞ –Ω–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Mapbox');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PNG –∏–∫–æ–Ω–∫–∏: $e');
      throw e; // –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –º–µ—Ç–æ–¥–µ
    }
  }
  
  // Fallback –∏–∫–æ–Ω–∫–∞ –º–∞—à–∏–Ω—ã (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏)
  Future<void> _createFallbackCarIcon() async {
    try {
      print('üîÑ –°–æ–∑–¥–∞–µ–º fallback –∏–∫–æ–Ω–∫—É –º–∞—à–∏–Ω—ã...');
      
      const size = 60;
      final recorder = ui.PictureRecorder();
      final canvas = Canvas(recorder);

      // –§–æ–Ω —Å —Ç–µ–Ω—å—é
      final shadowPaint = Paint()
        ..color = Colors.black.withOpacity(0.4)
        ..maskFilter = const MaskFilter.blur(BlurStyle.normal, 4);
      canvas.drawCircle(Offset(size / 2 + 2, size / 2 + 2), 25, shadowPaint);

      // –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä—É–≥
      final bgPaint = Paint()
        ..color = Colors.white
        ..style = PaintingStyle.fill;
      canvas.drawCircle(Offset(size / 2, size / 2), 23, bgPaint);

      // –û–±–≤–æ–¥–∫–∞
      final borderPaint = Paint()
        ..color = Colors.blue
        ..style = PaintingStyle.stroke
        ..strokeWidth = 2;
      canvas.drawCircle(Offset(size / 2, size / 2), 21, borderPaint);

      // –†–∏—Å—É–µ–º –º–∞—à–∏–Ω–∫—É
      final carPaint = Paint()
        ..color = Colors.blue
        ..style = PaintingStyle.fill;

      // –ö–æ—Ä–ø—É—Å –º–∞—à–∏–Ω–∫–∏
      final carRect = Rect.fromCenter(
        center: Offset(size / 2, size / 2),
        width: 30,
        height: 20,
      );
      canvas.drawRRect(
        RRect.fromRectAndRadius(carRect, Radius.circular(8)),
        carPaint,
      );

      // –ö–æ–ª–µ—Å–∞
      canvas.drawCircle(Offset(size / 2 - 8, size / 2 + 8), 4, Paint()..color = Colors.black);
      canvas.drawCircle(Offset(size / 2 + 8, size / 2 + 8), 4, Paint()..color = Colors.black);

      // –û–∫–Ω–∞
      final windowPaint = Paint()
        ..color = Colors.white
        ..style = PaintingStyle.fill;
      canvas.drawRRect(
        RRect.fromRectAndRadius(
          Rect.fromCenter(
            center: Offset(size / 2, size / 2 - 2),
            width: 20,
            height: 8,
          ),
          Radius.circular(4),
        ),
        windowPaint,
      );

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      final picture = recorder.endRecording();
      final image = await picture.toImage(size, size);
      final byteData = await image.toByteData(format: ui.ImageByteFormat.png);
      final Uint8List imageBytes = byteData!.buffer.asUint8List();
      
      // –°–æ–∑–¥–∞–µ–º Mapbox –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      final mbxImage = mapbox.MbxImage(
        data: imageBytes,
        width: size,
        height: size,
      );
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∏–ª—å –∫–∞—Ä—Ç—ã
      await mapboxMapController?.style.addStyleImage(
        'professional_car_icon',
        1.0,
        mbxImage,
        false,
        [],
        [],
        null,
      );
      
      print('‚úÖ Fallback –∏–∫–æ–Ω–∫–∞ –º–∞—à–∏–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback –∏–∫–æ–Ω–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è: $e');
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –∞—Å—Å–µ—Ç–æ–≤
  Future<void> addImageFromAsset(String name, String assetName) async {
    try {
      // Create a small colored circle with text
      final int size = 40; // Slightly larger size
      
      // Create a canvas to draw the marker
      final pictureRecorder = ui.PictureRecorder();
      final canvas = ui.Canvas(pictureRecorder);
      
      // Background with border
      final bgPaint = Paint()
        ..color = Colors.white
        ..style = PaintingStyle.fill;
        
      final borderPaint = Paint()
        ..color = name == 'point_a' ? Colors.green : Colors.red
        ..style = PaintingStyle.stroke
        ..strokeWidth = 3.0;
      
      // Draw circle with border
      canvas.drawCircle(ui.Offset(size / 2, size / 2), size / 2 - 3, bgPaint);
      canvas.drawCircle(ui.Offset(size / 2, size / 2), size / 2 - 3, borderPaint);
      
      // Add text
      final textStyle = TextStyle(
        color: name == 'point_a' ? Colors.green : Colors.red,
        fontSize: 18,
        fontWeight: FontWeight.bold,
      );
      
      final textSpan = TextSpan(
        text: name == 'point_a' ? 'A' : 'B',
        style: textStyle,
      );
      
      final textPainter = TextPainter(
        text: textSpan,
        textDirection: TextDirection.ltr,
        textAlign: TextAlign.center,
      );
      
      textPainter.layout();
      textPainter.paint(
        canvas, 
        ui.Offset(size / 2 - textPainter.width / 2, size / 2 - textPainter.height / 2)
      );
      
      // Convert to image
      final picture = pictureRecorder.endRecording();
      final image = await picture.toImage(size, size);
      final byteData = await image.toByteData(format: ui.ImageByteFormat.png);
      final Uint8List imageBytes = byteData!.buffer.asUint8List();
      
      // Create Mapbox image
      final mbxImage = mapbox.MbxImage(
        data: imageBytes,
        width: size,
        height: size,
      );
      
      // Add to map style
      await mapboxMapController?.style.addStyleImage(
        name,
        1.0, // Normal scale
        mbxImage,
        false, // sdf
        [], // stretchX
        [], // stretchY
        null, // content
      );
      
      print("Custom marker created: $name");
    } catch (e) {
      print("Error creating custom marker: $e");
      // Fallback to asset loading if custom creation fails
      try {
        final ByteData bytes = await rootBundle.load(assetName);
        final Uint8List list = bytes.buffer.asUint8List();
        final ui.Codec codec = await ui.instantiateImageCodec(list);
        final ui.FrameInfo frameInfo = await codec.getNextFrame();
        final image = frameInfo.image;
        
        final mbxImage = mapbox.MbxImage(
          data: list,
          height: image.height,
          width: image.width,
        );
        
        await mapboxMapController?.style.addStyleImage(
          name,
          0.5, // Normal scale
          mbxImage,
          false, // sdf
          [], // stretchX
          [], // stretchY
          null, // content
        );
      } catch (e) {
        print("Error loading marker asset: $e");
      }
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –≤–æ–¥–∏—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  Future<void> updateDriverMapBasedOnStatus(String orderStatus) async {
    try {
      if (mapboxMapController == null) return;
      print('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞: $orderStatus');
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ –º–∞—Ä–∫–µ—Ä—ã
      await clearAllMapElements();
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫ –ê –∏ –ë
      final fromCoords = parseMapboxCoordinates(widget.activeOrder.orderRequest?.fromMapboxId ?? '');
      final toCoords = parseMapboxCoordinates(widget.activeOrder.orderRequest?.toMapboxId ?? '');
      final driverPosition = await _getCurrentDriverPosition();
      
      if (fromCoords == null || toCoords == null) {
        print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞');
        return;
      }
      
      print('üìç –¢–æ—á–∫–∞ –ê: ${fromCoords.lat}, ${fromCoords.lng}');
      print('üìç –¢–æ—á–∫–∞ –ë: ${toCoords.lat}, ${toCoords.lng}');
      print('üöó –ü–æ–∑–∏—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: ${driverPosition?.latitude}, ${driverPosition?.longitude}');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞
      switch (orderStatus) {
        case 'CREATED':
          // –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –Ω–æ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –∫ –∫–ª–∏–µ–Ω—Ç—É
          if (driverPosition != null) {
            await displayRouteOnMap(
              LatLng(driverPosition.latitude, driverPosition.longitude),
              LatLng(fromCoords.lat.toDouble(), fromCoords.lng.toDouble()),
              showDriverMarker: true,
              showClientMarker: true,
              showDestinationMarker: false,
            );
          }
          break;
          
        case 'STARTED':
        case 'ACCEPTED':
          // –í–æ–¥–∏—Ç–µ–ª—å –µ–¥–µ—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –∫ —Ç–æ—á–∫–µ –ê
          if (driverPosition != null) {
            await displayRouteOnMap(
              LatLng(driverPosition.latitude, driverPosition.longitude),
              LatLng(fromCoords.lat.toDouble(), fromCoords.lng.toDouble()),
              showDriverMarker: true,
              showClientMarker: true,
              showDestinationMarker: false,
            );
          }
          break;
          
        case 'WAITING':
          // –í–æ–¥–∏—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ä—ã –≤–æ–¥–∏—Ç–µ–ª—è –∏ –∫–ª–∏–µ–Ω—Ç–∞
          if (driverPosition != null) {
            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—è
            await addDriverMarker(driverPosition.latitude, driverPosition.longitude);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞
            await addClientMarker(fromCoords.lat.toDouble(), fromCoords.lng.toDouble());
            
            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –º–µ–∂–¥—É –≤–æ–¥–∏—Ç–µ–ª–µ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º
            await _zoomToShowBounds(
              math.min(driverPosition.latitude, fromCoords.lat.toDouble()) - 0.01,
              math.min(driverPosition.longitude, fromCoords.lng.toDouble()) - 0.01,
              math.max(driverPosition.latitude, fromCoords.lat.toDouble()) + 0.01,
              math.max(driverPosition.longitude, fromCoords.lng.toDouble()) + 0.01
            );
          }
          break;
          
        case 'ONGOING':
          // –í–æ–¥–∏—Ç–µ–ª—å –≤–µ–∑–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –∫ —Ç–æ—á–∫–µ –ë
          if (driverPosition != null) {
            await displayRouteOnMap(
              LatLng(driverPosition.latitude, driverPosition.longitude),
              LatLng(toCoords.lat.toDouble(), toCoords.lng.toDouble()),
              showDriverMarker: true,
              showClientMarker: false,
              showDestinationMarker: true,
            );
          }
          break;
          
        case 'COMPLETED':
        case 'REJECTED':
        case 'REJECTED_BY_CLIENT':
        case 'REJECTED_BY_DRIVER':
          // –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω - –æ—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É
          await clearAllMapElements();
          break;
          
        default:
          print('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: $orderStatus');
          break;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤–æ–¥–∏—Ç–µ–ª—è: $e');
    }
  }

  // –ü–∞—Ä—Å–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ mapboxId —Ñ–æ—Ä–º–∞—Ç–∞ "lat;lng"
  geotypes.Position? parseMapboxCoordinates(String mapboxId) {
    try {
      if (mapboxId.isEmpty) return null;
      
      final parts = mapboxId.split(';');
      if (parts.length >= 2) {
        final lat = double.tryParse(parts[0]);
        final lng = double.tryParse(parts[1]);
        
        if (lat != null && lng != null) {
          return geotypes.Position(lng, lat);
        }
      }
      return null;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: $e');
      return null;
    }
  }

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è
  Future<void> displayRouteOnMap(
    LatLng from,
    LatLng to,
    {
      bool showDriverMarker = true,
      bool showClientMarker = false,
      bool showDestinationMarker = false,
    }
  ) async {
    try {
      if (mapboxMapController == null) return;
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
      await clearAllMapElements();
      
      // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç Mapbox API
      final directions = await inject<MapboxApi>().getDirections(
        fromLat: from.latitude,
        fromLng: from.longitude,
        toLat: to.latitude,
        toLng: to.longitude,
      );
      
      if (directions == null || directions['routes'] == null || directions['routes'].isEmpty) {
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç API');
        return;
      }
      
      final routeGeometry = directions['routes'][0]['geometry'];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞
      await mapboxMapController!.style.addSource(mapbox.GeoJsonSource(
        id: 'route-source',
        data: json.encode({
          "type": "FeatureCollection",
          "features": [{
            "type": "Feature",
            "geometry": routeGeometry,
            "properties": {}
          }]
        }),
      ));
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –∫–æ–Ω—Ç—É—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞
      await mapboxMapController!.style.addLayer(mapbox.LineLayer(
        id: 'route-outline-layer',
        sourceId: 'route-source',
        lineColor: Colors.black.value,
        lineWidth: 6.0,
        lineOpacity: 0.5,
      ));
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –º–∞—Ä—à—Ä—É—Ç–∞
      await mapboxMapController!.style.addLayer(mapbox.LineLayer(
        id: 'route-layer',
        sourceId: 'route-source',
        lineColor: primaryColor.value,
        lineWidth: 4.0,
        lineOpacity: 0.8,
      ));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
      if (showDriverMarker && _currentPosition != null) {
        await addDriverMarker(_currentPosition!.latitude, _currentPosition!.longitude);
      }
      
      if (showClientMarker) {
        await addClientMarker(to.latitude, to.longitude);
      }
      
      if (showDestinationMarker) {
        await addDestinationMarker(to.latitude, to.longitude);
      }
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –º–∞—Ä—à—Ä—É—Ç
      await _zoomToShowBounds(
        math.min(from.latitude, to.latitude) - 0.01,
        math.min(from.longitude, to.longitude) - 0.01,
        math.max(from.latitude, to.latitude) + 0.01,
        math.max(from.longitude, to.longitude) + 0.01
      );
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ: $e');
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Ä–∫–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É
  Future<void> addClientMarker(double lat, double lng) async {
    try {
      if (mapboxMapController == null) return;
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä–∫–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞
      if (await mapboxMapController!.style.styleLayerExists('client-marker-layer')) {
        await mapboxMapController!.style.removeStyleLayer('client-marker-layer');
      }
      if (await mapboxMapController!.style.styleSourceExists('client-marker-source')) {
        await mapboxMapController!.style.removeStyleSource('client-marker-source');
      }
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞
      final clientPoint = {
        "type": "Feature",
        "geometry": {
          "type": "Point",
          "coordinates": [lng, lat]
        },
        "properties": {
          "marker-symbol": "client-marker"
        }
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞
      await mapboxMapController!.style.addSource(mapbox.GeoJsonSource(
        id: 'client-marker-source',
        data: json.encode({
          "type": "FeatureCollection",
          "features": [clientPoint]
        }),
      ));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –∏–∫–æ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
      await createClientMarkerIcon();
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞
      await mapboxMapController!.style.addLayer(mapbox.SymbolLayer(
        id: 'client-marker-layer',
        sourceId: 'client-marker-source',
        iconImage: "client-marker-icon",
        iconSize: 0.8,
        iconAllowOverlap: true,
        iconAnchor: mapbox.IconAnchor.BOTTOM,
      ));
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞: $e');
    }
  }

  // –°–æ–∑–¥–∞–µ—Ç –∏–∫–æ–Ω–∫—É –º–∞—Ä–∫–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞
  Future<void> createClientMarkerIcon() async {
    try {
      if (mapboxMapController == null) return;
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫—Ä—É–≥–ª—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      final size = 48.0;
      final recorder = ui.PictureRecorder();
      final canvas = Canvas(recorder);
      
      // –†–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥ —Å –±–µ–ª–æ–π –æ–∫–∞–Ω—Ç–æ–≤–∫–æ–π
      final paint = Paint()..color = Colors.green;
      canvas.drawCircle(Offset(size / 2, size / 2), size / 2, paint);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–ª—É—é –æ–∫–∞–Ω—Ç–æ–≤–∫—É
      final borderPaint = Paint()
        ..color = Colors.white
        ..style = PaintingStyle.stroke
        ..strokeWidth = 4.0;
      canvas.drawCircle(Offset(size / 2, size / 2), size / 2 - 2, borderPaint);
      
      // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ä–∏—Å—É–Ω–∫–∞
      final picture = recorder.endRecording();
      final img = await picture.toImage(size.toInt(), size.toInt());
      final byteData = await img.toByteData(format: ui.ImageByteFormat.png);
      
      if (byteData != null) {
        await mapboxMapController!.style.addStyleImage(
          "client-marker-icon",
          1.0,
          mapbox.MbxImage(
            width: size.toInt(),
            height: size.toInt(),
            data: byteData.buffer.asUint8List(),
          ),
          false,
          [],
          [],
          null,
        );
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –º–∞—Ä–∫–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞: $e');
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Ä–∫–µ—Ä –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç—É
  Future<void> addDestinationMarker(double lat, double lng) async {
    try {
      if (mapboxMapController == null) return;
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä–∫–µ—Ä –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      if (await mapboxMapController!.style.styleLayerExists('destination-marker-layer')) {
        await mapboxMapController!.style.removeStyleLayer('destination-marker-layer');
      }
      if (await mapboxMapController!.style.styleSourceExists('destination-marker-source')) {
        await mapboxMapController!.style.removeStyleSource('destination-marker-source');
      }
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      final destinationPoint = {
        "type": "Feature",
        "geometry": {
          "type": "Point",
          "coordinates": [lng, lat]
        },
        "properties": {
          "marker-symbol": "destination-marker"
        }
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      await mapboxMapController!.style.addSource(mapbox.GeoJsonSource(
        id: 'destination-marker-source',
        data: json.encode({
          "type": "FeatureCollection",
          "features": [destinationPoint]
        }),
      ));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –∏–∫–æ–Ω–∫–∞ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      await createDestinationMarkerIcon();
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      await mapboxMapController!.style.addLayer(mapbox.SymbolLayer(
        id: 'destination-marker-layer',
        sourceId: 'destination-marker-source',
        iconImage: "destination-marker-icon",
        iconSize: 0.8,
        iconAllowOverlap: true,
        iconAnchor: mapbox.IconAnchor.BOTTOM,
      ));
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: $e');
    }
  }

  // –°–æ–∑–¥–∞–µ—Ç –∏–∫–æ–Ω–∫—É –º–∞—Ä–∫–µ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  Future<void> createDestinationMarkerIcon() async {
    try {
      if (mapboxMapController == null) return;
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫—Ä—É–≥–ª—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      final size = 48.0;
      final recorder = ui.PictureRecorder();
      final canvas = Canvas(recorder);
      
      // –†–∏—Å—É–µ–º –∫—Ä–∞—Å–Ω—ã–π –∫—Ä—É–≥ —Å –±–µ–ª–æ–π –æ–∫–∞–Ω—Ç–æ–≤–∫–æ–π
      final paint = Paint()..color = Colors.red;
      canvas.drawCircle(Offset(size / 2, size / 2), size / 2, paint);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–ª—É—é –æ–∫–∞–Ω—Ç–æ–≤–∫—É
      final borderPaint = Paint()
        ..color = Colors.white
        ..style = PaintingStyle.stroke
        ..strokeWidth = 4.0;
      canvas.drawCircle(Offset(size / 2, size / 2), size / 2 - 2, borderPaint);
      
      // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ä–∏—Å—É–Ω–∫–∞
      final picture = recorder.endRecording();
      final img = await picture.toImage(size.toInt(), size.toInt());
      final byteData = await img.toByteData(format: ui.ImageByteFormat.png);
      
      if (byteData != null) {
        await mapboxMapController!.style.addStyleImage(
          "destination-marker-icon",
          1.0,
          mapbox.MbxImage(
            width: size.toInt(),
            height: size.toInt(),
            data: byteData.buffer.asUint8List(),
          ),
          false,
          [],
          [],
          null,
        );
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –º–∞—Ä–∫–µ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: $e');
    }
  }

  Future<void> _fitCameraToBounds(double minLat, double minLng, double maxLat, double maxLng) async {
    try {
      if (mapboxMapController == null) return;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø
      const padding = 0.01;
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
      await mapboxMapController!.flyTo(
        mapbox.CameraOptions(
          center: mapbox.Point(coordinates: mapbox.Position(
            (minLng + maxLng) / 2,
            (minLat + maxLat) / 2,
          )),
          zoom: 14.0,
          padding: mapbox.MbxEdgeInsets(top: 100, left: 50, bottom: 300, right: 50),
        ),
        mapbox.MapAnimationOptions(duration: 1000),
      );

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã: $e');
    }
  }

  Future<void> _zoomToShowBounds(double minLat, double minLng, double maxLat, double maxLng) async {
    try {
      if (mapboxMapController == null) return;
      
      // –¶–µ–Ω—Ç—Ä –æ–±–ª–∞—Å—Ç–∏
      final centerLat = (minLat + maxLat) / 2;
      final centerLng = (minLng + maxLng) / 2;
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑—É–º–∞
      final distance = _calculateDistance(minLat, minLng, maxLat, maxLng);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑—É–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
      double zoom;
      if (distance < 0.5) zoom = 16.0;
      else if (distance < 1) zoom = 15.5;
      else if (distance < 2) zoom = 15.0;
      else if (distance < 5) zoom = 14.0;
      else if (distance < 10) zoom = 13.0;
      else zoom = 12.0;
      
      // –ê–Ω–∏–º–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É
      await mapboxMapController!.flyTo(
        mapbox.CameraOptions(
          center: mapbox.Point(coordinates: mapbox.Position(centerLng, centerLat)),
          zoom: zoom,
          padding: mapbox.MbxEdgeInsets(top: 100, left: 50, bottom: 300, right: 50),
        ),
        mapbox.MapAnimationOptions(duration: 1000),
      );
      
      print('‚úÖ –ö–∞–º–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Ä—à—Ä—É—Ç–∞');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã: $e');
    }
  }

  Future<void> _displayDynamicRoute(
    mapbox.MapboxMap mapboxController,
    geotypes.Position fromPos,
    geotypes.Position toPos,
    String description,
  ) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç Mapbox API
      final directions = await inject<MapboxApi>().getDirections(
        fromLat: fromPos.lat.toDouble(),
        fromLng: fromPos.lng.toDouble(),
        toLat: toPos.lat.toDouble(),
        toLng: toPos.lng.toDouble(),
      );
      
      if (directions == null || directions['routes'] == null || directions['routes'].isEmpty) {
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç API');
        return;
      }
      
      final routeGeometry = directions['routes'][0]['geometry'];
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
      await clearAllMapElements();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞
      await mapboxController.style.addSource(mapbox.GeoJsonSource(
        id: 'dynamic-route-source',
        data: json.encode({
          "type": "FeatureCollection",
          "features": [{
            "type": "Feature",
            "geometry": routeGeometry,
            "properties": {}
          }]
        }),
      ));
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –º–∞—Ä—à—Ä—É—Ç–∞
      await mapboxController.style.addLayer(mapbox.LineLayer(
        id: 'dynamic-route-layer',
        sourceId: 'dynamic-route-source',
        lineColor: primaryColor.value,
        lineWidth: 5.0,
        lineOpacity: 0.9,
      ));
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞
      await _zoomToShowBounds(
        math.min(fromPos.lat.toDouble(), toPos.lat.toDouble()) - 0.01,
        math.min(fromPos.lng.toDouble(), toPos.lng.toDouble()) - 0.01,
        math.max(fromPos.lat.toDouble(), toPos.lat.toDouble()) + 0.01,
        math.max(fromPos.lng.toDouble(), toPos.lng.toDouble()) + 0.01
      );
      
      print('‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç $description –¥–æ–±–∞–≤–ª–µ–Ω');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞: $e');
    }
  }
}
