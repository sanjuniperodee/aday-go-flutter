import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:aktau_go/domains/active_request/active_request_domain.dart';
import 'package:aktau_go/forms/driver_registration_form.dart';
import 'package:aktau_go/interactors/profile_interactor.dart';
import 'package:flutter/material.dart';
import 'package:elementary/elementary.dart';
import 'package:elementary_helper/elementary_helper.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter_svg/svg.dart';
import 'package:geolocator/geolocator.dart';
import 'package:latlong2/latlong.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:socket_io_client/socket_io_client.dart' as IO;

import '../../core/colors.dart';
import '../../core/images.dart';
import '../../core/text_styles.dart';
import '../../domains/driver_registered_category/driver_registered_category_domain.dart';
import '../../domains/order_request/order_request_domain.dart';
import '../../domains/user/user_domain.dart';
import '../../interactors/order_requests_interactor.dart';
import '../../router/router.dart';
import '../../utils/logger.dart';
import '../../utils/utils.dart';
import '../widgets/primary_bottom_sheet.dart';
import '../widgets/primary_button.dart';
import './widgets/order_request_bottom_sheet.dart';
import './orders_model.dart';
import './orders_screen.dart';
import 'widgets/active_order_bottom_sheet.dart';

defaultOrdersWMFactory(BuildContext context) => OrdersWM(OrdersModel(
      inject<OrderRequestsInteractor>(),
      inject<ProfileInteractor>(),
    ));

abstract class IOrdersWM implements IWidgetModel {
  StateNotifier<int> get tabIndex;

  StateNotifier<List<OrderRequestDomain>> get orderRequests;

  StateNotifier<ActiveRequestDomain> get activeOrder;

  StateNotifier<List<DriverRegisteredCategoryDomain>> get driverRegisteredCategories;

  StateNotifier<UserDomain> get me;

  StateNotifier<bool> get showNewOrders;

  StateNotifier<bool> get isWebsocketConnected;

  StateNotifier<LocationPermission> get locationPermission;

  StateNotifier<DriverType> get orderType;

  StateNotifier<LatLng> get driverPosition;

  ValueNotifier<bool> get statusController;

  StateNotifier<bool> get isOrderRejected;

  Future<void> fetchOrderRequests();

  Future<void> onOrderRequestTap(OrderRequestDomain e);

  void tapNewOrders();

  void requestLocationPermission();

  void registerOrderType();
}

class OrdersWM extends WidgetModel<OrdersScreen, OrdersModel>
    with WidgetsBindingObserver
    implements IOrdersWM {
  OrdersWM(
    OrdersModel model,
  ) : super(model);

  IO.Socket? newOrderSocket;

  StreamSubscription<Position>? onUserLocationChanged;

  @override
  final StateNotifier<int> tabIndex = StateNotifier(
    initValue: 0,
  );

  @override
  final ValueNotifier<bool> statusController = ValueNotifier(false);

  @override
  final StateNotifier<bool> showNewOrders = StateNotifier(
    initValue: false,
  );

  @override
  final StateNotifier<bool> isWebsocketConnected = StateNotifier(
    initValue: false,
  );

  @override
  final StateNotifier<bool> isOrderRejected = StateNotifier(
    initValue: false,
  );

  @override
  final StateNotifier<DriverType> orderType = StateNotifier(
    initValue: DriverType.TAXI,
  );

  @override
  final StateNotifier<List<DriverRegisteredCategoryDomain>> driverRegisteredCategories =
      StateNotifier(
    initValue: const [],
  );

  @override
  final StateNotifier<UserDomain> me = StateNotifier();

  @override
  final StateNotifier<LatLng> driverPosition = StateNotifier(
      initValue: LatLng(
    inject<SharedPreferences>().getDouble('latitude') ?? 0,
    inject<SharedPreferences>().getDouble('longitude') ?? 0,
  ));

  @override
  final StateNotifier<List<OrderRequestDomain>> orderRequests = StateNotifier(
    initValue: const [],
  );

  @override
  void initWidgetModel() {
    super.initWidgetModel();
    fetchDriverRegisteredCategories();
    // –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ "–æ–Ω–ª–∞–π–Ω"
    // fetchOrderRequests(); // –£–î–ê–õ–ï–ù–û
    fetchUserProfile();
    fetchActiveOrder();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    _initializeLocationAndSocket();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    statusController.addListener(() async {
      logger.i('üîÑ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${statusController.value}');
      if (statusController.value) {
        // –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ "–æ–Ω–ª–∞–π–Ω" - –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –û–î–ò–ù —Ä–∞–∑
        await fetchOrderRequests();
        await _ensureLocationAndSocket();
      } else {
        // –ü—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ - –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        orderRequests.accept([]);
        await disconnectWebsocket();
      }
    });
    
    // –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π polling - –≤—Å–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç—ã
    // _startOrdersPolling(); // –£–î–ê–õ–ï–ù–û
  }

  @override
  void dispose() {
    onUserLocationChanged?.cancel();
    disconnectWebsocket(); // Good to disconnect too
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);
    // –£–ë–ò–†–ê–ï–ú —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    // fetchOrderRequests(); // –£–î–ê–õ–ï–ù–û
    // Only initialize socket if returning to foreground
    if (state == AppLifecycleState.resumed && statusController.value) {
      initializeSocket();
    }
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
    if (statusController.value && (isWebsocketConnected.value ?? false)) {
      Future.delayed(Duration(milliseconds: 300), () {
        if (context.mounted) {
          fetchOrderRequests();
        }
      });
    }
  }

  Future<void> fetchDriverRegisteredCategories() async {
    try {
      final response = await inject<ProfileInteractor>().fetchDriverRegisteredCategories();

      driverRegisteredCategories.accept(response);
    } on Exception catch (e) {
      logger.e(e);
    }
  }

  @override
  Future<void> fetchOrderRequests() async {
    try {
      final response = await model.getOrderRequests(
        type: orderType.value!,
      );
      orderRequests.accept(response);
      showNewOrders.accept(false);
    } on Exception catch (e) {
      logger.e(e);
    }
  }

  @override
  Future<void> onOrderRequestTap(OrderRequestDomain e) async {
    await showModalBottomSheet(
      context: context,
      isDismissible: true,
      enableDrag: false,
      isScrollControlled: true,
      useSafeArea: true,
      builder: (context) => OrderRequestBottomSheet(
        orderRequest: e,
        onAccept: () async {
          await acceptOrderRequest(e);
          Routes.router.popUntil((predicate) => predicate.isFirst);
          // –£–ë–ò–†–ê–ï–ú —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –≤—Å–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç—ã
          // fetchOrderRequests(); // –£–î–ê–õ–ï–ù–û
        },
      ),
    );
  }

  Future<void> acceptOrderRequest(OrderRequestDomain orderRequest) async {
    await model.acceptOrderRequest(
      driver: me.value!,
      orderRequest: orderRequest,
    );

    fetchActiveOrder();
  }

  Future<void> fetchUserProfile() async {
    try {
      final response = await model.getUserProfile();

      me.accept(response);

      if (statusController.value) {
        await initializeSocket();
      }
    } on Exception catch (e) {
      logger.e(e);
      // Don't call fetchUserProfile recursively as it can cause an infinite loop
      Future.delayed(Duration(seconds: 5), fetchUserProfile);
    }
  }

  @override
  final StateNotifier<ActiveRequestDomain> activeOrder = StateNotifier();

  void fetchActiveOrder({
    bool openBottomSheet = true,
  }) async {
    try {
      final response = await model.getActiveOrder();
      await fetchUserProfile();
      activeOrder.accept(response);
      if (openBottomSheet) {
        showModalBottomSheet(
          context: context,
          isDismissible: false,
          enableDrag: false,
          isScrollControlled: true,
          useSafeArea: true,
          builder: (context) => ActiveOrderBottomSheet(
            me: me.value!,
            activeOrder: activeOrder.value!,
            activeOrderListener: activeOrder,
            onCancel: () {},
          ),
        );
      }
    } on Exception catch (e) {
      logger.e(e);
      if (!openBottomSheet) {
        Navigator.of(context).popUntil(
          (predicate) => predicate.isFirst,
        );
        final snackBar = SnackBar(
          content: Text(
            '–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω',
          ),
        );
        fetchOrderRequests();
        ScaffoldMessenger.of(context).showSnackBar(snackBar);
      }
    }
  }

  @override
  void tapNewOrders() {
    showNewOrders.accept(false);
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    fetchOrderRequests();
  }

  Future<void> initializeSocket() async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–∫–µ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º
    if ((newOrderSocket?.connected ?? false) && (isWebsocketConnected.value ?? false)) {
      logger.i('‚úÖ –°–æ–∫–µ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      return;
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–æ–∫–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    await disconnectWebsocket();
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      final position = await Geolocator.getCurrentPosition();
      final sessionId = inject<SharedPreferences>().getString('sessionId');
      
      if (sessionId == null || sessionId.isEmpty) {
        logger.e('‚ùå SessionId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–æ–∫–µ—Ç');
        isWebsocketConnected.accept(false);
        return;
      }
      
      if (me.value?.id == null) {
        logger.e('‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
        isWebsocketConnected.accept(false);
        return;
      }
      
      logger.i('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∫–µ—Ç–∞...');
      logger.i('üìç SessionId: $sessionId');
      logger.i('üìç DriverId: ${me.value!.id}');
      logger.i('üìç Position: ${position.latitude}, ${position.longitude}');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–æ–∫–µ—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      newOrderSocket = IO.io(
        'https://taxi.aktau-go.kz',
        <String, dynamic>{
          'transports': ['websocket'],
          'autoConnect': false,
          'forceNew': true,
          'timeout': 30000,
          'reconnection': true,
          'reconnectionAttempts': 3,
          'reconnectionDelay': 5000,
          'query': {
            'sessionId': sessionId,
            'driverId': me.value!.id.toString(),
            'lat': position.latitude.toString(),
            'lng': position.longitude.toString(),
            'timestamp': DateTime.now().millisecondsSinceEpoch.toString(),
          },
        },
      );
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ü–ï–†–ï–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
      _setupSocketEventHandlers();
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç
      newOrderSocket!.connect();
      logger.i('üîå –°–æ–∫–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...');
      
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–∫–µ—Ç–∞: $e');
      isWebsocketConnected.accept(false);
    }
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–∞
  void _setupSocketEventHandlers() {
    if (newOrderSocket == null) return;
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    newOrderSocket!.clearListeners();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    newOrderSocket!.onConnect((_) {
      logger.i('‚úÖ –°–æ–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      isWebsocketConnected.accept(true);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      if (me.value != null) {
        try {
          newOrderSocket!.emit('driverOnline', {
            'driverId': me.value!.id,
            'lat': driverPosition.value?.latitude ?? 0,
            'lng': driverPosition.value?.longitude ?? 0,
            'timestamp': DateTime.now().millisecondsSinceEpoch,
          });
          logger.i('üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ –æ–Ω–ª–∞–π–Ω');
        } catch (e) {
          logger.e('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ driverOnline: $e');
        }
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    newOrderSocket!.onDisconnect((reason) {
      logger.w('üîå –°–æ–∫–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω: $reason');
      isWebsocketConnected.accept(false);
      
      // –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–µ - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      if (statusController.value && reason != 'io client disconnect') {
        logger.i('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        Future.delayed(Duration(seconds: 3), () {
          if (statusController.value && !(isWebsocketConnected.value ?? false)) {
            initializeSocket();
          }
        });
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    newOrderSocket!.onConnectError((error) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ–∫–µ—Ç–∞: $error');
      isWebsocketConnected.accept(false);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    newOrderSocket!.onReconnect((attempt) {
      logger.i('üîÑ –°–æ–∫–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª—Å—è (–ø–æ–ø—ã—Ç–∫–∞ $attempt)');
      isWebsocketConnected.accept(true);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    newOrderSocket!.onReconnectError((error) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $error');
      isWebsocketConnected.accept(false);
    });
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –ó–ê–ö–ê–ó–û–í ===
    
    // –ù–æ–≤—ã–π –∑–∞–∫–∞–∑
    newOrderSocket!.on('newOrder', (data) {
      logger.i('üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ newOrder: $data');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
      showNewOrders.accept(true);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –µ—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
      if (statusController.value) {
        Future.delayed(Duration(milliseconds: 100), () {
          if (context.mounted) {
            fetchOrderRequests();
          }
        });
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      _showNewOrderNotification();
    });
    
    // –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º
    newOrderSocket!.on('orderTaken', (data) {
      logger.i('üë§ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º: $data');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –µ—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
      if (statusController.value) {
        Future.delayed(Duration(milliseconds: 100), () {
          if (context.mounted) {
            fetchOrderRequests();
          }
        });
      }
    });
    
    // –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º
    newOrderSocket!.on('orderRejected', (data) async {
      logger.i('‚ùå –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ orderRejected: $data');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –µ—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
      if (statusController.value) {
        Future.delayed(Duration(milliseconds: 100), () {
          if (context.mounted) {
            fetchOrderRequests();
          }
        });
      }
      
      if (isOrderRejected.value == false && context.mounted) {
        isOrderRejected.accept(true);
        
        try {
          await showModalBottomSheet(
            context: context,
            isDismissible: true,
            isScrollControlled: true,
            builder: (context) => PrimaryBottomSheet(
              contentPadding: EdgeInsets.symmetric(horizontal: 16),
              child: Column(
                children: [
                  const SizedBox(height: 10),
                  Center(
                    child: Container(
                      width: 38,
                      height: 4,
                      decoration: BoxDecoration(
                        color: greyscale30,
                        borderRadius: BorderRadius.circular(1.4),
                      ),
                    ),
                  ),
                  const SizedBox(height: 24),
                  SvgPicture.asset(icPlacemarkError),
                  const SizedBox(height: 10),
                  SizedBox(
                    width: double.infinity,
                    child: Text(
                      '–ü–æ–µ–∑–¥–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º',
                      style: text500Size20Greyscale90,
                      textAlign: TextAlign.center,
                    ),
                  ),
                  const SizedBox(height: 24),
                  SizedBox(
                    width: double.infinity,
                    child: PrimaryButton.primary(
                      onPressed: () async {
                        isOrderRejected.accept(false);
                        fetchActiveOrder(openBottomSheet: false);
                        Navigator.of(context).pop();
                      },
                      text: '–ó–∞–∫—Ä—ã—Ç—å',
                      textStyle: text400Size16White,
                    ),
                  ),
                  const SizedBox(height: 24),
                ],
              ),
            ),
          );
        } catch (e) {
          logger.e('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: $e');
          isOrderRejected.accept(false);
        }
      }
    });
    
    // –ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω
    newOrderSocket!.on('orderUpdated', (data) {
      logger.i('üîÑ –ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω: $data');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –µ—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
      if (statusController.value) {
        Future.delayed(Duration(milliseconds: 100), () {
          if (context.mounted) {
            fetchOrderRequests();
          }
        });
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Ç–æ–∂–µ
      if (activeOrder.value != null) {
        fetchActiveOrder(openBottomSheet: false);
      }
    });
    
    // –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º
    newOrderSocket!.on('orderCancelled', (data) {
      logger.i('üö´ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º: $data');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –µ—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
      if (statusController.value) {
        Future.delayed(Duration(milliseconds: 100), () {
          if (context.mounted) {
            fetchOrderRequests();
          }
        });
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      try {
        if (activeOrder.value != null && 
            data != null && 
            data is Map && 
            data.containsKey('id') && 
            activeOrder.value!.orderRequest?.id.toString() == data['id'].toString()) {
          
          Navigator.of(context).popUntil((route) => route.isFirst);
          
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('–ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑'),
              backgroundColor: Colors.orange,
              duration: Duration(seconds: 3),
            ),
          );
          
          activeOrder.accept(ActiveRequestDomain());
        }
      } catch (e) {
        logger.e('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞: $e');
      }
    });
    
    // –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω
    newOrderSocket!.on('orderDeleted', (data) {
      logger.i('üóëÔ∏è –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω: $data');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –µ—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
      if (statusController.value) {
        Future.delayed(Duration(milliseconds: 100), () {
          if (context.mounted) {
            fetchOrderRequests();
          }
        });
      }
    });
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    newOrderSocket!.on('eventAck', (data) {
      logger.i('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: $data');
    });
    
    logger.i('üéØ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
  void _showNewOrderNotification() {
    try {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                Icon(Icons.local_taxi, color: Colors.white, size: 20),
                SizedBox(width: 8),
                Text('üöï –ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!'),
              ],
            ),
            duration: Duration(seconds: 4),
            backgroundColor: primaryColor,
            behavior: SnackBarBehavior.floating,
            action: SnackBarAction(
              label: '–ü–æ–∫–∞–∑–∞—Ç—å',
              textColor: Colors.white,
              onPressed: () {
                // –£–ë–ò–†–ê–ï–ú —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –≤—Å–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç—ã
                // fetchOrderRequests(); // –£–î–ê–õ–ï–ù–û
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–æ–ª–ª –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É UI
              },
            ),
          ),
        );
      }
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }

  Future<void> disconnectWebsocket() async {
    try {
      if (newOrderSocket != null) {
        logger.i('üîå –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç...');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å –æ—Ñ–ª–∞–π–Ω
        if ((newOrderSocket!.connected ?? false) && me.value != null) {
          try {
            newOrderSocket!.emit('driverOffline', {
              'driverId': me.value!.id,
              'timestamp': DateTime.now().millisecondsSinceEpoch,
            });
            logger.i('üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ –æ—Ñ–ª–∞–π–Ω');
          } catch (e) {
            logger.e('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ driverOffline: $e');
          }
        }
        
        // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        newOrderSocket!.clearListeners();
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç
        newOrderSocket!.disconnect();
        newOrderSocket!.dispose();
        newOrderSocket = null;
        
        logger.i('‚úÖ –°–æ–∫–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –∏ –æ—á–∏—â–µ–Ω');
      }
      
      isWebsocketConnected.accept(false);
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–æ–∫–µ—Ç–∞: $e');
      isWebsocketConnected.accept(false);
    }
  }

  @override
  final StateNotifier<LocationPermission> locationPermission = StateNotifier();

  @override
  Future<void> requestLocationPermission() async {
    final permission = await Geolocator.requestPermission();
    locationPermission.accept(permission);
    
    if ([LocationPermission.always, LocationPermission.whileInUse].contains(permission)) {
      statusController.value = true;
      await _startLocationTracking();
    }
  }

  @override
  Future<void> registerOrderType() async {
    await Routes.router.navigate(Routes.driverRegistrationScreen);
    await fetchDriverRegisteredCategories();
    // –£–ë–ò–†–ê–ï–ú —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –∑–∞–∫–∞–∑—ã –æ–±–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
    // await fetchOrderRequests(); // –£–î–ê–õ–ï–ù–û
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ —Å–æ–∫–µ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  Future<void> _initializeLocationAndSocket() async {
    final permission = await Geolocator.checkPermission();
    locationPermission.accept(permission);
    
    if (![LocationPermission.always, LocationPermission.whileInUse].contains(permission)) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
      final newPermission = await Geolocator.requestPermission();
      locationPermission.accept(newPermission);
    }
    
    // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –≤–∫–ª—é—á–∞–µ–º –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º
    if ([LocationPermission.always, LocationPermission.whileInUse].contains(locationPermission.value)) {
      statusController.value = true;
      await _startLocationTracking();
    }
  }

  // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ —Å–æ–∫–µ—Ç –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
  Future<void> _ensureLocationAndSocket() async {
    if ([LocationPermission.always, LocationPermission.whileInUse].contains(locationPermission.value)) {
      await _startLocationTracking();
      await initializeSocket();
    }
  }

  // –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  Future<void> _startLocationTracking() async {
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    onUserLocationChanged?.cancel();
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SharedPreferences
      final prefs = inject<SharedPreferences>();
      await prefs.setDouble('latitude', position.latitude);
      await prefs.setDouble('longitude', position.longitude);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      driverPosition.accept(LatLng(position.latitude, position.longitude));
      
      // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      onUserLocationChanged = Geolocator.getPositionStream(
        locationSettings: LocationSettings(
          accuracy: LocationAccuracy.high,
          distanceFilter: 10, // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞ 10+ –º–µ—Ç—Ä–æ–≤
        ),
      ).listen((Position position) async {
        await prefs.setDouble('latitude', position.latitude);
        await prefs.setDouble('longitude', position.longitude);
        driverPosition.accept(LatLng(position.latitude, position.longitude));
      });
    } catch (e) {
      logger.e('Error getting location: $e');
    }
  }
}
