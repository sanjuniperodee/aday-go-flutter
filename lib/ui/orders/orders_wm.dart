import 'dart:async';

import 'package:aktau_go/domains/active_request/active_request_domain.dart';
import 'package:aktau_go/forms/driver_registration_form.dart';
import 'package:aktau_go/interactors/profile_interactor.dart';
import 'package:flutter/material.dart';
import 'package:elementary/elementary.dart';
import 'package:elementary_helper/elementary_helper.dart';
import 'package:geolocator/geolocator.dart';
import 'package:latlong2/latlong.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:socket_io_client/socket_io_client.dart' as IO;
import 'package:flutter/services.dart';

import '../../domains/driver_registered_category/driver_registered_category_domain.dart';
import '../../domains/order_request/order_request_domain.dart';
import '../../domains/user/user_domain.dart';
import '../../interactors/order_requests_interactor.dart';
import '../../router/router.dart';
import '../../utils/logger.dart';
import '../../utils/utils.dart';
import './widgets/order_request_bottom_sheet.dart';
import './orders_model.dart';
import './orders_screen.dart';
import 'widgets/active_order_bottom_sheet.dart';
import 'package:aktau_go/interactors/common/rest_client.dart';

defaultOrdersWMFactory(BuildContext context) => OrdersWM(OrdersModel(
      inject<OrderRequestsInteractor>(),
      inject<ProfileInteractor>(),
    ));

abstract class IOrdersWM implements IWidgetModel {
  StateNotifier<int> get tabIndex;
  StateNotifier<List<OrderRequestDomain>> get orderRequests;
  StateNotifier<ActiveRequestDomain?> get activeOrder;
  StateNotifier<List<DriverRegisteredCategoryDomain>> get driverRegisteredCategories;
  StateNotifier<UserDomain?> get me;
  StateNotifier<bool> get showNewOrders;
  StateNotifier<bool> get isWebsocketConnected;
  StateNotifier<LocationPermission> get locationPermission;
  StateNotifier<DriverType> get orderType;
  StateNotifier<LatLng> get driverPosition;
  ValueNotifier<bool> get statusController;
  StateNotifier<bool> get isOrderRejected;
  StateNotifier<bool> get isWebSocketConnecting;
  StateNotifier<String?> get webSocketConnectionError;

  Future<void> fetchOrderRequests();
  Future<void> onOrderRequestTap(OrderRequestDomain e);
  void tapNewOrders();
  void requestLocationPermission();
  void registerOrderType();
  Future<void> initializeSocket();
}

class OrdersWM extends WidgetModel<OrdersScreen, OrdersModel>
    with WidgetsBindingObserver
    implements IOrdersWM {
  OrdersWM(super.model);

  IO.Socket? newOrderSocket;
  StreamSubscription<Position>? onUserLocationChanged;

  @override
  final StateNotifier<int> tabIndex = StateNotifier(initValue: 0);

  @override
  final ValueNotifier<bool> statusController = ValueNotifier(false);

  @override
  final StateNotifier<bool> showNewOrders = StateNotifier(initValue: false);

  @override
  final StateNotifier<bool> isWebsocketConnected = StateNotifier(initValue: false);

  @override
  final StateNotifier<bool> isOrderRejected = StateNotifier(initValue: false);

  @override
  final StateNotifier<DriverType> orderType = StateNotifier(initValue: DriverType.TAXI);

  @override
  final StateNotifier<List<DriverRegisteredCategoryDomain>> driverRegisteredCategories =
      StateNotifier(initValue: const []);

  @override
  final StateNotifier<UserDomain?> me = StateNotifier();

  @override
  final StateNotifier<LatLng> driverPosition = StateNotifier(
      initValue: LatLng(
    inject<SharedPreferences>().getDouble('latitude') ?? 0,
    inject<SharedPreferences>().getDouble('longitude') ?? 0,
  ));

  @override
  final StateNotifier<List<OrderRequestDomain>> orderRequests = StateNotifier(initValue: const []);

  @override
  final StateNotifier<bool> isWebSocketConnecting = StateNotifier(initValue: false);
  
  @override
  final StateNotifier<String?> webSocketConnectionError = StateNotifier();

  @override
  final StateNotifier<LocationPermission> locationPermission = StateNotifier();

  @override
  final StateNotifier<ActiveRequestDomain?> activeOrder = StateNotifier();

  // Separate non-nullable notifier for ActiveOrderBottomSheet
  final StateNotifier<ActiveRequestDomain> _activeOrderNotifier = StateNotifier();

  @override
  void initWidgetModel() {
    super.initWidgetModel();
    fetchDriverRegisteredCategories();
    fetchUserProfile();
    fetchActiveOrder();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    _initializeLocationAndSocket();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    statusController.addListener(() async {
      logger.i('üîÑ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${statusController.value}');
      
      if (statusController.value) {
        // –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ "–æ–Ω–ª–∞–π–Ω" - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è
        if (me.value == null) {
          logger.e('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
          statusController.value = false;
          return;
        }
        
        if (driverPosition.value == null) {
          logger.e('‚ùå –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
          await _startLocationTracking();
          if (driverPosition.value == null) {
            statusController.value = false;
            return;
          }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∫–µ—Ç
        await fetchOrderRequests();
        await _ensureLocationAndSocket();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        if (driverPosition.value != null) {
          _sendLocationUpdate(
            driverPosition.value!.latitude, 
            driverPosition.value!.longitude
          );
        }
        
        logger.i('‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º');
      } else {
        // –ü—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ - –æ—á–∏—â–∞–µ–º –∑–∞–∫–∞–∑—ã –∏ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
        logger.i('üîÑ –í–æ–¥–∏—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
        orderRequests.accept([]);
        await disconnectWebsocket();
      }
    });
  }

  @override
  void dispose() {
    onUserLocationChanged?.cancel();
    disconnectWebsocket();
    super.dispose();
  }

  Future<void> _initializeLocationAndSocket() async {
    try {
      isWebSocketConnecting.accept(true);
      webSocketConnectionError.accept(null);
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
      await _requestLocationPermission();
      
      // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
      if ([LocationPermission.always, LocationPermission.whileInUse].contains(locationPermission.value)) {
        await _startLocationTracking();
      }
      
      isWebSocketConnecting.accept(false);
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
      isWebSocketConnecting.accept(false);
      webSocketConnectionError.accept('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  Future<void> _requestLocationPermission() async {
    try {
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
      }
      locationPermission.accept(permission);
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é: $e');
      locationPermission.accept(LocationPermission.denied);
    }
  }

  Future<void> _startLocationTracking() async {
    try {
      if (![LocationPermission.always, LocationPermission.whileInUse].contains(locationPermission.value)) {
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
      Position position = await Geolocator.getCurrentPosition(
        locationSettings: LocationSettings(
          accuracy: LocationAccuracy.high,
        ),
      );

      driverPosition.accept(LatLng(position.latitude, position.longitude));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      await inject<SharedPreferences>().setDouble('latitude', position.latitude);
      await inject<SharedPreferences>().setDouble('longitude', position.longitude);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      onUserLocationChanged?.cancel();
      onUserLocationChanged = Geolocator.getPositionStream(
        locationSettings: LocationSettings(
          accuracy: LocationAccuracy.high,
          distanceFilter: 10, // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –Ω–∞ 10 –º–µ—Ç—Ä–æ–≤
        ),
      ).listen((Position position) {
        driverPosition.accept(LatLng(position.latitude, position.longitude));
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
        if (newOrderSocket != null && newOrderSocket!.connected) {
          _sendLocationUpdate(position.latitude, position.longitude);
        }
      });

      logger.i('‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–æ');
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: $e');
    }
  }

  Future<void> _ensureLocationAndSocket() async {
    try {
      if (newOrderSocket == null || !newOrderSocket!.connected) {
        await initializeWebsocket();
      }
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
      webSocketConnectionError.accept('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
    }
  }

  @override
  Future<void> initializeSocket() async {
    await initializeWebsocket();
  }

  Future<void> initializeWebsocket() async {
    try {
      isWebSocketConnecting.accept(true);
      webSocketConnectionError.accept(null);
      
      if (me.value == null) {
        logger.e('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        webSocketConnectionError.accept('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        isWebSocketConnecting.accept(false);
        return;
      }

      final driverId = me.value!.id;
      final sessionId = inject<SharedPreferences>().getString('session_id') ?? 
                       DateTime.now().millisecondsSinceEpoch.toString();
      final position = driverPosition.value;

      logger.i('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket...');
      logger.i('üìç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: driverId=$driverId, sessionId=$sessionId');
      
      // –û—Ç–∫–ª—é—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (newOrderSocket != null) {
        newOrderSocket!.close();
        newOrderSocket = null;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      newOrderSocket = IO.io(
        'ws://taxi.aktau-go.kz',
        <String, dynamic>{
          'transports': ['websocket'],
          'autoConnect': false,
          'forceNew': true,
          'timeout': 30000,
          'reconnection': true,
          'reconnectionAttempts': 5,
          'reconnectionDelay': 3000,
          'query': {
            'userType': 'driver',
            'userId': driverId,
            'driverId': driverId,
            'sessionId': sessionId,
            'lat': position?.latitude.toString() ?? '0',
            'lng': position?.longitude.toString() ?? '0',
            'timestamp': DateTime.now().millisecondsSinceEpoch.toString(),
          },
        },
      );

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
      _setupSocketEventHandlers();
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
      newOrderSocket!.connect();
      
      logger.i('üîå –°–æ–∫–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...');
      logger.i('üìç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: userType=driver, userId=$driverId, sessionId=$sessionId');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º sessionId –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ
      if (!inject<SharedPreferences>().containsKey('session_id')) {
        await inject<SharedPreferences>().setString('session_id', sessionId);
      }
      
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket: $e');
      isWebSocketConnecting.accept(false);
      webSocketConnectionError.accept('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
      isWebsocketConnected.accept(false);
    }
  }

  void _setupSocketEventHandlers() {
    if (newOrderSocket == null) return;

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    newOrderSocket!.onConnect((data) {
      logger.i('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
      isWebsocketConnected.accept(true);
      isWebSocketConnecting.accept(false);
      webSocketConnectionError.accept(null);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      if (driverPosition.value != null) {
        _sendLocationUpdate(
          driverPosition.value!.latitude,
          driverPosition.value!.longitude,
        );
      }
    });

    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ
    newOrderSocket!.onDisconnect((data) {
      logger.i('üîÑ WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: $data');
      isWebsocketConnected.accept(false);
      isWebSocketConnecting.accept(false);
    });

    // –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    newOrderSocket!.onError((data) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ WebSocket: $data');
      isWebsocketConnected.accept(false);
      isWebSocketConnecting.accept(false);
      webSocketConnectionError.accept('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $data');
    });

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    newOrderSocket!.onReconnectAttempt((attemptNumber) {
      logger.i('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #$attemptNumber');
      isWebSocketConnecting.accept(true);
      webSocketConnectionError.accept('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
    });

    // –£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    newOrderSocket!.onReconnect((data) {
      logger.i('‚úÖ WebSocket –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω');
      isWebsocketConnected.accept(true);
      isWebSocketConnecting.accept(false);
      webSocketConnectionError.accept(null);
    });

    // –ù–æ–≤—ã–π –∑–∞–∫–∞–∑
    newOrderSocket!.on('newOrder', (data) {
      logger.i('üöó –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑: $data');
      _handleNewOrder(data);
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    newOrderSocket!.on('orderUpdated', (data) {
      logger.i('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: $data');
      _handleOrderUpdate(data);
    });

    // –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –º–Ω–æ–π
    newOrderSocket!.on('orderAcceptedByMe', (data) {
      logger.i('‚úÖ –Ø —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑: $data');
      
      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
      if (statusController.value) {
        Future.delayed(Duration(milliseconds: 100), () {
          if (context.mounted) {
            fetchOrderRequests();
          }
        });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      Future.delayed(Duration(milliseconds: 200), () {
        if (context.mounted) {
          fetchActiveOrder();
        }
      });
    });

    // –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º
    newOrderSocket!.on('orderRejected', (data) async {
      logger.i('‚ùå –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ orderRejected: $data');
      
      try {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        if (context.mounted) {
          Navigator.of(context).popUntil((route) => route.isFirst);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        if (context.mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º'),
              backgroundColor: Colors.red,
              duration: Duration(seconds: 3),
            ),
          );
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        await fetchOrderRequests();
        
        // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
        activeOrder.accept(null);
        
      } catch (e) {
        logger.e('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: $e');
      }
    });

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏
    newOrderSocket!.on('rideEnded', (data) {
      logger.i('üèÅ –ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $data');
      
      // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
      activeOrder.accept(null);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –µ—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
      if (statusController.value) {
        Future.delayed(Duration(milliseconds: 100), () {
          if (context.mounted) {
            fetchOrderRequests();
          }
        });
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–ü–æ–µ–∑–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 3),
          ),
        );
      }
    });
  }

  void _sendLocationUpdate(double latitude, double longitude) {
    try {
      if (newOrderSocket != null && newOrderSocket!.connected) {
        newOrderSocket!.emit('updateLocation', {
          'latitude': latitude,
          'longitude': longitude,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        });
        logger.d('üìç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: $latitude, $longitude');
      }
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: $e');
    }
  }

  void _handleNewOrder(dynamic orderData) {
    try {
      fetchOrderRequests();
      _showNewOrderNotification();
      showNewOrders.accept(true);
      HapticFeedback.heavyImpact();
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞: $e');
    }
  }
  
  void _handleOrderUpdate(dynamic orderData) {
    try {
      fetchOrderRequests();
      fetchActiveOrder(openBottomSheet: false);
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: $e');
    }
  }
  
  Future<void> _showNewOrderNotification() async {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('üöó –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!'),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 2),
          ),
        );
      }
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ: $e');
    }
  }

  @override
  Future<void> fetchOrderRequests() async {
    try {
      final orderTypeValue = orderType.value;
      if (orderTypeValue == null) return;
      
      final response = await model.getOrderRequests(
        type: orderTypeValue,
      );
      orderRequests.accept(response);
      showNewOrders.accept(false);
    } on Exception catch (e) {
      logger.e(e);
    }
  }

  @override
  Future<void> onOrderRequestTap(OrderRequestDomain e) async {
    await showModalBottomSheet(
      context: context,
      isDismissible: true,
      enableDrag: false,
      isScrollControlled: true,
      useSafeArea: true,
      builder: (context) => OrderRequestBottomSheet(
        orderRequest: e,
        onAccept: () async {
          await acceptOrderRequest(e);
          Routes.router.popUntil((predicate) => predicate.isFirst);
        },
      ),
    );
  }

  Future<void> acceptOrderRequest(OrderRequestDomain orderRequest) async {
    final meValue = me.value;
    if (meValue == null) return;
    
    await model.acceptOrderRequest(
      driver: meValue,
      orderRequest: orderRequest,
    );

    fetchActiveOrder();
  }

  @override
  void tapNewOrders() {
    showNewOrders.accept(false);
    fetchOrderRequests();
  }

  @override
  void requestLocationPermission() async {
    try {
      await _requestLocationPermission();
      
      // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
      if ([LocationPermission.always, LocationPermission.whileInUse].contains(locationPermission.value)) {
        await _startLocationTracking();
      }
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é: $e');
    }
  }

  @override
  void registerOrderType() {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è
    Routes.router.navigate('/driver-registration');
  }

  void fetchActiveOrder({bool openBottomSheet = true}) async {
    try {
      final response = await model.getActiveOrder();
      if (response != null) {
        activeOrder.accept(response);
        _activeOrderNotifier.accept(response);
        
        final meValue = me.value;
        if (openBottomSheet && context.mounted && meValue != null) {
          showModalBottomSheet(
            context: context,
            isDismissible: false,
            enableDrag: false,
            isScrollControlled: true,
            useSafeArea: true,
            builder: (context) => ActiveOrderBottomSheet(
              me: meValue,
              activeOrder: response,
              activeOrderListener: _activeOrderNotifier,
              onCancel: () {},
            ),
          );
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        activeOrder.accept(null);
      }
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: $e');
      activeOrder.accept(null);
    }
  }
  
  Future<void> fetchDriverRegisteredCategories() async {
    try {
      final response = await inject<ProfileInteractor>().fetchDriverRegisteredCategories();
      driverRegisteredCategories.accept(response);
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e');
    }
  }

  Future<void> fetchUserProfile() async {
    try {
      final userProfile = await inject<RestClient>().getUserProfile();
      if (userProfile != null) {
        final userDomain = UserDomain(
          id: userProfile.id,
          firstName: userProfile.firstName,
          lastName: userProfile.lastName,
          phone: userProfile.phone,
        );
        me.accept(userDomain);
      }
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
  }

  Future<void> disconnectWebsocket() async {
    try {
      newOrderSocket?.close();
      newOrderSocket = null;
      isWebsocketConnected.accept(false);
      logger.i('üîÑ WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WebSocket: $e');
    }
  }
} 