import 'dart:async';

import 'package:aktau_go/domains/active_request/active_request_domain.dart';
import 'package:aktau_go/forms/driver_registration_form.dart';
import 'package:aktau_go/interactors/profile_interactor.dart';
import 'package:flutter/material.dart';
import 'package:elementary/elementary.dart';
import 'package:elementary_helper/elementary_helper.dart';
import 'package:geolocator/geolocator.dart';
import 'package:latlong2/latlong.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:socket_io_client/socket_io_client.dart' as IO;
import 'package:flutter/services.dart';

import '../../domains/driver_registered_category/driver_registered_category_domain.dart';
import '../../domains/order_request/order_request_domain.dart';
import '../../domains/user/user_domain.dart';
import '../../interactors/order_requests_interactor.dart';
import '../../router/router.dart';
import '../../utils/logger.dart';
import '../../utils/utils.dart';
import './widgets/order_request_bottom_sheet.dart';
import './orders_model.dart';
import './orders_screen.dart';
import 'widgets/active_order_bottom_sheet.dart';
import 'package:aktau_go/interactors/common/rest_client.dart';
import '../../services/websocket_service.dart';

defaultOrdersWMFactory(BuildContext context) => OrdersWM(OrdersModel(
      inject<OrderRequestsInteractor>(),
      inject<ProfileInteractor>(),
    ));

abstract class IOrdersWM implements IWidgetModel {
  StateNotifier<int> get tabIndex;
  StateNotifier<List<OrderRequestDomain>> get orderRequests;
  StateNotifier<ActiveRequestDomain?> get activeOrder;
  StateNotifier<List<DriverRegisteredCategoryDomain>> get driverRegisteredCategories;
  StateNotifier<UserDomain?> get me;
  StateNotifier<bool> get showNewOrders;
  StateNotifier<bool> get isWebsocketConnected;
  StateNotifier<LocationPermission> get locationPermission;
  StateNotifier<DriverType> get orderType;
  StateNotifier<LatLng> get driverPosition;
  ValueNotifier<bool> get statusController;
  StateNotifier<bool> get isOrderRejected;
  StateNotifier<bool> get isWebSocketConnecting;
  StateNotifier<String?> get webSocketConnectionError;

  Future<void> fetchOrderRequests();
  Future<void> onOrderRequestTap(OrderRequestDomain e);
  void tapNewOrders();
  void requestLocationPermission();
  void registerOrderType();
  Future<void> initializeSocket();
}

class OrdersWM extends WidgetModel<OrdersScreen, OrdersModel>
    with WidgetsBindingObserver
    implements IOrdersWM {
  OrdersWM(super.model);

  final WebSocketService websocketService = WebSocketService();
  StreamSubscription<Position>? onUserLocationChanged;
  Timer? _activeOrderCheckTimer;

  @override
  final StateNotifier<int> tabIndex = StateNotifier(initValue: 0);

  @override
  final ValueNotifier<bool> statusController = ValueNotifier(false);

  @override
  final StateNotifier<bool> showNewOrders = StateNotifier(initValue: false);

  @override
  final StateNotifier<bool> isWebsocketConnected = StateNotifier(initValue: false);

  @override
  final StateNotifier<bool> isOrderRejected = StateNotifier(initValue: false);

  @override
  final StateNotifier<DriverType> orderType = StateNotifier(initValue: DriverType.TAXI);

  @override
  final StateNotifier<List<DriverRegisteredCategoryDomain>> driverRegisteredCategories =
      StateNotifier(initValue: const []);

  @override
  final StateNotifier<UserDomain?> me = StateNotifier();

  @override
  final StateNotifier<LatLng> driverPosition = StateNotifier(
      initValue: LatLng(
    inject<SharedPreferences>().getDouble('latitude') ?? 0,
    inject<SharedPreferences>().getDouble('longitude') ?? 0,
  ));

  @override
  final StateNotifier<List<OrderRequestDomain>> orderRequests = StateNotifier(initValue: const []);

  @override
  final StateNotifier<bool> isWebSocketConnecting = StateNotifier(initValue: false);
  
  @override
  final StateNotifier<String?> webSocketConnectionError = StateNotifier();

  @override
  final StateNotifier<LocationPermission> locationPermission = StateNotifier();

  @override
  final StateNotifier<ActiveRequestDomain?> activeOrder = StateNotifier();

  // Separate non-nullable notifier for ActiveOrderBottomSheet
  final StateNotifier<ActiveRequestDomain> _activeOrderNotifier = StateNotifier();

  @override
  void initWidgetModel() {
    super.initWidgetModel();
    fetchDriverRegisteredCategories();
    fetchUserProfile();
    
    // –°—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è
    _loadLastKnownDriverPosition();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    _initializeLocationAndSocket();
    
    // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —á—Ç–æ–±—ã UI —É—Å–ø–µ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
    Future.delayed(Duration(milliseconds: 500), () {
      fetchActiveOrder(openBottomSheet: true);
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    _startActiveOrderMonitoring();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    statusController.addListener(() async {
      logger.i('üîÑ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${statusController.value}');
      
      if (statusController.value) {
        // –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ "–æ–Ω–ª–∞–π–Ω" - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è
        if (me.value == null) {
          logger.e('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
          statusController.value = false;
          return;
        }
        
        if (driverPosition.value == null) {
          logger.e('‚ùå –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
          await _startLocationTracking();
          if (driverPosition.value == null) {
            statusController.value = false;
            return;
          }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∫–µ—Ç
        await fetchOrderRequests();
        await _ensureLocationAndSocket();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        if (driverPosition.value != null) {
          _sendLocationUpdate(
            driverPosition.value!.latitude, 
            driverPosition.value!.longitude
          );
        }
        
        logger.i('‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º');
      } else {
        // –ü—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ - –æ—á–∏—â–∞–µ–º –∑–∞–∫–∞–∑—ã –∏ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
        logger.i('üîÑ –í–æ–¥–∏—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
        orderRequests.accept([]);
        await disconnectWebsocket();
      }
    });
  }

  @override
  void dispose() {
    _activeOrderCheckTimer?.cancel();
    onUserLocationChanged?.cancel();
    disconnectWebsocket();
    super.dispose();
  }

  Future<void> _initializeLocationAndSocket() async {
    try {
      isWebSocketConnecting.accept(true);
      webSocketConnectionError.accept(null);
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
      await _requestLocationPermission();
      
      // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
      if ([LocationPermission.always, LocationPermission.whileInUse].contains(locationPermission.value)) {
        await _startLocationTracking();
      }
      
      isWebSocketConnecting.accept(false);
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
      isWebSocketConnecting.accept(false);
      webSocketConnectionError.accept('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  Future<void> _requestLocationPermission() async {
    try {
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
      }
      locationPermission.accept(permission);
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é: $e');
      locationPermission.accept(LocationPermission.denied);
    }
  }

  Future<void> _startLocationTracking() async {
    try {
      if (![LocationPermission.always, LocationPermission.whileInUse].contains(locationPermission.value)) {
        return;
      }

      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
      try {
        final prefs = inject<SharedPreferences>();
        final savedLat = prefs.getDouble('latitude');
        final savedLng = prefs.getDouble('longitude');
        
        if (savedLat != null && savedLng != null && savedLat != 0 && savedLng != 0) {
          driverPosition.accept(LatLng(savedLat, savedLng));
          logger.i('üìç –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: $savedLat, $savedLng');
        }
      } catch (e) {
        logger.e('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏: $e');
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
      Position position = await Geolocator.getCurrentPosition(
        locationSettings: LocationSettings(
          accuracy: LocationAccuracy.high,
          timeLimit: Duration(seconds: 10), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        ),
      );

      driverPosition.accept(LatLng(position.latitude, position.longitude));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      await inject<SharedPreferences>().setDouble('latitude', position.latitude);
      await inject<SharedPreferences>().setDouble('longitude', position.longitude);
      
      logger.i('üìç –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ${position.latitude}, ${position.longitude}');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      onUserLocationChanged?.cancel();
      onUserLocationChanged = Geolocator.getPositionStream(
        locationSettings: LocationSettings(
          accuracy: LocationAccuracy.high,
          distanceFilter: 10, // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –Ω–∞ 10 –º–µ—Ç—Ä–æ–≤
        ),
      ).listen((Position position) {
        driverPosition.accept(LatLng(position.latitude, position.longitude));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        inject<SharedPreferences>().setDouble('latitude', position.latitude);
        inject<SharedPreferences>().setDouble('longitude', position.longitude);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
        if (websocketService.isDriverConnected) {
          _sendLocationUpdate(position.latitude, position.longitude);
        }
      });

      logger.i('‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–æ');
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: $e');
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é
      try {
        final prefs = inject<SharedPreferences>();
        final savedLat = prefs.getDouble('latitude');
        final savedLng = prefs.getDouble('longitude');
        
        if (savedLat != null && savedLng != null && savedLat != 0 && savedLng != 0 && driverPosition.value == null) {
          driverPosition.accept(LatLng(savedLat, savedLng));
          logger.i('üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ fallback: $savedLat, $savedLng');
        }
      } catch (fallbackError) {
        logger.e('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ fallback –ø–æ–∑–∏—Ü–∏–∏: $fallbackError');
      }
    }
  }

  Future<void> _ensureLocationAndSocket() async {
    try {
      if (!websocketService.isDriverConnected) {
        await initializeWebsocket();
      }
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
      webSocketConnectionError.accept('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
    }
  }

  @override
  Future<void> initializeSocket() async {
    await initializeWebsocket();
  }

  Future<void> initializeWebsocket() async {
    try {
      isWebSocketConnecting.accept(true);
      webSocketConnectionError.accept(null);
      
      if (me.value == null) {
        logger.e('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        webSocketConnectionError.accept('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        isWebSocketConnecting.accept(false);
        return;
      }

      final position = driverPosition.value;
      if (position == null) {
        logger.e('‚ùå –ü–æ–∑–∏—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞');
        webSocketConnectionError.accept('–ü–æ–∑–∏—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞');
        isWebSocketConnecting.accept(false);
        return;
      }

      logger.i('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —á–µ—Ä–µ–∑ WebSocketService...');
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      _clearAllDriverEventListeners();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      _setupDriverEventHandlers();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      await websocketService.initializeConnection(
        type: SocketConnectionType.driver,
        user: me.value!,
        position: Position(
          latitude: position.latitude,
          longitude: position.longitude,
          timestamp: DateTime.now(),
          accuracy: 0,
          altitude: 0,
          altitudeAccuracy: 0,
          heading: 0,
          headingAccuracy: 0,
          speed: 0,
          speedAccuracy: 0,
        ),
      );
      
      logger.i('üîå WebSocket –≤–æ–¥–∏—Ç–µ–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ WebSocketService');
      
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket: $e');
      isWebSocketConnecting.accept(false);
      webSocketConnectionError.accept('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
      isWebsocketConnected.accept(false);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –≤–æ–¥–∏—Ç–µ–ª—è (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏)
  void _clearAllDriverEventListeners() {
    websocketService.clearEventListeners(SocketEventType.newOrder);
    websocketService.clearEventListeners(SocketEventType.orderTaken);
    websocketService.clearEventListeners(SocketEventType.orderCancelledByClientForDriver);
    websocketService.clearEventListeners(SocketEventType.orderDeleted);
    websocketService.clearEventListeners(SocketEventType.eventAck);
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
  void _setupDriverEventHandlers() {
    // –ù–æ–≤—ã–π –∑–∞–∫–∞–∑
    websocketService.addEventListener(SocketEventType.newOrder, (data) {
      logger.i('üöó –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑: $data');
      _handleNewOrder(data);
    });

    // –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º
    websocketService.addEventListener(SocketEventType.orderTaken, (data) {
      logger.i('ü§ù –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º: $data');
      try {
        final orderId = data['orderId'];
        final takenBy = data['takenBy'];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–π –∑–∞–∫–∞–∑
        if (statusController.value) {
          fetchOrderRequests();
        }
      } catch (e) {
        logger.e('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º: $e');
      }
    });


    // –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º (–ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–º)
    websocketService.addEventListener(SocketEventType.orderCancelledByClientForDriver, (data) async {
      logger.i('üö´ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ orderCancelled: $data');
      
      try {
        final orderId = data['orderId'];
        final reason = data['reason'] ?? 'cancelled_by_client';
        final message = data['message'] ?? '–ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑';
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –æ–∫–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞)
        if (context.mounted) {
          Navigator.of(context).popUntil((route) => route.isFirst);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        if (context.mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('üö´ $message'),
              backgroundColor: Colors.orange,
              duration: Duration(seconds: 5),
            ),
          );
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
        fetchActiveOrder(openBottomSheet: false);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –µ—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
        if (statusController.value) {
          Future.delayed(Duration(milliseconds: 100), () {
            if (context.mounted) {
              fetchOrderRequests();
            }
          });
        }
        
      } catch (e) {
        logger.e('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞: $e');
      }
    });

    // –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω (–æ—Ç–º–µ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º)
    websocketService.addEventListener(SocketEventType.orderDeleted, (data) {
      logger.i('üóëÔ∏è –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω: $data');
      
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        if (statusController.value) {
          fetchOrderRequests();
        }
      } catch (e) {
        logger.e('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: $e');
      }
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    websocketService.addDriverConnectionListener((isConnected) {
      if (isConnected) {
        logger.i('‚úÖ WebSocket –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω');
        isWebsocketConnected.accept(true);
        isWebSocketConnecting.accept(false);
        webSocketConnectionError.accept(null);
      } else {
        logger.w('‚ùå WebSocket –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–∫–ª—é—á–µ–Ω');
        isWebsocketConnected.accept(false);
        isWebSocketConnecting.accept(false);
        webSocketConnectionError.accept('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
      }
    });
  }


  void _sendLocationUpdate(double latitude, double longitude) {
    try {
      if (websocketService.isDriverConnected) {
        websocketService.emitDriverEvent('driverLocationUpdate', {
          'lat': latitude,
          'lng': longitude,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        });
        logger.d('üìç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: $latitude, $longitude');
      }
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: $e');
    }
  }

  void _handleNewOrder(dynamic orderData) {
    try {
      fetchOrderRequests();
      _showNewOrderNotification();
      showNewOrders.accept(true);
      HapticFeedback.heavyImpact();
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞: $e');
    }
  }
  
  void _handleOrderUpdate(dynamic orderData) {
    try {
      fetchOrderRequests();
      fetchActiveOrder(openBottomSheet: false);
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: $e');
    }
  }
  
  Future<void> _showNewOrderNotification() async {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('üöó –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!'),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 2),
          ),
        );
      }
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ: $e');
    }
  }

  @override
  Future<void> fetchOrderRequests() async {
    try {
      final orderTypeValue = orderType.value;
      if (orderTypeValue == null) return;
      
      final response = await model.getOrderRequests(
        type: orderTypeValue,
      );
      orderRequests.accept(response);
      showNewOrders.accept(false);
    } on Exception catch (e) {
      logger.e(e);
    }
  }

  @override
  Future<void> onOrderRequestTap(OrderRequestDomain e) async {
    await showModalBottomSheet(
      context: context,
      isDismissible: true,
      enableDrag: false,
      isScrollControlled: true,
      useSafeArea: true,
      builder: (context) => OrderRequestBottomSheet(
        orderRequest: e,
        onAccept: () async {
          await acceptOrderRequest(e);
          Routes.router.popUntil((predicate) => predicate.isFirst);
        },
      ),
    );
  }

  Future<void> acceptOrderRequest(OrderRequestDomain orderRequest) async {
    final meValue = me.value;
    if (meValue == null) return;
    
    // üîí –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º –∑–∞–∫–∞–∑–∞
    if (driverPosition.value == null) {
      logger.w('‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ –±–µ–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
      await _startLocationTracking();
      
      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ - –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ
      if (driverPosition.value == null) {
        if (context.mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏'),
              backgroundColor: Colors.red,
              duration: Duration(seconds: 5),
              action: SnackBarAction(
                label: '–†–∞–∑—Ä–µ—à–∏—Ç—å',
                textColor: Colors.white,
                onPressed: () => requestLocationPermission(),
              ),
            ),
          );
        }
        logger.e('‚ùå –ó–ê–ö–ê–ó –ù–ï –ü–†–ò–ù–Ø–¢: –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        return; // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞
      }
    }
    
    // ‚úÖ –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ - –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑ –∏ –°–†–ê–ó–£ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    logger.i('‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞: –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø–Ω–∞ (${driverPosition.value!.latitude}, ${driverPosition.value!.longitude})');
    
    await model.acceptOrderRequest(
      driver: meValue,
      orderRequest: orderRequest,
    );

    // –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –±—ç–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è
    if (driverPosition.value != null) {
      _sendLocationUpdate(
        driverPosition.value!.latitude, 
        driverPosition.value!.longitude
      );
      logger.i('üìç –ü–æ–∑–∏—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –±—ç–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞');
    }

    fetchActiveOrder();
  }

  @override
  void tapNewOrders() {
    showNewOrders.accept(false);
    fetchOrderRequests();
  }

  @override
  void requestLocationPermission() async {
    try {
      await _requestLocationPermission();
      
      // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
      if ([LocationPermission.always, LocationPermission.whileInUse].contains(locationPermission.value)) {
        await _startLocationTracking();
      }
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é: $e');
    }
  }

  @override
  void registerOrderType() {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è
    Routes.router.navigate('/driver-registration');
  }

  void fetchActiveOrder({bool openBottomSheet = true}) async {
    try {
      final response = await model.getActiveOrder();
      if (response != null) {
        activeOrder.accept(response);
        _activeOrderNotifier.accept(response);
        
        // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è
        if (driverPosition.value != null) {
          _sendLocationUpdate(
            driverPosition.value!.latitude, 
            driverPosition.value!.longitude
          );
          logger.i('üìç –ü–æ–∑–∏—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –±—ç–∫ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞');
        } else {
          // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é
          logger.w('‚ö†Ô∏è –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å');
          await _startLocationTracking();
          if (driverPosition.value != null) {
            _sendLocationUpdate(
              driverPosition.value!.latitude, 
              driverPosition.value!.longitude
            );
            logger.i('üìç –ü–æ–∑–∏—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
          } else {
            logger.e('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞');
          }
        }
        
        final meValue = me.value;
        if (openBottomSheet && context.mounted && meValue != null) {
          showModalBottomSheet(
            context: context,
            isDismissible: false,
            enableDrag: false,
            isScrollControlled: true,
            useSafeArea: true,
            builder: (context) => ActiveOrderBottomSheet(
              me: meValue,
              activeOrder: response,
              activeOrderListener: _activeOrderNotifier,
              ordersWm: this,
              onCancel: () {},
            ),
          );
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        activeOrder.accept(null);
      }
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: $e');
      activeOrder.accept(null);
    }
  }
  
  Future<void> fetchDriverRegisteredCategories() async {
    try {
      final response = await inject<ProfileInteractor>().fetchDriverRegisteredCategories();
      driverRegisteredCategories.accept(response);
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e');
    }
  }

  Future<void> fetchUserProfile() async {
    try {
      final userProfile = await inject<RestClient>().getUserProfile();
      if (userProfile != null) {
        final userDomain = UserDomain(
          id: userProfile.id,
          firstName: userProfile.firstName,
          lastName: userProfile.lastName,
          phone: userProfile.phone,
        );
        me.accept(userDomain);
      }
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
  }

  Future<void> disconnectWebsocket() async {
    try {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º
      _clearAllDriverEventListeners();
      
      await websocketService.disconnectDriver();
      isWebsocketConnected.accept(false);
      logger.i('üîÑ WebSocket –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ WebSocketService');
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WebSocket: $e');
    }
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  void _startActiveOrderMonitoring() {
    _activeOrderCheckTimer = Timer.periodic(Duration(seconds: 5), (timer) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–∫–Ω–æ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ
      if (activeOrder.value == null && context.mounted) {
        fetchActiveOrder(openBottomSheet: true);
      }
    });
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è
  Future<void> _loadLastKnownDriverPosition() async {
    try {
      final prefs = inject<SharedPreferences>();
      final savedLat = prefs.getDouble('latitude');
      final savedLng = prefs.getDouble('longitude');
      
      if (savedLat != null && savedLng != null && savedLat != 0 && savedLng != 0) {
        driverPosition.accept(LatLng(savedLat, savedLng));
        logger.i('üìç –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $savedLat, $savedLng');
      } else {
        logger.i('üìç –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è');
      }
    } catch (e) {
      logger.e('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
    }
  }
} 