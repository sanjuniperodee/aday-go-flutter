import 'dart:async';
import 'dart:convert';
import 'dart:math';

import 'package:aktau_go/domains/active_request/active_request_domain.dart';
import 'package:aktau_go/forms/driver_registration_form.dart';
import 'package:aktau_go/interactors/profile_interactor.dart';
import 'package:flutter/material.dart';
import 'package:elementary/elementary.dart';
import 'package:elementary_helper/elementary_helper.dart';
import 'package:flutter_rating_stars/flutter_rating_stars.dart';
import 'package:flutter_svg/svg.dart';
import 'package:geolocator/geolocator.dart' as geoLocator;
import 'package:geolocator/geolocator.dart';
import 'package:geotypes/geotypes.dart' as geotypes;
import 'package:socket_io_client/socket_io_client.dart' as IO;
import 'package:mapbox_maps_flutter/mapbox_maps_flutter.dart';
import 'package:dio/dio.dart';

import '../../core/colors.dart';
import '../../core/images.dart';
import '../../core/text_styles.dart';
import '../../interactors/order_requests_interactor.dart';
import '../../interactors/common/mapbox_api/mapbox_api.dart';
import '../../interactors/main_navigation_interactor.dart';
import '../../utils/text_editing_controller.dart';
import '../../domains/food/food_category_domain.dart';
import '../../domains/food/food_domain.dart';
import '../../domains/food/foods_response_domain.dart';
import '../../domains/user/user_domain.dart';
import '../../interactors/common/rest_client.dart';
import '../../interactors/food_interactor.dart';
import '../../models/active_client_request/active_client_request_model.dart';
import '../../models/order_request/order_request_props_model.dart';
import '../../models/order_request/order_request_client_model.dart';
import '../../utils/logger.dart';
import '../../utils/utils.dart';
import '../widgets/primary_bottom_sheet.dart';
import '../widgets/primary_button.dart';
import '../widgets/rounded_text_field.dart';
import './forms/driver_order_form.dart';
import './tenant_home_model.dart';
import './tenant_home_screen.dart';
import '../../interactors/location_interactor.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../utils/network_utils.dart';
import '../../services/websocket_service.dart';

defaultTenantHomeWMFactory(BuildContext context) => TenantHomeWM(
      TenantHomeModel(
        inject<FoodInteractor>(),
        inject<ProfileInteractor>(),
        inject<OrderRequestsInteractor>(),
        inject<MainNavigationInteractor>(),
      ),
    );

abstract class ITenantHomeWM implements IWidgetModel {
  // mapbox.MapboxMapController? get mapboxMapController;

  StateNotifier<geotypes.Position> get userLocation;

  StateNotifier<geotypes.Position> get driverLocation;

  StateNotifier<geoLocator.LocationPermission> get locationPermission;

  TabController get tabController;

  StateNotifier<int> get currentTab;

  StateNotifier<bool> get isOrderRejected;

  StateNotifier<List<FoodCategoryDomain>> get foodCategories;

  EntityStateNotifier<List<FoodDomain>> get foods;

  StateNotifier<ActiveClientRequestModel> get activeOrder;

  StateNotifier<UserDomain> get me;

  StateNotifier<double> get draggableMaxChildSize;

  StateNotifier<bool> get showFood;

  StateNotifier<bool> get rateOpened;

  StateNotifier<double> get draggableScrolledSize;
  
  // Route display state management
  StateNotifier<bool> get isRouteDisplayed;
  
  // Map fixed state management
  StateNotifier<bool> get isMapFixed;
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
  StateNotifier<String> get savedFromAddress;
  StateNotifier<String> get savedToAddress;
  StateNotifier<String> get savedFromMapboxId;
  StateNotifier<String> get savedToMapboxId;

  DraggableScrollableController get draggableScrollableController;
  
  // –î–æ–±–∞–≤–ª—è–µ–º MapboxMapController –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ–π
  MapboxMap? get mapboxMapController;

  Future<void> determineLocationPermission({
    bool force = false,
  });

  void tabIndexChanged(int newTabIndex);

  Future<void> onSubmit(DriverOrderForm form, DriverType taxi);
  
  // –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Ç–∞–∫—Å–∏
  Future<void> createDriverOrder(DriverOrderForm form);

  void cancelActiveClientOrder();

  Future<void> fetchActiveOrder();

  void getMyLocation();

  void scrollDraggableSheetDown();

  void onMapTapped(geotypes.Position point);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∫–∞—Ä—Ç—ã
  void setMapboxController(MapboxMap controller);

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
  Future<void> displayRouteOnMainMap(geotypes.Position fromPosition, geotypes.Position toPosition);
  
  // Toggle map fixed state
  void toggleMapFixed();
  
  // Set map fixed state directly
  void setMapFixed(bool fixed);
  
  // Set route displayed state
  void setRouteDisplayed(bool displayed);
  
  // Clear displayed route
  Future<void> clearRoute();
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –∑–∞–∫–∞–∑–∞
  void saveOrderAddresses({
    required String fromAddress,
    required String toAddress,
    required String fromMapboxId,
    required String toMapboxId,
  });

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –≤ UI
  void forceUpdateAddresses();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  StateNotifier<bool> get isUserBlocked;
  StateNotifier<String?> get userBlockReason;
  StateNotifier<DateTime?> get userBlockedUntil;
}

class TenantHomeWM extends WidgetModel<TenantHomeScreen, TenantHomeModel>
    with SingleTickerProviderWidgetModelMixin, WidgetsBindingObserver
    implements ITenantHomeWM {
  TenantHomeWM(
    TenantHomeModel model,
  ) : super(model);

  
  // –î–æ–±–∞–≤–ª—è–µ–º MapboxMapController –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ–π
  MapboxMap? _mapboxMapController;

  // –ö—ç—à –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
  final Map<String, Map<String, dynamic>> _routeCache = {};
  String? _lastRouteKey;

  @override
  final StateNotifier<geotypes.Position> userLocation = StateNotifier(
    initValue: geotypes.Position(
      51.260834,
      43.693695,
    ),
  );

  @override
  final StateNotifier<double> draggableMaxChildSize = StateNotifier(
    initValue: 1,
  );

  @override
  final StateNotifier<geotypes.Position> driverLocation = StateNotifier();
  @override
  final StateNotifier<bool> showFood = StateNotifier(
    initValue: false,
  );

  @override
  late final TabController tabController = TabController(
    length: 2,
    vsync: this,
  );

  @override
  final StateNotifier<int> currentTab = StateNotifier(
    initValue: 0,
  );

  final StateNotifier<double> rateTaxi = StateNotifier(
    initValue: 0,
  );

  @override
  final StateNotifier<double> draggableScrolledSize = StateNotifier(
    initValue: 0,
  );

  @override
  final StateNotifier<bool> isOrderRejected = StateNotifier(
    initValue: false,
  );
  @override
  final StateNotifier<bool> rateOpened = StateNotifier(
    initValue: false,
  );

  @override
  final StateNotifier<List<FoodCategoryDomain>> foodCategories = StateNotifier(
    initValue: const [],
  );

  @override
  final EntityStateNotifier<List<FoodDomain>> foods = EntityStateNotifier();
  @override
  final StateNotifier<ActiveClientRequestModel> activeOrder = StateNotifier();

  @override
  final StateNotifier<UserDomain> me = StateNotifier();

  @override
  final StateNotifier<geoLocator.LocationPermission> locationPermission = StateNotifier();

  late final TextEditingController commentTextController = createTextEditingController();

  @override
  final StateNotifier<bool> isRouteDisplayed = StateNotifier(
    initValue: false,
  );

  @override
  final StateNotifier<bool> isMapFixed = StateNotifier(
    initValue: false,
  );

  @override
  final StateNotifier<String> savedFromAddress = StateNotifier();
  @override
  final StateNotifier<String> savedToAddress = StateNotifier();
  @override
  final StateNotifier<String> savedFromMapboxId = StateNotifier();
  @override
  final StateNotifier<String> savedToMapboxId = StateNotifier();

  @override
  final StateNotifier<bool> isUserBlocked = StateNotifier(initValue: false);
  
  @override
  final StateNotifier<String?> userBlockReason = StateNotifier();
  
  @override
  final StateNotifier<DateTime?> userBlockedUntil = StateNotifier();

  @override
  void initWidgetModel() {
    super.initWidgetModel();
    
    print('üîÑ –ö–õ–ò–ï–ù–¢: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TenantHomeWM...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º lifecycle observer –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    WidgetsBinding.instance.addObserver(this);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π activeOrder
    activeOrder.addListener(() {
      final order = activeOrder.value;
      if (order != null) {
        print('‚úÖ –ö–õ–ò–ï–ù–¢: activeOrder –∏–∑–º–µ–Ω–∏–ª—Å—è - —Å—Ç–∞—Ç—É—Å: ${order.order?.orderStatus}, ID: ${order.order?.id}');
      } else {
        print('‚ùå –ö–õ–ò–ï–ù–¢: activeOrder —Å—Ç–∞–ª null');
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ —Å–æ–∫–µ—Ç–∞
    try {
      final websocketService = WebSocketService();
      websocketService.addClientConnectionListener((isConnected) {
        if (isConnected) {
          print('‚úÖ –ö–õ–ò–ï–ù–¢: WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
        } else {
          print('‚ùå –ö–õ–ò–ï–ù–¢: WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
        }
      });
    } catch (socketError) {
      print('‚ùå –ö–õ–ò–ï–ù–¢: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket: $socketError');
    }
    
    // –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    fetchUserProfile().then((_) {
      print('‚úÖ –ö–õ–ò–ï–ù–¢: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑...');
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∫–µ—Ç–∞ –¥–µ–ª–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ fetchUserProfile(),
      // –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
      fetchActiveOrder();
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      Future.delayed(Duration(seconds: 2), () {
        print('üîÑ –ö–õ–ò–ï–ù–¢: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...');
        fetchActiveOrder();
      });
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –µ–¥—É –≤ –ø–∞—Ä–∞–ª–ª–µ–ª–∏
    fetchFoods();
    
    // –ò–ó–ú–ï–ù–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –∞–¥—Ä–µ—Å–∞, –∑–∞—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    _clearSavedAddressesOnStartup().then((_) {
      // –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    _initializeLocationAndAddress();
    });
    
    // –ù–∞—Å—Ç—Ä–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è draggableScrollableController
    draggableScrollableController.addListener(() {
      draggableScrolledSize.accept(draggableScrollableController.size);
    });
    
    // –£–ü–†–û–©–ê–ï–ú: –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∞–¥—Ä–µ—Å–∞
    Geolocator.getPositionStream(
      locationSettings: geoLocator.LocationSettings(
        accuracy: geoLocator.LocationAccuracy.high,
        distanceFilter: 100, // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –Ω–∞ 100+ –º–µ—Ç—Ä–æ–≤
      ),
    ).listen((geoLocator.Position position) {
      userLocation.accept(
        geotypes.Position(
          position.longitude,
          position.latitude,
        ),
      );

      _checkLocation();
    });

    // –î–µ–ª–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é UI —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º draggableMaxChildSize
    WidgetsBinding.instance.addPostFrameCallback((_) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      draggableMaxChildSize.accept(1.0);

      // –ù–µ —á–∏—Ç–∞–µ–º size –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ª–∏—Å—Ç—É ‚Äî
      // –∏–Ω–∞—á–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è AssertionError ¬´DraggableScrollableController is not attached¬ª.
      try {
        // –ú–µ—Ç–æ–¥ size –±–µ–∑–æ–ø–∞—Å–µ–Ω, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω
        // (–ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ DraggableScrollableSheet).
        if ((draggableScrollableController as dynamic).attached == true ||
            (draggableScrollableController as dynamic).hasClients == true) {
      draggableScrolledSize.accept(draggableScrollableController.size);
        }
      } catch (_) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º: –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω, –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ listener
      }
    });
  }
  
  // –†–ï–§–ê–ö–¢–û–†: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  Future<void> _initializeLocationAndAddress() async {
    try {
      print('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –∞–¥—Ä–µ—Å–∞...');
      
      // –í–ê–ñ–ù–û: –ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤
      savedFromAddress.accept('');
      savedToAddress.accept('');
      savedFromMapboxId.accept('');
      savedToMapboxId.accept('');
      print('üóëÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –æ—á–∏—â–µ–Ω–æ');
      
      // –≠–¢–ê–ü 1: –ü–æ–ª–µ "–∫—É–¥–∞" –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
      print('üè∑Ô∏è –ü–æ–ª–µ "–∫—É–¥–∞" –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
      
      // –≠–¢–ê–ü 2: –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      print('üìç –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
      final location = await inject<LocationInteractor>().getCurrentLocation();
      
      if (location != null) {
        userLocation.accept(geotypes.Position(location.longitude, location.latitude));
        print('‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: ${location.latitude}, ${location.longitude}');
        
        // –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å
        await _determineAddressFromRealLocation(location.latitude, location.longitude);
          } else {
        print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥—Ä–µ—Å - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
        print('üí° –ê–¥—Ä–µ—Å "–æ—Ç–∫—É–¥–∞" –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—É—Å—Ç—ã–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
          }
      
      print('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
      // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –∞–¥—Ä–µ—Å - –ø—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç
      print('üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é');
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ SharedPreferences
  Future<void> _loadLocationFromPreferences() async {
    try {
        final prefs = inject<SharedPreferences>();
        final latitude = prefs.getDouble('latitude');
        final longitude = prefs.getDouble('longitude');
        
      if (latitude != null && longitude != null && latitude != 0 && longitude != 0) {
        userLocation.accept(geotypes.Position(longitude, latitude));
        print('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ø–∞–º—è—Ç–∏: $latitude, $longitude');
        } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–∫—Ç–∞—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        userLocation.accept(geotypes.Position(51.260834, 43.693695));
        print('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–∫—Ç–∞—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: $e');
      userLocation.accept(geotypes.Position(51.260834, 43.693695));
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ fallback –∞–¥—Ä–µ—Å–∞
  void _setFallbackAddress() {
    savedFromAddress.accept('–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
    if (userLocation.value != null) {
      savedFromMapboxId.accept('${userLocation.value!.lat};${userLocation.value!.lng}');
    } else {
      savedFromMapboxId.accept('43.693695;51.260834');
    }
  }
        
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ SharedPreferences
  Future<void> _loadSavedAddresses() async {
    try {
        final prefs = inject<SharedPreferences>();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å "–æ—Ç–∫—É–¥–∞"
      final savedFromAddr = prefs.getString('saved_from_address');
      final savedFromCoords = prefs.getString('saved_from_coords');
      
      if (savedFromAddr != null && savedFromAddr.isNotEmpty && savedFromAddr != "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω") {
        savedFromAddress.accept(savedFromAddr);
        if (savedFromCoords != null && savedFromCoords.isNotEmpty) {
          savedFromMapboxId.accept(savedFromCoords);
        }
        print('üìç –ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å "–æ—Ç–∫—É–¥–∞": $savedFromAddr');
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å "–∫—É–¥–∞" 
      final savedToAddr = prefs.getString('saved_to_address');
      final savedToCoords = prefs.getString('saved_to_coords');
      
      if (savedToAddr != null && savedToAddr.isNotEmpty && savedToAddr != "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω") {
        savedToAddress.accept(savedToAddr);
        if (savedToCoords != null && savedToCoords.isNotEmpty) {
          savedToMapboxId.accept(savedToCoords);
        }
        print('üìç –ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å "–∫—É–¥–∞": $savedToAddr');
      }
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: $e');
    }
  }

  Future<int?> _checkLocation() async {
    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
      var position = userLocation.value!;
      var idshop = -1;

      // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      double aktauDistanceInMeters = Geolocator.distanceBetween(
        position.lat.toDouble(),
        position.lng.toDouble(),
        43.39,
        51.09,
      );

      // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      double zhanaOzenDistanceInMeters = Geolocator.distanceBetween(
        position.lat.toDouble(),
        position.lng.toDouble(),
        43.3412,
        52.8619,
      );

      if (aktauDistanceInMeters <= 40000) {
        idshop = 9;
      }

      if (zhanaOzenDistanceInMeters <= 40000) {
        idshop = 13;
      }
      
      if (idshop != -1) {
        showFood.accept(true);
        return idshop;
      }
    } catch (e) {
      logger.e(e);
    }
    showFood.accept(false);
    return null;
  }

  @override
  Future<void> determineLocationPermission({
    bool force = false,
  }) async {
    try {
      // print('üîç –ù–∞—á–∏–Ω–∞–µ–º determineLocationPermission...');
      
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ LocationInteractor
      final permission = await inject<LocationInteractor>().requestLocation();
      // print('üìç –ü–æ–ª—É—á–µ–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: $permission');
      
      // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ locationPermission!
      if (permission != null) {
        locationPermission.accept(permission);
        // print('‚úÖ locationPermission –æ–±–Ω–æ–≤–ª–µ–Ω: $permission');
      } else {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º denied
        locationPermission.accept(geoLocator.LocationPermission.denied);
        // print('‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º locationPermission –∫–∞–∫ denied');
        return; // –í—ã—Ö–æ–¥–∏–º –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã
      if (![geoLocator.LocationPermission.always, geoLocator.LocationPermission.whileInUse].contains(permission)) {
        // print('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: $permission');
        return;
      }
      
      // –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
      final geoLocator.Position? location = await inject<LocationInteractor>().getCurrentLocation();
      
      if (location != null) {
        userLocation.accept(
          geotypes.Position(
            location.longitude,
            location.latitude,
          ),
        );
        
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ SharedPreferences –¥–ª—è –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await inject<SharedPreferences>().setDouble('latitude', location.latitude);
        await inject<SharedPreferences>().setDouble('longitude', location.longitude);
        
        print('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${location.latitude}, ${location.longitude}');
        
        // –î–û–ë–ê–í–õ–Ø–ï–ú: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
        await _moveMapToUserLocation();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await _determineAddressFromRealLocation(location.latitude, location.longitude);
        
      } else {
        // print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        final savedLat = inject<SharedPreferences>().getDouble('latitude');
        final savedLng = inject<SharedPreferences>().getDouble('longitude');
        
        if (savedLat != null && savedLng != null && savedLat != 0 && savedLng != 0) {
          userLocation.accept(
            geotypes.Position(savedLng, savedLat),
          );
          print('üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: $savedLat, $savedLng');
          
          // –î–û–ë–ê–í–õ–Ø–ï–ú: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö
          await _moveMapToUserLocation();
        } else {
          print('üåç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–∫—Ç–∞—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
          // –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–∫—Ç–∞—É
          userLocation.accept(
            geotypes.Position(51.260834, 43.693695),
          );
        }
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏: $e');
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º denied –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      locationPermission.accept(geoLocator.LocationPermission.denied);
      userLocation.accept(
        geotypes.Position(51.260834, 43.693695),
      );
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> _moveMapToUserLocation() async {
    if (_mapboxMapController != null && userLocation.value != null) {
      try {
        await _mapboxMapController!.flyTo(
          CameraOptions(
            center: Point(coordinates: userLocation.value!),
            zoom: 16.0,
          ),
          MapAnimationOptions(duration: 1500),
        );
        print('üó∫Ô∏è –ö–∞—Ä—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: $e');
      }
    }
  }

  @override
  void tabIndexChanged(int newTabIndex) {
    // Keep this method for backward compatibility, but simplify its behavior
    // Since we no longer have tabs, just ensure the panel is visible
    ensurePanelVisible();
  }
  
  // New method: Ensure panel is at least at its minimum state
  void ensurePanelVisible() {
    // Make sure the panel is at least at minimum height
    if (draggableScrollableController.size < 0.35) {
      draggableScrollableController.animateTo(
        0.35,
        duration: Duration(milliseconds: 300),
        curve: Curves.easeOut,
      );
    }
  }
  
  // Add a method to expand the panel fully
  void expandPanel() {
    draggableScrollableController.animateTo(
      0.92,
      duration: Duration(milliseconds: 300),
      curve: Curves.easeOut,
    );
    }
  
  // Add a method to collapse the panel
  void collapsePanel() {
    draggableScrollableController.animateTo(
      0.35,
      duration: Duration(milliseconds: 300),
      curve: Curves.easeOut,
    );
  }

  Future<void> fetchFoods() async {
    foods.loading();

    final result = await NetworkUtils.executeWithErrorHandling<FoodsResponseDomain>(
      () => model.fetchFoods(),
      customErrorMessage: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é',
    );
    
    if (result != null) {
      foodCategories.accept(result.folders);
      foods.content(result.items);
    } else {
      foods.error(Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é'));
    }
  }

  Future<void> fetchUserProfile() async {
    final result = await NetworkUtils.executeWithErrorHandling<UserDomain>(
      () => model.getUserProfile(),
      showErrorMessages: false, // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è
    );

    if (result != null) {
      me.accept(result);
    initializeSocket();
    }
  }

  @override
  Future<void> onSubmit(DriverOrderForm form, DriverType taxi) async {
    print('üöÄ –ö–õ–ò–ï–ù–¢: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...');
    print('üìã –ö–õ–ò–ï–ù–¢: –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:');
    print('üìç –ö–õ–ò–ï–ù–¢: –û—Ç–∫—É–¥–∞: ${form.fromAddress.value}');
    print('üìç –ö–õ–ò–ï–ù–¢: –ö—É–¥–∞: ${form.toAddress.value}');
    print('üí∞ –ö–õ–ò–ï–ù–¢: –°—Ç–æ–∏–º–æ—Å—Ç—å: ${form.cost.value}');
    
    try {
      await NetworkUtils.executeWithErrorHandling<void>(
        () => inject<RestClient>().createDriverOrder(body: {
        "from": form.fromAddress.value,
        "to": form.toAddress.value,
        "lng": userLocation.value?.lng,
        "lat": userLocation.value?.lat,
        "price": form.cost.value,
          "orderType": "TAXI",
        "comment": '${form.comment};${form.fromMapboxId.value};${form.toMapboxId.value}',
        "fromMapboxId": form.fromMapboxId.value,
        "toMapboxId": form.toMapboxId.value,
        }),
        customErrorMessage: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑',
      );
      
      print('‚úÖ –ö–õ–ò–ï–ù–¢: –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
      
      // Check if controller is attached before using it
      try {
        if (draggableScrollableController.isAttached) {
          draggableScrollableController.jumpTo(0.3);
          print('‚úÖ –ö–õ–ò–ï–ù–¢: DraggableScrollableController –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é 0.3');
        }
      } catch (e) {
        print('‚ùå –ö–õ–ò–ï–ù–¢: –û—à–∏–±–∫–∞ —Å draggableScrollableController: $e');
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
      print('‚è±Ô∏è –ö–õ–ò–ï–ù–¢: –û–∂–∏–¥–∞–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞...');
      await Future.delayed(Duration(seconds: 1));
      
      print('üîÑ –ö–õ–ò–ï–ù–¢: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è...');
      await fetchActiveOrder();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω
      print('üîç –ö–õ–ò–ï–ù–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: ${activeOrder.value != null ? "–ø–æ–ª—É—á–µ–Ω" : "–Ω–µ –ø–æ–ª—É—á–µ–Ω"}');
      
      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      if (activeOrder.value == null) {
        print('‚è±Ô∏è –ö–õ–ò–ï–ù–¢: –ó–∞–∫–∞–∑ –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...');
        await Future.delayed(Duration(seconds: 2));
        await fetchActiveOrder();
        print('üîç –ö–õ–ò–ï–ù–¢: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${activeOrder.value != null ? "–ø–æ–ª—É—á–µ–Ω" : "–Ω–µ –ø–æ–ª—É—á–µ–Ω"}');
      }
    } catch (e) {
      print('‚ùå –ö–õ–ò–ï–ù–¢: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: $e');
    }
  }

  Future<void> initializeSocket() async {
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
      await determineLocationPermission();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (me.value == null || me.value!.id == null) {
        logger.e('‚ùå –ö–õ–ò–ï–ù–¢: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ–∫–µ—Ç–∞');
        return;
      }

      logger.i('üîå –ö–õ–ò–ï–ù–¢: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —á–µ—Ä–µ–∑ WebSocketService...');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π WebSocketService
      final websocketService = WebSocketService();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ —Å–æ–∫–µ—Ç
      if (websocketService.isClientConnected) {
        logger.i('‚úÖ –ö–õ–ò–ï–ù–¢: WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
        return;
      }
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏)
      _clearAllEventListeners(websocketService);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –µ–¥–∏–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
      _setupOrderStatusEventListeners(websocketService);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      await websocketService.initializeConnection(
        type: SocketConnectionType.client,
        user: me.value!,
      );
      
      logger.i('üîå –ö–õ–ò–ï–ù–¢: WebSocket –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ WebSocketService');
      
    } catch (e) {
      logger.e('‚ùå –ö–õ–ò–ï–ù–¢: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket: $e');
      print('‚ùå –ö–õ–ò–ï–ù–¢: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket: $e');
    }
  }

  @override
  void dispose() {
    // –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–∞
    print('–û—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç –≤ dispose');
    disconnectWebsocket();
    
    // –£–¥–∞–ª—è–µ–º lifecycle observer
    WidgetsBinding.instance.removeObserver(this);
    
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);
    
    print('üîÑ App lifecycle –∏–∑–º–µ–Ω–∏–ª—Å—è: $state');
    
    switch (state) {
      case AppLifecycleState.resumed:
        // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
        print('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞');
        _handleAppResumed();
        break;
      case AppLifecycleState.paused:
        // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—à–ª–æ –≤ —Ñ–æ–Ω
        print('‚è∏Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        break;
      case AppLifecycleState.inactive:
        // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ (–ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        break;
      case AppLifecycleState.detached:
        // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç—Å–æ–µ–¥–∏–Ω–µ–Ω–æ
        break;
      case AppLifecycleState.hidden:
        // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ
        break;
    }
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
  Future<void> _handleAppResumed() async {
    try {
      print('üîÑ –ö–õ–ò–ï–ù–¢: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      final hasInternet = await NetworkUtils.hasInternetConnection();
      if (!hasInternet) {
        print('‚ùå –ö–õ–ò–ï–ù–¢: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
        return;
      }
      print('‚úÖ –ö–õ–ò–ï–ù–¢: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–Ω–æ');

      // 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
      print('üîÑ –ö–õ–ò–ï–ù–¢: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞...');
      await fetchActiveOrder();
      print('‚úÖ –ö–õ–ò–ï–ù–¢: –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: ${activeOrder.value != null ? "–∑–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω" : "–∑–∞–∫–∞–∑–∞ –Ω–µ—Ç"}');

      // 3. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º WebSocket –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω
      final websocketService = WebSocketService();
      if (!websocketService.isClientConnected && me.value != null) {
        print('üîÑ –ö–õ–ò–ï–ù–¢: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
        await initializeSocket();
        print('‚úÖ –ö–õ–ò–ï–ù–¢: WebSocket –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω');
      } else {
        print('‚ÑπÔ∏è –ö–õ–ò–ï–ù–¢: WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // 4. –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
      if (locationPermission.value == geoLocator.LocationPermission.always ||
          locationPermission.value == geoLocator.LocationPermission.whileInUse) {
        print('üîÑ –ö–õ–ò–ï–ù–¢: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...');
        await _updateMapCamera();
        print('‚úÖ –ö–õ–ò–ï–ù–¢: –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
      } else {
        print('‚ÑπÔ∏è –ö–õ–ò–ï–ù–¢: –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
      }

      // 5. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      await Future.delayed(Duration(seconds: 2));
      print('üîÑ –ö–õ–ò–ï–ù–¢: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞...');
      await fetchActiveOrder();
      print('‚úÖ –ö–õ–ò–ï–ù–¢: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${activeOrder.value != null ? "–∑–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω" : "–∑–∞–∫–∞–∑–∞ –Ω–µ—Ç"}');

      print('‚úÖ –ö–õ–ò–ï–ù–¢: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      print('‚ùå –ö–õ–ò–ï–ù–¢: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: $e');
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏)
  void _clearAllEventListeners(WebSocketService websocketService) {
    websocketService.clearEventListeners(SocketEventType.orderAccepted);
    websocketService.clearEventListeners(SocketEventType.orderRejected);
    websocketService.clearEventListeners(SocketEventType.orderCancelledByClient);
    websocketService.clearEventListeners(SocketEventType.orderStarted);
    websocketService.clearEventListeners(SocketEventType.driverArrived);
    websocketService.clearEventListeners(SocketEventType.rideStarted);
    websocketService.clearEventListeners(SocketEventType.rideEnded);
    websocketService.clearEventListeners(SocketEventType.driverLocation);
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞
  void _setupOrderStatusEventListeners(WebSocketService websocketService) {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º
    websocketService.addEventListener(SocketEventType.orderAccepted, (data) {
      logger.i('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ orderAccepted');
      print('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ orderAccepted: $data');
      _handleOrderStatusChange('orderAccepted', data);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    websocketService.addEventListener(SocketEventType.orderRejected, (data) async {
      logger.i('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ orderRejected');
      print('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ orderRejected: $data');
      isOrderRejected.accept(true);
      await _showOrderRejectedBottomSheet();
      fetchActiveOrder();
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–º
    websocketService.addEventListener(SocketEventType.orderCancelledByClient, (data) {
      logger.i('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ orderCancelledByClient');
      print('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ orderCancelledByClient: $data');
      _handleOrderStatusChange('orderCancelledByClient', data);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏
    websocketService.addEventListener(SocketEventType.orderStarted, (data) {
      logger.i('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ orderStarted');
      print('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ orderStarted: $data');
      _handleOrderStatusChange('orderStarted', data);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–±—ã—Ç–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
    websocketService.addEventListener(SocketEventType.driverArrived, (data) {
      logger.i('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ driverArrived');
      print('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ driverArrived: $data');
      _handleOrderStatusChange('driverArrived', data);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏
    websocketService.addEventListener(SocketEventType.rideStarted, (data) {
      logger.i('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ rideStarted');
      print('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ rideStarted: $data');
      _handleOrderStatusChange('rideStarted', data);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
    websocketService.addEventListener(SocketEventType.rideEnded, (data) {
      logger.i('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ rideEnded');
      print('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ rideEnded: $data');
      _handleRideEnded(data);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
    websocketService.addEventListener(SocketEventType.driverLocation, (data) {
      logger.i('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ driverLocation');
      print('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ driverLocation: $data');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è
      geotypes.Position point;
      if (data['lat'] is String) {
        point = geotypes.Position(double.tryParse(data['lng']) ?? 0, double.tryParse(data['lat']) ?? 0);
      } else {
        point = geotypes.Position(data['lng'], data['lat']);
      }
      driverLocation.accept(point);
      
      // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑ driverLocation
      final orderStatus = data['orderStatus'] as String?;
      if (orderStatus != null) {
        print('üìä –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑ driverLocation: $orderStatus');
        
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ STARTED (–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑), –æ–±–Ω–æ–≤–ª—è–µ–º UI
        if (orderStatus == 'STARTED') {
          print('‚úÖ –ö–õ–ò–ï–ù–¢: –í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑ (—Å—Ç–∞—Ç—É—Å STARTED), –æ–±–Ω–æ–≤–ª—è–µ–º UI');
          _handleOrderStatusChange('orderAccepted', data);
        }
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ WAITING (–≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞ –º–µ—Å—Ç–µ), –æ–±–Ω–æ–≤–ª—è–µ–º UI
        else if (orderStatus == 'WAITING') {
          print('‚úÖ –ö–õ–ò–ï–ù–¢: –í–æ–¥–∏—Ç–µ–ª—å –Ω–∞ –º–µ—Å—Ç–µ (—Å—Ç–∞—Ç—É—Å WAITING), –æ–±–Ω–æ–≤–ª—è–µ–º UI');
          _handleOrderStatusChange('driverArrived', data);
        }
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ ONGOING (–ø–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å), –æ–±–Ω–æ–≤–ª—è–µ–º UI
        else if (orderStatus == 'ONGOING') {
          print('‚úÖ –ö–õ–ò–ï–ù–¢: –ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å (—Å—Ç–∞—Ç—É—Å ONGOING), –æ–±–Ω–æ–≤–ª—è–µ–º UI');
          _handleOrderStatusChange('rideStarted', data);
        }
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ COMPLETED (–ø–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞), –æ–±–Ω–æ–≤–ª—è–µ–º UI
        else if (orderStatus == 'COMPLETED') {
          print('‚úÖ –ö–õ–ò–ï–ù–¢: –ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Å—Ç–∞—Ç—É—Å COMPLETED), –æ–±–Ω–æ–≤–ª—è–µ–º UI');
          _handleRideEnded(data);
        }
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    websocketService.addEventListener(SocketEventType.orderSync, (data) {
      logger.i('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ orderSync');
      print('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ orderSync: $data');
      _handleOrderSync(data);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–¥–∏—Ç–µ–ª–µ
    websocketService.addEventListener(SocketEventType.driverInfo, (data) {
      logger.i('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ driverInfo');
      print('üì¶ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ driverInfo: $data');
      _handleDriverInfo(data);
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    websocketService.addClientConnectionListener((isConnected) {
      if (isConnected) {
        logger.i('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      } else {
        logger.w('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
      }
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  void _handleOrderStatusChange(String eventType, Map<String, dynamic> data) {
    print('üîÑ –ö–õ–ò–ï–ù–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: $eventType');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    Future.delayed(Duration(milliseconds: 100), () {
      print('üîÑ –ö–õ–ò–ï–ù–¢: –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (100ms)');
      _fetchActiveOrderInternal(forceUpdate: true);
    });
    
    // –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    Future.delayed(Duration(milliseconds: 500), () {
      print('üîÑ –ö–õ–ò–ï–ù–¢: –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (500ms)');
      _fetchActiveOrderInternal(forceUpdate: true);
    });
  }
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
  void _handleRideEnded(Map<String, dynamic> data) {
    print('üèÅ –ö–õ–ò–ï–ù–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏');
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
    print('üîÑ –ö–õ–ò–ï–ù–¢: –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑');
    activeOrder.accept(null);
    
    // –ó–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    Future.delayed(Duration(milliseconds: 200), () {
      print('üîÑ –ö–õ–ò–ï–ù–¢: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏');
      _fetchActiveOrderInternal(forceUpdate: true);
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    Future.delayed(Duration(seconds: 1), () {
      print('üîÑ –ö–õ–ò–ï–ù–¢: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞');
      _fetchActiveOrderInternal(forceUpdate: true);
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  void _handleOrderSync(Map<String, dynamic> data) {
    print('üîÑ –ö–õ–ò–ï–ù–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞');
    print('üìã –ö–õ–ò–ï–ù–¢: –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $data');
    
    final orderStatus = data['orderStatus'] as String?;
    final orderId = data['orderId'] as String?;
    final driverId = data['driverId'] as String?;
    
    if (orderStatus != null && orderId != null) {
      print('‚úÖ –ö–õ–ò–ï–ù–¢: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ $orderId —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º $orderStatus');
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
      _fetchActiveOrderInternal(forceUpdate: true);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      Future.delayed(Duration(milliseconds: 500), () {
        _fetchActiveOrderInternal(forceUpdate: true);
      });
    } else {
      print('‚ùå –ö–õ–ò–ï–ù–¢: –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–¥–∏—Ç–µ–ª–µ
  void _handleDriverInfo(Map<String, dynamic> data) {
    print('üöï –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ');
    print('üìã –ö–õ–ò–ï–ù–¢: –î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è: $data');
    
    final driverId = data['driverId'] as String?;
    final driver = data['driver'] as Map<String, dynamic>?;
    
    if (driverId != null && driver != null) {
      print('‚úÖ –ö–õ–ò–ï–ù–¢: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ $driverId –ø–æ–ª—É—á–µ–Ω–∞');
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
    } else {
      print('‚ùå –ö–õ–ò–ï–ù–¢: –ù–µ–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ');
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
  Future<void> _showOrderRejectedBottomSheet() async {
    await showModalBottomSheet(
      context: context,
      isDismissible: true,
      isScrollControlled: true,
      builder: (context) => PrimaryBottomSheet(
        contentPadding: EdgeInsets.symmetric(horizontal: 16),
        child: Column(
          children: [
            const SizedBox(height: 10),
            Center(
              child: Container(
                width: 38,
                height: 4,
                decoration: BoxDecoration(
                  color: greyscale30,
                  borderRadius: BorderRadius.circular(1.4),
                ),
              ),
            ),
            const SizedBox(height: 24),
            SvgPicture.asset(icPlacemarkError),
            const SizedBox(height: 10),
            SizedBox(
              width: double.infinity,
              child: Text(
                '–ü–æ–µ–∑–¥–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
                style: text500Size20Greyscale90,
              ),
            ),
            const SizedBox(height: 24),
            SizedBox(
              width: double.infinity,
              child: PrimaryButton.primary(
                onPressed: () async {
                  isOrderRejected.accept(false);
                  Navigator.of(context).pop();
                },
                text: '–ó–∞–∫—Ä—ã—Ç—å',
                textStyle: text400Size16White,
              ),
            ),
            const SizedBox(height: 24),
          ],
        ),
      ),
    );
  }

  Future<void> disconnectWebsocket() async {
    print('–û—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ WebSocketService');
    try {
      final websocketService = WebSocketService();
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º
      _clearAllEventListeners(websocketService);
      
      await websocketService.disconnectClient();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–æ–∫–µ—Ç–∞: $e');
    }
  }

  @override
  Future<void> fetchActiveOrder() async {
    await _fetchActiveOrderInternal(forceUpdate: false);
  }
  
  // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  Future<void> _fetchActiveOrderInternal({bool forceUpdate = false}) async {
    try {
      print('üîÑ –ö–õ–ò–ï–ù–¢: –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞...');
      logger.i('–ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final token = inject<SharedPreferences>().getString('access_token');
      if (token == null || me.value == null) {
        print('‚ùå –ö–õ–ò–ï–ù–¢: –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        logger.w('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }
      
      print('‚úÖ –ö–õ–ò–ï–ù–¢: –¢–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      final result = await NetworkUtils.executeWithErrorHandling<ActiveClientRequestModel>(
        () => model.getMyClientActiveOrder(),
        showErrorMessages: false, // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      );
      
      print('üìã –ö–õ–ò–ï–ù–¢: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: ${result != null ? "–ø–æ–ª—É—á–µ–Ω" : "null"}');
      
      if (result != null) {
        print('‚úÖ –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑:');
        print('üìã –ö–õ–ò–ï–ù–¢: –°—Ç–∞—Ç—É—Å: ${result.order?.orderStatus}');
        print('üÜî –ö–õ–ò–ï–ù–¢: ID: ${result.order?.id}');
        print('üöï –ö–õ–ò–ï–ù–¢: –í–æ–¥–∏—Ç–µ–ª—å: ${result.driver != null ? "–Ω–∞–∑–Ω–∞—á–µ–Ω" : "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"}');
        print('üöó –ö–õ–ò–ï–ù–¢: –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${result.car != null ? "—É–∫–∞–∑–∞–Ω" : "–Ω–µ —É–∫–∞–∑–∞–Ω"}');
        print('üìç –ö–õ–ò–ï–ù–¢: –ú–∞—Ä—à—Ä—É—Ç: ${result.order?.from} -> ${result.order?.to}');
        
        logger.i('–ü–æ–ª—É—á–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑: ${result.order?.orderStatus}');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∑–∞–∫–∞–∑
        final currentOrder = activeOrder.value;
        final orderChanged = _hasOrderChanged(currentOrder, result);
        
        print('üîÑ –ö–õ–ò–ï–ù–¢: –ó–∞–∫–∞–∑ –∏–∑–º–µ–Ω–∏–ª—Å—è: $orderChanged');
        print('üìä –ö–õ–ò–ï–ù–¢: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${currentOrder?.order?.orderStatus}');
        print('üìä –ö–õ–ò–ï–ù–¢: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${result.order?.orderStatus}');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ, –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (orderChanged || forceUpdate) {
          print('‚úÖ –ö–õ–ò–ï–ù–¢: –ó–∞–∫–∞–∑ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º UI');
          logger.i('–ó–∞–∫–∞–∑ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º UI');
          activeOrder.accept(result);
        } else {
          print('‚ÑπÔ∏è –ö–õ–ò–ï–ù–¢: –ó–∞–∫–∞–∑ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, UI –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º');
        }
      } else {
        print('‚ùå –ö–õ–ò–ï–ù–¢: –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω (result == null)');
        // –ï—Å–ª–∏ result == null, —ç—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —á—Ç–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç –∏–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
        // –û—á–∏—â–∞–µ–º activeOrder —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–µ null (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π UI)
        if (activeOrder.value != null) {
          print('üîÑ –ö–õ–ò–ï–ù–¢: –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–±—ã–ª –∑–∞–∫–∞–∑, —Ç–µ–ø–µ—Ä—å –Ω–µ—Ç)');
          logger.i('–ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
          activeOrder.accept(null);
        } else {
          print('‚ÑπÔ∏è –ö–õ–ò–ï–ù–¢: –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –ø—É—Å—Ç–æ–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º');
        }
      }
    } catch (e) {
      print('‚ùå –ö–õ–ò–ï–ù–¢: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: $e');
      logger.e('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: $e');
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª
      if (activeOrder.value != null) {
        print('üîÑ –ö–õ–ò–ï–ù–¢: –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
        activeOrder.accept(null);
      }
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∑–∞–∫–∞–∑
  bool _hasOrderChanged(ActiveClientRequestModel? current, ActiveClientRequestModel? newOrder) {
    // –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –∑–∞–∫–∞–∑–æ–≤ null, –∞ –¥—Ä—É–≥–æ–π –Ω–µ—Ç - –∑–∞–∫–∞–∑ –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (current == null && newOrder != null) return true;
    if (current != null && newOrder == null) return true;
    if (current == null && newOrder == null) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (current!.order?.id != newOrder!.order?.id) return true;
    if (current.order?.orderStatus != newOrder.order?.orderStatus) return true;
    if (current.driver?.props?.phone != newOrder.driver?.props?.phone) return true;
    
    return false;
  }

  @override
  void cancelActiveClientOrder() async {
    if (activeOrder.value?.order?.id == null) return;
    
    try {
      await NetworkUtils.executeWithErrorHandling<void>(
        () => model.rejectOrderByClientRequest(
          orderRequestId: activeOrder.value!.order!.id!,
        ),
        customErrorMessage: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
      );
      
      // –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ (–Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è)
      // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
      activeOrder.accept(null);
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
      await clearRoute();
      print('üßπ –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –æ—á–∏—â–µ–Ω—ã –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞');
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è
      if (context.mounted) {
        Navigator.of(context).popUntil((route) => route.isFirst);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–ü–æ–∏—Å–∫ –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω'),
            backgroundColor: Colors.orange,
            duration: Duration(seconds: 2),
          ),
        );
      }
    } catch (e) {
      // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º - NetworkUtils —É–∂–µ –ø–æ–∫–∞–∑–∞–ª –æ—à–∏–±–∫—É
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: $e');
    }
  }

  @override
  final DraggableScrollableController draggableScrollableController =
      DraggableScrollableController();

  @override
  void getMyLocation() {
    _updateMapCamera();
  }

  @override
  void scrollDraggableSheetDown() {
    draggableScrollableController.jumpTo(1);
  }

  @override
  void onMapTapped(geotypes.Position point) {
    model.onMapTapped(point);
  }

  @override
  MapboxMap? get mapboxMapController => _mapboxMapController;

  @override
  void setMapboxController(MapboxMap controller) {
    _mapboxMapController = controller;
  }
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –∫–∞—Ä—Ç—ã (–¢–û–õ–¨–ö–û –ø–æ —è–≤–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  Future<void> _updateMapCamera() async {
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É –µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–ª–∏ –∫–∞—Ä—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞
    if (isRouteDisplayed.value == true || isMapFixed.value == true) {
      print('–ö–∞–º–µ—Ä–∞ –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –º–∞—Ä—à—Ä—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–ª–∏ –∫–∞—Ä—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞');
      return;
    }
    
    if (_mapboxMapController != null && userLocation.value != null) {
      try {
        await _mapboxMapController!.flyTo(
          CameraOptions(
            center: Point(coordinates: userLocation.value!),
            zoom: 16.0,
          ),
          MapAnimationOptions(duration: 1000),
        );
        print('–ö–∞–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      } catch (e) {
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã: $e');
      }
    }
  }
  
  @override
  void setRouteDisplayed(bool displayed) {
    isRouteDisplayed.accept(displayed);
  }
  
  @override
  void toggleMapFixed() async {
    isMapFixed.accept(!(isMapFixed.value ?? false));
    await _applyMapGestureSettings();
  }
  
  @override
  void setMapFixed(bool fixed) async {
    final wasFixed = isMapFixed.value ?? false;
    isMapFixed.accept(fixed);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    if (wasFixed != fixed) {
    await _applyMapGestureSettings();
      print(fixed ? 'üîí –ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞' : 'üîì –ö–∞—Ä—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
    }
  }
  
  // Apply map gesture settings based on fixed state
  Future<void> _applyMapGestureSettings() async {
    if (_mapboxMapController == null) {
      print('Cannot apply map gesture settings: mapboxMapController is null');
      return;
    }
    
    try {
      final bool fixed = isMapFixed.value ?? false;
      
      // Configure gestures based on fixed state
      await _mapboxMapController!.gestures.updateSettings(
        GesturesSettings(
          rotateEnabled: !fixed,
          scrollEnabled: !fixed,
          pitchEnabled: !fixed,
          doubleTapToZoomInEnabled: !fixed,
          doubleTouchToZoomOutEnabled: !fixed,
          quickZoomEnabled: !fixed,
          pinchToZoomEnabled: !fixed,
        ),
      );
      
      print('Map gestures ${fixed ? 'disabled' : 'enabled'}');
    } catch (e) {
      print('Error applying map gesture settings: $e');
    }
  }

  @override
  Future<void> displayRouteOnMainMap(geotypes.Position fromPosition, geotypes.Position toPosition) async {
    try {
      print('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –∫–∞—Ä—Ç–µ...');
      print('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã from: ${fromPosition.lat}, ${fromPosition.lng}');
      print('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã to: ${toPosition.lat}, ${toPosition.lng}');
      
      // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –±–ª–æ–∫–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
      setMapFixed(true);
      
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
      final routeKey = '${fromPosition.lat.toStringAsFixed(6)},${fromPosition.lng.toStringAsFixed(6)}-${toPosition.lat.toStringAsFixed(6)},${toPosition.lng.toStringAsFixed(6)}';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –º–∞—Ä—à—Ä—É—Ç–æ–≤
      Map<String, dynamic>? directions;
      if (_routeCache.containsKey(routeKey)) {
        print('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è $routeKey');
        directions = _routeCache[routeKey];
      } else {
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –∏–∑ API Mapbox —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ
        print('üåê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –æ—Ç Mapbox API...');
      final mapboxApi = inject<MapboxApi>();
        directions = await mapboxApi.getDirections(
        fromLat: fromPosition.lat.toDouble(),
        fromLng: fromPosition.lng.toDouble(),
        toLat: toPosition.lat.toDouble(),
        toLng: toPosition.lng.toDouble(),
      );
        
        if (directions != null) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
          _routeCache[routeKey] = directions;
          print('üíæ –ú–∞—Ä—à—Ä—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à');
          
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (–º–∞–∫—Å–∏–º—É–º 10 –º–∞—Ä—à—Ä—É—Ç–æ–≤)
          if (_routeCache.length > 10) {
            final oldestKey = _routeCache.keys.first;
            _routeCache.remove(oldestKey);
            print('üßπ –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –º–∞—Ä—à—Ä—É—Ç –∏–∑ –∫—ç—à–∞: $oldestKey');
          }
        }
      }
      
      if (directions == null) {
        print('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –æ—Ç API: directions is null');
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å
        setMapFixed(false);
        return;
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ –º–∞—Ä—à—Ä—É—Ç —á—Ç–æ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
      if (_lastRouteKey == routeKey) {
        print('üîÑ –¢–æ—Ç –∂–µ –º–∞—Ä—à—Ä—É—Ç —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        return;
      }
      
      _lastRouteKey = routeKey;
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
      await clearRoute();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ API
      if (!directions.containsKey('routes') || directions['routes'] == null || directions['routes'].isEmpty) {
        print('–í –æ—Ç–≤–µ—Ç–µ API –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤');
        setMapFixed(false);
        return;
      }
      
      // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç —Å —Ü–≤–µ—Ç–∞–º–∏ –ø—Ä–æ–±–æ–∫
      final routeData = directions['routes'][0];
      final routeGeometry = routeData['geometry'];
      final legs = routeData['legs'] as List?;
      
      print('–ì–µ–æ–º–µ—Ç—Ä–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: ${routeGeometry.toString().substring(0, min(routeGeometry.toString().length, 100))}...');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
      await _mapboxMapController!.style.addSource(GeoJsonSource(
        id: 'main-route-source',
        data: json.encode({
          "type": "FeatureCollection",
          "features": [{
            "type": "Feature",
            "geometry": routeGeometry,
            "properties": {}
          }]
        }),
      ));
      
      // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø—Ä–æ–±–æ–∫
      await _addTrafficAwareLayers();
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
      if (legs != null && legs.isNotEmpty) {
        await _addTrafficSegments(legs);
      } else {
        // –ë–∞–∑–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ —Å —Ü–≤–µ—Ç–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∑–µ–ª–µ–Ω—ã–π - –±–µ–∑ –ø—Ä–æ–±–æ–∫)
        await _addBasicRouteLayers();
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–µ–∫
      try {
        // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ GeoJSON –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ A –∏ B
        final markersJsonA = {
          "type": "FeatureCollection",
          "features": [
            {
              "type": "Feature",
              "geometry": {
                "type": "Point",
                "coordinates": [fromPosition.lng, fromPosition.lat]
              },
              "properties": {
                "icon": "point_a"
              }
            }
          ]
        };

        final markersJsonB = {
          "type": "FeatureCollection",
          "features": [
            {
              "type": "Feature",
              "geometry": {
                "type": "Point",
                "coordinates": [toPosition.lng, toPosition.lat]
              },
              "properties": {
                "icon": "point_b"
              }
            }
          ]
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
        await _mapboxMapController!.style.addSource(GeoJsonSource(
          id: 'main-markers-source-a',
          data: json.encode(markersJsonA),
        ));
        
        await _mapboxMapController!.style.addSource(GeoJsonSource(
          id: 'main-markers-source-b',
          data: json.encode(markersJsonB),
        ));
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ A (–º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä)
        await _mapboxMapController!.style.addLayer(SymbolLayer(
          id: 'main-markers-layer-a',
          sourceId: 'main-markers-source-a',
          iconImage: "point_a",
          iconSize: 0.3, // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ A
          iconAnchor: IconAnchor.BOTTOM,
          minZoom: 0, // –í–∏–¥–Ω–æ –Ω–∞ –ª—é–±–æ–º –º–∞—Å—à—Ç–∞–±–µ
          maxZoom: 22, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑—É–º
          iconAllowOverlap: true, // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –∏–∫–æ–Ω–æ–∫
          symbolSortKey: 10, // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ));
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ B (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
        await _mapboxMapController!.style.addLayer(SymbolLayer(
          id: 'main-markers-layer-b',
          sourceId: 'main-markers-source-b',
          iconImage: "point_b",
          iconSize: 0.3, // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ B
          iconAnchor: IconAnchor.BOTTOM,
          minZoom: 0, // –í–∏–¥–Ω–æ –Ω–∞ –ª—é–±–æ–º –º–∞—Å—à—Ç–∞–±–µ
          maxZoom: 22, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑—É–º
          iconAllowOverlap: true, // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –∏–∫–æ–Ω–æ–∫
          symbolSortKey: 11, // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ));
      } catch (e) {
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤: $e');
      }
      
      // –ò–î–ï–ê–õ–¨–ù–û–ï –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞: –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
      final bounds = directions['routes'][0]['bounds'];
      if (bounds != null) {
        final southwest = bounds[0];
        final northeast = bounds[1];
        
        // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        final camera = await _mapboxMapController!.cameraForCoordinateBounds(
          CoordinateBounds(
            southwest: Point(coordinates: geotypes.Position(southwest[0], southwest[1])),
            northeast: Point(coordinates: geotypes.Position(northeast[0], northeast[1])),
            infiniteBounds: false
          ),
          MbxEdgeInsets(
            top: 80,     // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
            left: 40,    // –û—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
            bottom: 120, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è –ø–∞–Ω–µ–ª–∏
            right: 40,   // –û—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞
          ),
          null, // bearing
          null, // pitch
          null, // maxZoom
          null, // minZoom
        );
        
        await _mapboxMapController!.flyTo(
          camera,
          MapAnimationOptions(duration: 1200), // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è 1.2 —Å–µ–∫
        );
        
        print('üì∑ –ö–∞–º–µ—Ä–∞ –∏–¥–µ–∞–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
      }
      
      // –ë–õ–û–ö–ò–†–£–ï–ú –∫–∞—Ä—Ç—É –¥–ª—è –ª—É—á—à–µ–≥–æ UX –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –º–∞—Ä—à—Ä—É—Ç–∞
        await _applyMapGestureSettings();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
      setRouteDisplayed(true);
      
      print('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
      
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: $e');
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
      setMapFixed(false);
    }
  }

  @override
  Future<void> clearRoute() async {
    if (_mapboxMapController == null) {
      print('Cannot clear route: mapboxMapController is null');
      return;
    }
    
    try {
      print('Clearing route from map...');
      
      // –û—á–∏—â–∞–µ–º –∫—ç—à —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
      _lastRouteKey = null;
      print('üßπ –û—á–∏—â–µ–Ω –∫—ç—à —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞');
      
      // –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –û–ß–ò–°–¢–ö–ê: Remove –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–æ–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
      final layersToRemove = [
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ª–æ–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        'main-route-layer', 
        'main-route-outline-layer', 
        'main-markers-layer', 
        'main-markers-layer-a', 
        'main-markers-layer-b',
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∏
        'dynamic-route-layer',
        'dynamic-route-outline-layer',
        // –û–±—â–∏–µ —Å–ª–æ–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        'route-layer',
        'route-outline-layer',
        // –°–ª–æ–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è
        'client-driver-marker-layer'
      ];
      
      final sourcesToRemove = [
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        'main-route-source', 
        'main-markers-source', 
        'main-markers-source-a', 
        'main-markers-source-b',
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        'dynamic-route-source',
        // –û–±—â–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        'route-source',
        // –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è
        'client-driver-marker-source'
      ];
      
      // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–ª–æ–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–±–æ–∫ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã)
      for (int legIndex = 0; legIndex < 5; legIndex++) {
        for (int stepIndex = 0; stepIndex < 20; stepIndex++) {
          final segmentId = 'route-segment-$legIndex-$stepIndex';
          layersToRemove.add(segmentId);
          sourcesToRemove.add('$segmentId-source');
        }
      }
      
      for (final layerId in layersToRemove) {
        try {
        if (await _mapboxMapController!.style.styleLayerExists(layerId)) {
          await _mapboxMapController!.style.removeStyleLayer(layerId);
          print('Removed layer $layerId');
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - —Å–ª–æ–π –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        }
      }
      
      for (final sourceId in sourcesToRemove) {
        try {
        if (await _mapboxMapController!.style.styleSourceExists(sourceId)) {
          await _mapboxMapController!.style.removeStyleSource(sourceId);
          print('Removed source $sourceId');
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - –∏—Å—Ç–æ—á–Ω–∏–∫ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        }
      }
      
      // –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º —Ç–∞–∫–∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è
      driverLocation.accept(null);
      print('üßπ –ü–æ–∑–∏—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–∞');
      
      // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
      isRouteDisplayed.accept(false);
      setMapFixed(false); // –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ _applyMapGestureSettings
      
      print('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –æ—á–∏—â–µ–Ω –∏ –∫–∞—Ä—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
    } catch (e) {
      print('Error clearing route: $e');
    }
  }

  @override
  Future<void> createDriverOrder(DriverOrderForm form) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
    if (isUserBlocked.value == true) {
      final reason = userBlockReason.value ?? '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
      final blockedUntil = userBlockedUntil.value;
      NetworkUtils.showUserBlockedMessage(reason, blockedUntil);
      return;
    }

    // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –≤ UI –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    final temporaryOrder = ActiveClientRequestModel(
      order: OrderRequestClientModel(
        id: "temp_${DateTime.now().millisecondsSinceEpoch}",
        orderStatus: 'CREATED',
        from: form.fromAddress.value,
        to: form.toAddress.value,
        price: form.cost.value?.toInt(),
        orderType: "TAXI",
        fromMapboxId: form.fromMapboxId.value,
        toMapboxId: form.toMapboxId.value,
        comment: '',
      ),
      // –í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
      driver: null,
      car: null,
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º
    activeOrder.accept(temporaryOrder);

    try {
      await inject<RestClient>().createDriverOrder(body: {
        "from": form.fromAddress.value,
        "to": form.toAddress.value,
        "lng": userLocation.value?.lng,
        "lat": userLocation.value?.lat,
        "price": form.cost.value,
        "orderType": "TAXI",
        "comment": '${form.comment};${form.fromMapboxId.value};${form.toMapboxId.value}',
        "fromMapboxId": form.fromMapboxId.value,
        "toMapboxId": form.toMapboxId.value,
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ —Å —Å–µ—Ä–≤–µ—Ä–∞
      await Future.delayed(Duration(milliseconds: 500)); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      await fetchActiveOrder();
      
      // –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –∑–∞–∫–∞–∑ –Ω–µ –ø–æ–ª—É—á–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
      if (activeOrder.value == null) {
        activeOrder.accept(temporaryOrder);
      }
    } catch (error) {
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
      activeOrder.accept(temporaryOrder);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (error is DioException && 
          error.response?.statusCode == 403 &&
          error.response?.data != null &&
          error.response?.data['message'] == '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.') {
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        final String reason = error.response?.data['reason'] ?? '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
        final String? blockedUntilStr = error.response?.data['blockedUntil'];
        DateTime? blockedUntil;
        
        if (blockedUntilStr != null) {
          try {
            blockedUntil = DateTime.parse(blockedUntilStr);
          } catch (e) {
            print('Error parsing blockedUntil date: $e');
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        isUserBlocked.accept(true);
        userBlockReason.accept(reason);
        userBlockedUntil.accept(blockedUntil);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        NetworkUtils.showUserBlockedMessage(reason, blockedUntil);
      } else {
        // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        NetworkUtils.handleNetworkError(error);
      }
    }
  }

  @override
  void saveOrderAddresses({
    required String fromAddress,
    required String toAddress,
    required String fromMapboxId,
    required String toMapboxId,
  }) {
    print('üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∑–∞–∫–∞–∑–∞...');
    
    // –†–ï–§–ê–ö–¢–û–†: –ú–ì–ù–û–í–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
    final validFromAddress = fromAddress.isNotEmpty ? fromAddress : "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è";
    final validToAddress = toAddress.isNotEmpty ? toAddress : "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    final coordinatesChanged = (savedFromMapboxId.value != fromMapboxId || 
                               savedToMapboxId.value != toMapboxId);
    
    // –ú–ì–ù–û–í–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    savedFromAddress.accept(validFromAddress);
    savedToAddress.accept(validToAddress);
    savedFromMapboxId.accept(fromMapboxId);
    savedToMapboxId.accept(toMapboxId);
    
    print('‚úÖ –ê–¥—Ä–µ—Å–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ UI');
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SharedPreferences
    _saveAddressesToPreferences(validFromAddress, validToAddress, fromMapboxId, toMapboxId);
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if (coordinatesChanged && fromMapboxId.isNotEmpty && toMapboxId.isNotEmpty) {
      _displayRouteIfNeeded(fromMapboxId, toMapboxId);
    }
  }

  // –†–ï–§–ê–ö–¢–û–†: –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
  void _displayRouteIfNeeded(String fromMapboxId, String toMapboxId) {
      try {
        print('üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞:');
        print('  üìç fromMapboxId: "$fromMapboxId"');
        print('  üìç toMapboxId: "$toMapboxId"');
        
        final fromParts = fromMapboxId.split(';');
        final toParts = toMapboxId.split(';');
        
        print('  üìç fromParts: $fromParts');
        print('  üìç toParts: $toParts');
        
        if (fromParts.length >= 2 && toParts.length >= 2) {
          final fromLat = double.tryParse(fromParts[0]);
          final fromLng = double.tryParse(fromParts[1]);
          final toLat = double.tryParse(toParts[0]);
          final toLng = double.tryParse(toParts[1]);
          
          print('  üß≠ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã FROM: lat=$fromLat, lng=$fromLng');
          print('  üß≠ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã TO: lat=$toLat, lng=$toLng');
          
          if (fromLat != null && fromLng != null && toLat != null && toLng != null) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–Ω—ã–µ
            final distance = _calculateDistance(fromLat, fromLng, toLat, toLng);
            print('  üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏: ${distance.toStringAsFixed(2)} –º');
            
            if (distance < 10) {
              print('  ‚ö†Ô∏è –¢–æ—á–∫–∏ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É (${distance.toStringAsFixed(2)} –º)');
              print('  ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
              return;
            }
            
            print('üó∫Ô∏è –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π');
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            displayRouteOnMainMap(
              geotypes.Position(fromLng, fromLat),
              geotypes.Position(toLng, toLat),
            );
          } else {
            print('  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
          }
        } else {
          print('  ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
        }
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: $e');
      }
  }
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
  double _calculateDistance(double lat1, double lng1, double lat2, double lng2) {
    const double earthRadius = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    final double dLat = _degreesToRadians(lat2 - lat1);
    final double dLng = _degreesToRadians(lng2 - lng1);
    
    final double a = sin(dLat / 2) * sin(dLat / 2) +
        cos(_degreesToRadians(lat1)) * cos(_degreesToRadians(lat2)) *
        sin(dLng / 2) * sin(dLng / 2);
    final double c = 2 * atan2(sqrt(a), sqrt(1 - a));
    
    return earthRadius * c;
  }
  
  double _degreesToRadians(double degrees) {
    return degrees * (pi / 180);
  }

  // –†–ï–§–ê–ö–¢–û–†: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ SharedPreferences –≤–æ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
  Future<void> _saveAddressesToPreferences(String fromAddress, String toAddress, String fromMapboxId, String toMapboxId) async {
    try {
      final prefs = inject<SharedPreferences>();
      
      // –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å–∞ –≤–æ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
      // –û–Ω–∏ –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
      if (_isValidAddress(fromAddress)) {
        await prefs.setString('saved_from_address', fromAddress);
        if (fromMapboxId.isNotEmpty) {
          await prefs.setString('saved_from_coords', fromMapboxId);
        }
        print('üíæ –ê–¥—Ä–µ—Å "–æ—Ç–∫—É–¥–∞" —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏: $fromAddress');
      }
      
      if (_isValidAddress(toAddress)) {
        await prefs.setString('saved_to_address', toAddress);
        if (toMapboxId.isNotEmpty) {
          await prefs.setString('saved_to_coords', toMapboxId);
        }
        print('üíæ –ê–¥—Ä–µ—Å "–∫—É–¥–∞" —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏: $toAddress');
      }
      
      print('‚ÑπÔ∏è –ê–¥—Ä–µ—Å–∞ –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤: $e');
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞
  bool _isValidAddress(String address) {
    return address.isNotEmpty && 
           address != "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è" && 
           address != "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è" && 
           address != "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" &&
           address != "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...";
  }

  // UI —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç StateNotifierBuilder –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  // –ú–µ—Ç–æ–¥ forceUpdateAddresses –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
  @override
  void forceUpdateAddresses() {
    // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º - UI –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ StateNotifierBuilder
    print('‚ö° UI –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ StateNotifierBuilder');
  }

  // –ù–û–í–´–ï –ú–ï–¢–û–î–´: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–µ–≤ –º–∞—Ä—à—Ä—É—Ç–∞ —Å —Ü–≤–µ—Ç–∞–º–∏ –ø—Ä–æ–±–æ–∫
  
  // –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–æ–∫
  Future<void> _addTrafficAwareLayers() async {
    try {
      // –°–ª–æ–π –∫–æ–Ω—Ç—É—Ä–∞ (–±–µ–ª–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏)
      await _mapboxMapController!.style.addLayer(LineLayer(
        id: 'main-route-outline-layer',
        sourceId: 'main-route-source',
        lineColor: Colors.white.value,
        lineWidth: 8.0,
        lineOpacity: 0.9,
      ));
      
      print('‚úÖ –ë–∞–∑–æ–≤—ã–µ —Å–ª–æ–∏ –º–∞—Ä—à—Ä—É—Ç–∞ —Å–æ–∑–¥–∞–Ω—ã');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ–µ–≤: $e');
      }
  }

  // –î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–±–∫–∞—Ö
  Future<void> _addTrafficSegments(List legs) async {
    try {
      print('üö¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–∫–∞—Ö...');
      int segmentCount = 0;
      int freeSegments = 0;
      int moderateSegments = 0;
      int heavySegments = 0;
      
      for (int legIndex = 0; legIndex < legs.length; legIndex++) {
        final leg = legs[legIndex];
        final steps = leg['steps'] as List?;
        
        if (steps != null) {
          for (int stepIndex = 0; stepIndex < steps.length; stepIndex++) {
            final step = steps[stepIndex];
            final duration = (step['duration'] as num?)?.toDouble();
            final distance = (step['distance'] as num?)?.toDouble();
            final geometry = step['geometry'];
            
            if (duration != null && distance != null && geometry != null && duration > 0) {
              // –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–±–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
              final speed = distance / duration; // –º/—Å
              final speedKmh = speed * 3.6; // –∫–º/—á
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–∫–æ—Ä–æ—Å—Ç–∏
              if (speedKmh.isFinite && speedKmh > 0) {
                final trafficLevel = _calculateTrafficLevel(speedKmh);
                final color = _getTrafficColor(trafficLevel);
              
              // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
              segmentCount++;
              switch (trafficLevel) {
                case 'free':
                  freeSegments++;
                  break;
                case 'moderate':
                  moderateSegments++;
                  break;
                case 'heavy':
                  heavySegments++;
                  break;
              }
              
              // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–æ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
              final segmentId = 'route-segment-${legIndex}-${stepIndex}';
              
              await _mapboxMapController!.style.addSource(GeoJsonSource(
                id: '${segmentId}-source',
                data: json.encode({
                  "type": "FeatureCollection",
                  "features": [{
                    "type": "Feature",
                    "geometry": geometry,
                    "properties": {
                      "traffic_level": trafficLevel,
                      "speed_kmh": speedKmh.round(),
                      "distance_m": distance.round()
                    }
                  }]
                }),
              ));
              
                await _mapboxMapController!.style.addLayer(LineLayer(
                  id: segmentId,
                  sourceId: '${segmentId}-source',
                  lineColor: color.value,
                  lineWidth: 5.0,
                  lineOpacity: 0.9,
                ));
              } else {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã —Å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
                print('‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Å–µ–≥–º–µ–Ω—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é: $speedKmh –∫–º/—á');
              }
            }
          }
        }
      }
      
      print('üö¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–æ–∫:');
      print('  üìä –í—Å–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: $segmentCount');
      print('  üü¢ –°–≤–æ–±–æ–¥–Ω–∞—è –¥–æ—Ä–æ–≥–∞: $freeSegments');
      print('  üü† –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–±–∫–∏: $moderateSegments');
      print('  üî¥ –°–∏–ª—å–Ω—ã–µ –ø—Ä–æ–±–∫–∏: $heavySegments');
      print('‚úÖ –°–µ–≥–º–µ–Ω—Ç—ã —Å –ø—Ä–æ–±–∫–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–±–æ–∫: $e');
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      await _addBasicRouteLayers();
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –±–µ–∑ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–±–æ–∫
  Future<void> _addBasicRouteLayers() async {
    try {
      // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π –º–∞—Ä—à—Ä—É—Ç–∞ (–∑–µ–ª–µ–Ω—ã–π - –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—É—é –¥–æ—Ä–æ–≥—É)
      await _mapboxMapController!.style.addLayer(LineLayer(
        id: 'main-route-layer',
        sourceId: 'main-route-source',
        lineColor: Colors.green.value, // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–π –¥–æ—Ä–æ–≥–∏
        lineWidth: 5.0,
        lineOpacity: 0.9,
      ));
      
      print('‚úÖ –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞: $e');
    }
  }
  
  // –í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–±–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
  String _calculateTrafficLevel(double speedKmh) {
    if (speedKmh >= 50) {
      return 'free'; // –°–≤–æ–±–æ–¥–Ω–∞—è –¥–æ—Ä–æ–≥–∞
    } else if (speedKmh >= 25) {
      return 'moderate'; // –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–±–∫–∏
      } else {
      return 'heavy'; // –°–∏–ª—å–Ω—ã–µ –ø—Ä–æ–±–∫–∏
      }
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ø—Ä–æ–±–æ–∫
  Color _getTrafficColor(String trafficLevel) {
    switch (trafficLevel) {
      case 'free':
        return Colors.green; // –ó–µ–ª–µ–Ω—ã–π - —Å–≤–æ–±–æ–¥–Ω–∞—è –¥–æ—Ä–æ–≥–∞
      case 'moderate':
        return Colors.orange; // –û—Ä–∞–Ω–∂–µ–≤—ã–π - —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–±–∫–∏
      case 'heavy':
        return Colors.red; // –ö—Ä–∞—Å–Ω—ã–π - —Å–∏–ª—å–Ω—ã–µ –ø—Ä–æ–±–∫–∏
      default:
        return primaryColor; // –ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç –∫–∞–∫ fallback
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> _clearSavedAddressesOnStartup() async {
    try {
      final prefs = inject<SharedPreferences>();
    
      // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
      await prefs.remove('saved_from_address');
      await prefs.remove('saved_to_address');
      await prefs.remove('saved_from_coords');
      await prefs.remove('saved_to_coords');
      
      print('üóëÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –æ—á–∏—â–µ–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
      print('üí° –ü–æ–ª–µ "–æ—Ç–∫—É–¥–∞" –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é, –ø–æ–ª–µ "–∫—É–¥–∞" –±—É–¥–µ—Ç –ø—É—Å—Ç—ã–º');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: $e');
    }
  }

  @override
  Future<void> _determineAddressFromRealLocation(double latitude, double longitude) async {
    try {
      print('üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é...');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      savedFromAddress.accept('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Å –±—ç–∫–∞
      final restClient = inject<RestClient>();
      final addressData = await restClient.getPlaceDetail(
        latitude: latitude,
        longitude: longitude,
      ).timeout(Duration(seconds: 5));
      
      if (addressData != null && addressData.isNotEmpty && addressData != "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω") {
        print('‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å —Å –±—ç–∫–∞: $addressData');
        
        // –ú–ì–ù–û–í–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º UI
        savedFromAddress.accept(addressData);
        savedFromMapboxId.accept('${latitude};${longitude}');
        
        // –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        // –ë—É–¥–µ—Ç –æ—á–∏—â–µ–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        final prefs = inject<SharedPreferences>();
        await prefs.setString('saved_from_address', addressData);
        await prefs.setString('saved_from_coords', '${latitude};${longitude}');
        print('üíæ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)');
      } else {
        print('‚ö†Ô∏è –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        savedFromAddress.accept('–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
        savedFromMapboxId.accept('${latitude};${longitude}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: $e');
        savedFromAddress.accept('–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
      if (userLocation.value != null) {
        savedFromMapboxId.accept('${userLocation.value!.lat};${userLocation.value!.lng}');
      }
    }
  }
}
