import 'dart:async';
import 'dart:convert';
import 'dart:math';

import 'package:aktau_go/domains/active_request/active_request_domain.dart';
import 'package:aktau_go/forms/driver_registration_form.dart';
import 'package:aktau_go/interactors/profile_interactor.dart';
import 'package:flutter/material.dart';
import 'package:elementary/elementary.dart';
import 'package:elementary_helper/elementary_helper.dart';
import 'package:geolocator/geolocator.dart' as geoLocator;
import 'package:geolocator/geolocator.dart';
import 'package:geotypes/geotypes.dart' as geotypes;
import 'package:socket_io_client/socket_io_client.dart' as IO;
import 'package:mapbox_maps_flutter/mapbox_maps_flutter.dart';

import '../../core/text_styles.dart';
import '../../interactors/order_requests_interactor.dart';
import '../../interactors/common/mapbox_api/mapbox_api.dart';
import '../../interactors/main_navigation_interactor.dart';
import 'package:aktau_go/ui/basket/forms/food_order_form.dart';
import '../../utils/text_editing_controller.dart';
import '../../core/colors.dart';
import '../../domains/food/food_category_domain.dart';
import '../../domains/food/food_domain.dart';
import '../../domains/user/user_domain.dart';
import '../../interactors/common/rest_client.dart';
import '../../interactors/food_interactor.dart';
import '../../models/active_client_request/active_client_request_model.dart';
import '../../utils/logger.dart';
import '../../utils/utils.dart';
import '../widgets/rounded_text_field.dart';
import './forms/driver_order_form.dart';

import './tenant_home_model.dart';
import './tenant_home_screen.dart';
import '../../interactors/location_interactor.dart';
import 'package:shared_preferences/shared_preferences.dart';

defaultTenantHomeWMFactory(BuildContext context) => TenantHomeWM(
      TenantHomeModel(
        inject<FoodInteractor>(),
        inject<ProfileInteractor>(),
        inject<OrderRequestsInteractor>(),
        inject<MainNavigationInteractor>(),
      ),
    );

abstract class ITenantHomeWM implements IWidgetModel {
  // mapbox.MapboxMapController? get mapboxMapController;

  StateNotifier<geotypes.Position> get userLocation;

  StateNotifier<geotypes.Position> get driverLocation;

  StateNotifier<geoLocator.LocationPermission> get locationPermission;

  TabController get tabController;

  StateNotifier<int> get currentTab;

  StateNotifier<bool> get isOrderRejected;

  StateNotifier<List<FoodCategoryDomain>> get foodCategories;

  EntityStateNotifier<List<FoodDomain>> get foods;

  StateNotifier<ActiveClientRequestModel> get activeOrder;

  StateNotifier<UserDomain> get me;

  StateNotifier<double> get draggableMaxChildSize;

  StateNotifier<bool> get showFood;

  StateNotifier<bool> get rateOpened;

  StateNotifier<double> get draggableScrolledSize;
  
  // Route display state management
  StateNotifier<bool> get isRouteDisplayed;
  
  // Map fixed state management
  StateNotifier<bool> get isMapFixed;
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
  StateNotifier<String> get savedFromAddress;
  StateNotifier<String> get savedToAddress;
  StateNotifier<String> get savedFromMapboxId;
  StateNotifier<String> get savedToMapboxId;

  DraggableScrollableController get draggableScrollableController;
  
  // –î–æ–±–∞–≤–ª—è–µ–º MapboxMapController –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ–π
  MapboxMap? get mapboxMapController;

  Future<void> determineLocationPermission({
    bool force = false,
  });

  void tabIndexChanged(int newTabIndex);

  Future<void> onSubmit(DriverOrderForm form, DriverType taxi);
  
  // –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Ç–∞–∫—Å–∏
  Future<void> createDriverOrder(DriverOrderForm form);

  void cancelActiveClientOrder();

  void getMyLocation();

  void scrollDraggableSheetDown();

  void onMapTapped(geotypes.Position point);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∫–∞—Ä—Ç—ã
  void setMapboxController(MapboxMap controller);

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
  Future<void> displayRouteOnMainMap(geotypes.Position fromPosition, geotypes.Position toPosition);
  
  // Toggle map fixed state
  void toggleMapFixed();
  
  // Set map fixed state directly
  void setMapFixed(bool fixed);
  
  // Set route displayed state
  void setRouteDisplayed(bool displayed);
  
  // Clear displayed route
  Future<void> clearRoute();
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –∑–∞–∫–∞–∑–∞
  void saveOrderAddresses({
    required String fromAddress,
    required String toAddress,
    required String fromMapboxId,
    required String toMapboxId,
  });

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –≤ UI
  void forceUpdateAddresses();
}

class TenantHomeWM extends WidgetModel<TenantHomeScreen, TenantHomeModel>
    with SingleTickerProviderWidgetModelMixin
    implements ITenantHomeWM {
  TenantHomeWM(
    TenantHomeModel model,
  ) : super(model);

  IO.Socket? newOrderSocket;
  
  // –î–æ–±–∞–≤–ª—è–µ–º MapboxMapController –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ–π
  MapboxMap? _mapboxMapController;

  // –ö—ç—à –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
  final Map<String, Map<String, dynamic>> _routeCache = {};
  String? _lastRouteKey;

  @override
  final StateNotifier<geotypes.Position> userLocation = StateNotifier(
    initValue: geotypes.Position(
      51.260834,
      43.693695,
    ),
  );

  @override
  final StateNotifier<double> draggableMaxChildSize = StateNotifier(
    initValue: 1,
  );

  @override
  final StateNotifier<geotypes.Position> driverLocation = StateNotifier();
  @override
  final StateNotifier<bool> showFood = StateNotifier(
    initValue: false,
  );

  @override
  late final TabController tabController = TabController(
    length: 2,
    vsync: this,
  );

  @override
  final StateNotifier<int> currentTab = StateNotifier(
    initValue: 0,
  );

  final StateNotifier<double> rateTaxi = StateNotifier(
    initValue: 0,
  );

  @override
  final StateNotifier<double> draggableScrolledSize = StateNotifier(
    initValue: 0,
  );

  @override
  final StateNotifier<bool> isOrderRejected = StateNotifier(
    initValue: false,
  );
  @override
  final StateNotifier<bool> rateOpened = StateNotifier(
    initValue: false,
  );

  @override
  final StateNotifier<List<FoodCategoryDomain>> foodCategories = StateNotifier(
    initValue: const [],
  );

  @override
  final EntityStateNotifier<List<FoodDomain>> foods = EntityStateNotifier();
  @override
  final StateNotifier<ActiveClientRequestModel> activeOrder = StateNotifier();

  @override
  final StateNotifier<UserDomain> me = StateNotifier();

  @override
  final StateNotifier<geoLocator.LocationPermission> locationPermission = StateNotifier();

  late final TextEditingController commentTextController = createTextEditingController();

  @override
  final StateNotifier<bool> isRouteDisplayed = StateNotifier(
    initValue: false,
  );

  @override
  final StateNotifier<bool> isMapFixed = StateNotifier(
    initValue: false,
  );

  @override
  final StateNotifier<String> savedFromAddress = StateNotifier();
  @override
  final StateNotifier<String> savedToAddress = StateNotifier();
  @override
  final StateNotifier<String> savedFromMapboxId = StateNotifier();
  @override
  final StateNotifier<String> savedToMapboxId = StateNotifier();

  @override
  void initWidgetModel() {
    super.initWidgetModel();
    
    print('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TenantHomeWM...');
    
    // –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    fetchUserProfile().then((_) {
      // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∫–µ—Ç
      initializeSocket();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
      fetchActiveOrder();
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –µ–¥—É –≤ –ø–∞—Ä–∞–ª–ª–µ–ª–∏
    fetchFoods();
    
    // –†–ï–§–ê–ö–¢–û–†: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –∞–¥—Ä–µ—Å–∞
    _initializeLocationAndAddress();
    
    // –ù–∞—Å—Ç—Ä–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è draggableScrollableController
    draggableScrollableController.addListener(() {
      draggableScrolledSize.accept(draggableScrollableController.size);
    });
    
    // –£–ü–†–û–©–ê–ï–ú: –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∞–¥—Ä–µ—Å–∞
    Geolocator.getPositionStream(
      locationSettings: geoLocator.LocationSettings(
        accuracy: geoLocator.LocationAccuracy.high,
        distanceFilter: 100, // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –Ω–∞ 100+ –º–µ—Ç—Ä–æ–≤
      ),
    ).listen((geoLocator.Position position) {
      userLocation.accept(
        geotypes.Position(
          position.longitude,
          position.latitude,
        ),
      );

      _checkLocation();
    });

    // –î–µ–ª–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é UI —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º draggableMaxChildSize
    WidgetsBinding.instance.addPostFrameCallback((_) {
      draggableMaxChildSize.accept(1.0);
      draggableScrolledSize.accept(draggableScrollableController.size);
    });
  }
  
  // –†–ï–§–ê–ö–¢–û–†: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  Future<void> _initializeLocationAndAddress() async {
    try {
      print('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –∞–¥—Ä–µ—Å–∞...');
      
      // –≠–¢–ê–ü 1: –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      await _loadSavedAddresses();
      
      // –≠–¢–ê–ü 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å
      await Future.wait([
        _getCurrentLocationQuickly(), // –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (3 —Å–µ–∫ –º–∞–∫—Å)
        _determineAddressFromLocation(), // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (5 —Å–µ–∫ –º–∞–∫—Å)
      ]);
      
      print('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –∞–¥—Ä–µ—Å
      _setFallbackAddress();
    }
  }

  // –†–ï–§–ê–ö–¢–û–†: –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  Future<void> _getCurrentLocationQuickly() async {
    try {
      print('üìç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–±—ã—Å—Ç—Ä–æ)
      final lastKnown = await Geolocator.getLastKnownPosition();
      if (lastKnown != null) {
        userLocation.accept(geotypes.Position(lastKnown.longitude, lastKnown.latitude));
        print('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∫—ç—à–∞: ${lastKnown.latitude}, ${lastKnown.longitude}');
      }
      
      // –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
      final current = await Geolocator.getCurrentPosition(
        locationSettings: geoLocator.LocationSettings(
          accuracy: geoLocator.LocationAccuracy.high,
          timeLimit: Duration(seconds: 3),
        ),
      ).catchError((e) {
        print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞ 3 —Å–µ–∫: $e');
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –∫–∞–∫ geoLocator.Position?
        return null as geoLocator.Position?;
      });
      
      if (current != null) {
        userLocation.accept(geotypes.Position(current.longitude, current.latitude));
        print('‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${current.latitude}, ${current.longitude}');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SharedPreferences
        final prefs = inject<SharedPreferences>();
        await prefs.setDouble('latitude', current.latitude);
        await prefs.setDouble('longitude', current.longitude);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É –∫–∞—Ä—Ç—ã –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≥–æ—Ç–æ–≤
      if (_mapboxMapController != null && userLocation.value != null) {
        _updateMapCamera();
      }
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: $e');
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ SharedPreferences –µ—Å–ª–∏ –µ—Å—Ç—å
      await _loadLocationFromPreferences();
    }
  }

  // –†–ï–§–ê–ö–¢–û–†: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ —Ç–µ–∫—É—â–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
  Future<void> _determineAddressFromLocation() async {
    try {
      print('üè† –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞...');
      
      // –ñ–¥–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞–∫—Å–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã
      var attempts = 0;
      while (userLocation.value == null && attempts < 10) {
        await Future.delayed(Duration(milliseconds: 200));
        attempts++;
      }
      
      if (userLocation.value == null) {
        print('‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞');
        return;
      }
      
      // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å "–æ—Ç–∫—É–¥–∞" - –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
      if (savedFromAddress.value != null && 
          savedFromAddress.value!.isNotEmpty && 
          savedFromAddress.value != "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è..." &&
          savedFromAddress.value != "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω") {
        print('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å: ${savedFromAddress.value}');
        return;
      }
      
      final position = userLocation.value!;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      savedFromAddress.accept('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Å –±—ç–∫–∞
      final restClient = inject<RestClient>();
      final addressData = await restClient.getPlaceDetail(
        latitude: position.lat.toDouble(),
        longitude: position.lng.toDouble(),
      ).timeout(Duration(seconds: 5));
      
      if (addressData != null && addressData.isNotEmpty && addressData != "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω") {
        print('‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å —Å –±—ç–∫–∞: $addressData');
        
        // –ú–ì–ù–û–í–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º UI
        savedFromAddress.accept(addressData);
        savedFromMapboxId.accept('${position.lat};${position.lng}');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
        final prefs = inject<SharedPreferences>();
        await prefs.setString('saved_from_address', addressData);
        await prefs.setString('saved_from_coords', '${position.lat};${position.lng}');
        
      } else {
        print('‚ö†Ô∏è –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        _setFallbackAddress();
      }
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: $e');
      _setFallbackAddress();
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ SharedPreferences
  Future<void> _loadLocationFromPreferences() async {
    try {
      final prefs = inject<SharedPreferences>();
      final latitude = prefs.getDouble('latitude');
      final longitude = prefs.getDouble('longitude');
      
      if (latitude != null && longitude != null) {
        userLocation.accept(geotypes.Position(longitude, latitude));
        print('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ø–∞–º—è—Ç–∏: $latitude, $longitude');
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–∫—Ç–∞—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        userLocation.accept(geotypes.Position(51.260834, 43.693695));
        print('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–∫—Ç–∞—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: $e');
      userLocation.accept(geotypes.Position(51.260834, 43.693695));
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ fallback –∞–¥—Ä–µ—Å–∞
  void _setFallbackAddress() {
    savedFromAddress.accept('–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
    if (userLocation.value != null) {
      savedFromMapboxId.accept('${userLocation.value!.lat};${userLocation.value!.lng}');
    } else {
      savedFromMapboxId.accept('43.693695;51.260834');
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ SharedPreferences
  Future<void> _loadSavedAddresses() async {
    try {
      final prefs = inject<SharedPreferences>();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å "–æ—Ç–∫—É–¥–∞"
      final savedFromAddr = prefs.getString('saved_from_address');
      final savedFromCoords = prefs.getString('saved_from_coords');
      
      if (savedFromAddr != null && savedFromAddr.isNotEmpty && savedFromAddr != "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω") {
        savedFromAddress.accept(savedFromAddr);
        if (savedFromCoords != null && savedFromCoords.isNotEmpty) {
          savedFromMapboxId.accept(savedFromCoords);
        }
        print('üìç –ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å "–æ—Ç–∫—É–¥–∞": $savedFromAddr');
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å "–∫—É–¥–∞" 
      final savedToAddr = prefs.getString('saved_to_address');
      final savedToCoords = prefs.getString('saved_to_coords');
      
      if (savedToAddr != null && savedToAddr.isNotEmpty && savedToAddr != "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω") {
        savedToAddress.accept(savedToAddr);
        if (savedToCoords != null && savedToCoords.isNotEmpty) {
          savedToMapboxId.accept(savedToCoords);
        }
        print('üìç –ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å "–∫—É–¥–∞": $savedToAddr');
      }
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: $e');
    }
  }

  Future<int?> _checkLocation() async {
    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
      var position = userLocation.value!;
      var idshop = -1;

      // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      double aktauDistanceInMeters = Geolocator.distanceBetween(
        position.lat.toDouble(),
        position.lng.toDouble(),
        43.39,
        51.09,
      );

      // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      double zhanaOzenDistanceInMeters = Geolocator.distanceBetween(
        position.lat.toDouble(),
        position.lng.toDouble(),
        43.3412,
        52.8619,
      );

      if (aktauDistanceInMeters <= 40000) {
        idshop = 9;
      }

      if (zhanaOzenDistanceInMeters <= 40000) {
        idshop = 13;
      }
      
      if (idshop != -1) {
        showFood.accept(true);
        return idshop;
      }
    } catch (e) {
      logger.e(e);
    }
    showFood.accept(false);
    return null;
  }

  @override
  Future<void> determineLocationPermission({
    bool force = false,
  }) async {
    try {
      // print('üîç –ù–∞—á–∏–Ω–∞–µ–º determineLocationPermission...');
      
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ LocationInteractor
      final permission = await inject<LocationInteractor>().requestLocation();
      // print('üìç –ü–æ–ª—É—á–µ–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: $permission');
      
      // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ locationPermission!
      if (permission != null) {
        locationPermission.accept(permission);
        // print('‚úÖ locationPermission –æ–±–Ω–æ–≤–ª–µ–Ω: $permission');
      } else {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º denied
        locationPermission.accept(geoLocator.LocationPermission.denied);
        // print('‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º locationPermission –∫–∞–∫ denied');
        return; // –í—ã—Ö–æ–¥–∏–º –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã
      if (![geoLocator.LocationPermission.always, geoLocator.LocationPermission.whileInUse].contains(permission)) {
        // print('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: $permission');
        return;
      }
      
      // –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
      final geoLocator.Position? location = await inject<LocationInteractor>().getCurrentLocation();
      
      if (location != null) {
        userLocation.accept(
          geotypes.Position(
            location.longitude,
            location.latitude,
          ),
        );
        
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ SharedPreferences –¥–ª—è –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await inject<SharedPreferences>().setDouble('latitude', location.latitude);
        await inject<SharedPreferences>().setDouble('longitude', location.longitude);
        
        // print('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${location.latitude}, ${location.longitude}');
        
        // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É –∫–∞—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
        if (isRouteDisplayed.value != true && isMapFixed.value != true) {
          await _updateMapCamera();
        }
        
        // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        /*
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ'),
            duration: Duration(seconds: 2),
            backgroundColor: Colors.green,
          ),
        );
        */
      } else {
        // print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        final savedLat = inject<SharedPreferences>().getDouble('latitude');
        final savedLng = inject<SharedPreferences>().getDouble('longitude');
        
        if (savedLat != null && savedLng != null && savedLat != 0 && savedLng != 0) {
          userLocation.accept(
            geotypes.Position(savedLng, savedLat),
          );
          // print('üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: $savedLat, $savedLng');
        } else {
          // print('üåç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–∫—Ç–∞—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
          // –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–∫—Ç–∞—É
          userLocation.accept(
            geotypes.Position(51.260834, 43.693695),
          );
        }
      }
    } catch (e) {
      // print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏: $e');
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º denied –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      locationPermission.accept(geoLocator.LocationPermission.denied);
      userLocation.accept(
        geotypes.Position(51.260834, 43.693695),
      );
    }
  }

  @override
  void tabIndexChanged(int newTabIndex) {
    // Keep this method for backward compatibility, but simplify its behavior
    // Since we no longer have tabs, just ensure the panel is visible
    ensurePanelVisible();
  }
  
  // New method: Ensure panel is at least at its minimum state
  void ensurePanelVisible() {
    // Make sure the panel is at least at minimum height
    if (draggableScrollableController.size < 0.35) {
      draggableScrollableController.animateTo(
        0.35,
        duration: Duration(milliseconds: 300),
        curve: Curves.easeOut,
      );
    }
  }
  
  // Add a method to expand the panel fully
  void expandPanel() {
    draggableScrollableController.animateTo(
      0.92,
      duration: Duration(milliseconds: 300),
      curve: Curves.easeOut,
    );
    }
  
  // Add a method to collapse the panel
  void collapsePanel() {
    draggableScrollableController.animateTo(
      0.35,
      duration: Duration(milliseconds: 300),
      curve: Curves.easeOut,
    );
  }

  Future<void> fetchFoods() async {
    foods.loading();

    try {
      final response = await model.fetchFoods();
      foodCategories.accept(response.folders);
      foods.content(response.items);
    } on Exception catch (e) {
      logger.e(e);
    }
  }

  Future<void> fetchUserProfile() async {
    final response = await model.getUserProfile();

    me.accept(response);

    initializeSocket();
  }

  @override
  Future<void> onSubmit(DriverOrderForm form, DriverType taxi) async {
    await inject<RestClient>().createDriverOrder(body: {
      "from": form.fromAddress.value,
      "to": form.toAddress.value,
      "lng": userLocation.value?.lng,
      "lat": userLocation.value?.lat,
      "price": form.cost.value,
      "orderType": taxi.key,
      "comment": '${form.comment};${form.fromMapboxId.value};${form.toMapboxId.value}',
      "fromMapboxId": form.fromMapboxId.value,
      "toMapboxId": form.toMapboxId.value,
    });
    
    // Check if controller is attached before using it
    try {
      if (draggableScrollableController.isAttached) {
        draggableScrollableController.jumpTo(0.3);
      }
    } catch (e) {
      print('Error with draggableScrollableController: $e');
    }
    
    fetchActiveOrder();
  }

  Future<void> initializeSocket() async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      if (newOrderSocket != null) {
        if (newOrderSocket!.connected) {
          // print('–°–æ–∫–µ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
          return;
        } else {
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
          // print('–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ');
          newOrderSocket!.dispose();
          newOrderSocket = null;
        }
      }

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
      await determineLocationPermission();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (me.value == null || me.value!.id == null) {
        // print('–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ–∫–µ—Ç–∞');
        return;
      }

      // print('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${me.value!.id}');
      newOrderSocket = IO.io(
        'https://taxi.aktau-go.kz',
        <String, dynamic>{
          'transports': ['websocket'],
          'autoConnect': false,
          'force new connection': true,
          'query': {
            'userId': me.value!.id,
          },
        },
      );

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      newOrderSocket?.on(
        'orderRejected',
        (data) async {
          // print('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ orderRejected: $data');
          isOrderRejected.accept(true);
          await showModalBottomSheet(
            context: context,
            isDismissible: true,
            isScrollControlled: true,
            builder: (context) => PrimaryBottomSheet(
              contentPadding: EdgeInsets.symmetric(horizontal: 16),
              child: Column(
                children: [
                  const SizedBox(height: 10),
                  Center(
                    child: Container(
                      width: 38,
                      height: 4,
                      decoration: BoxDecoration(
                        color: greyscale30,
                        borderRadius: BorderRadius.circular(1.4),
                      ),
                    ),
                  ),
                  const SizedBox(height: 24),
                  SvgPicture.asset(icPlacemarkError),
                  const SizedBox(height: 10),
                  SizedBox(
                    width: double.infinity,
                    child: Text(
                      '–ü–æ–µ–∑–¥–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
                      style: text500Size20Greyscale90,
                    ),
                  ),
                  const SizedBox(height: 24),
                  SizedBox(
                    width: double.infinity,
                    child: PrimaryButton.primary(
                      onPressed: () async {
                        isOrderRejected.accept(false);
                        Navigator.of(context).pop();
                      },
                      text: '–ó–∞–∫—Ä—ã—Ç—å',
                      textStyle: text400Size16White,
                    ),
                  ),
                  const SizedBox(height: 24),
                ],
              ),
            ),
          );
          fetchActiveOrder();
        },
      );

      newOrderSocket?.on('orderStarted', (data) {
        // print('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ orderStarted: $data');
        fetchActiveOrder();
      });

      newOrderSocket?.on('driverArrived', (data) {
        // print('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ driverArrived: $data');
        fetchActiveOrder();
      });

      newOrderSocket?.on('rideStarted', (data) {
        // print('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ rideStarted: $data');
        fetchActiveOrder();
      });

      newOrderSocket?.on('rideEnded', (data) {
        // print('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ rideEnded: $data');
        fetchActiveOrder();
      });

      newOrderSocket?.on('orderAccepted', (data) {
        // print('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ orderAccepted: $data');
        fetchActiveOrder();
      });

      newOrderSocket?.on('driverLocation', (data) {
        // print('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ driverLocation');
        geotypes.Position point;
        if (data['lat'] is String) {
          point = geotypes.Position(double.tryParse(data['lng']) ?? 0, double.tryParse(data['lat']) ?? 0);
        } else {
          point = geotypes.Position(data['lng'], data['lat']);
        }
        driverLocation.accept(point);
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      newOrderSocket?.onDisconnect((_) {
        // print('–°–æ–∫–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω: $_, –¥–ª—è tenant (–∫–ª–∏–µ–Ω—Ç–∞) –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
        // –¢–æ–ª—å–∫–æ –¥–ª—è tenant (–∫–ª–∏–µ–Ω—Ç–∞) –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        initializeSocket();
      });
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      newOrderSocket?.connect();
      // print('–°–æ–∫–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (tenant)');
    } on Exception catch (e) {
      // print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–∫–µ—Ç–∞: $e');
      logger.e(e);
    }
  }

  @override
  void dispose() {
    // –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–∞
    print('–û—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç –≤ dispose');
    disconnectWebsocket();
    super.dispose();
  }

  Future<void> disconnectWebsocket() async {
    if (newOrderSocket != null) {
      print('–û—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞');
      try {
        newOrderSocket!.disconnect();
        // –í–∞–∂–Ω–æ: –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —è–≤–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        newOrderSocket!.clearListeners();
        newOrderSocket = null;
      } catch (e) {
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–æ–∫–µ—Ç–∞: $e');
      }
    }
  }

  @override
  Future<void> fetchActiveOrder() async {
    // print('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞...');
    try {
      final response = await model.getMyClientActiveOrder();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–∞
      if (response.order != null) {
        // print('–ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑: ${response.order!.id}');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∑–∞–∫–∞–∑ –∏ –Ω—É–∂–Ω–æ –ª–∏ –µ–≥–æ –æ—Ü–µ–Ω–∏—Ç—å
      if (response.order?.orderStatus == 'COMPLETED' &&
          response.order?.rating == null &&
          rateOpened.value == false) {
          // print('–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –Ω–µ –æ—Ü–µ–Ω–µ–Ω. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –æ—Ü–µ–Ω–∫–∏.');
          
        rateOpened.accept(true);
        await showModalBottomSheet(
          context: context,
          isDismissible: true,
          isScrollControlled: true,
          builder: (context) => PrimaryBottomSheet(
            contentPadding: EdgeInsets.symmetric(horizontal: 16),
            child: Column(
              children: [
                const SizedBox(height: 10),
                Center(
                  child: Container(
                    width: 38,
                    height: 4,
                    decoration: BoxDecoration(
                      color: greyscale30,
                      borderRadius: BorderRadius.circular(1.4),
                    ),
                  ),
                ),
                const SizedBox(height: 24),
                SizedBox(
                  width: double.infinity,
                  child: Text(
                    '–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É',
                    style: text500Size20Greyscale90,
                  ),
                ),
                const SizedBox(height: 24),
                SizedBox(
                  width: double.infinity,
                  child: StateNotifierBuilder(
                    listenableState: rateTaxi,
                    builder: (
                      context,
                      double? rateTaxi,
                    ) {
                      return Center(
                        child: RatingStars(
                          value: rateTaxi ?? 0,
                          onValueChanged: (value) {
                            this.rateTaxi.accept(value);
                          },
                          starBuilder: (
                            index,
                            color,
                          ) =>
                              index >= (rateTaxi ?? 0)
                                  ? SvgPicture.asset('assets/icons/star.svg')
                                  : SvgPicture.asset(
                                      'assets/icons/star.svg',
                                      color: color,
                                    ),
                          starCount: 5,
                          starSize: 48,
                          maxValue: 5,
                          starSpacing: 16,
                          maxValueVisibility: false,
                          valueLabelVisibility: false,
                          animationDuration: Duration(
                            milliseconds: 1000,
                          ),
                          starOffColor: greyscale50,
                          starColor: primaryColor,
                        ),
                      );
                    },
                  ),
                ),
                const SizedBox(height: 24),
                Container(
                  height: 48,
                  margin: const EdgeInsets.only(bottom: 16),
                  child: RoundedTextField(
                    backgroundColor: Colors.white,
                    controller: commentTextController,
                    hintText: '–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
                    decoration: InputDecoration(
                      contentPadding: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 14,
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 24),
                SizedBox(
                  width: double.infinity,
                  child: PrimaryButton.primary(
                    onPressed: () async {
                      await inject<RestClient>().makeReview(body: {
                        "orderRequestId": response.order!.id,
                        "comment": commentTextController.text,
                        "rating": rateTaxi.value,
                      });
                      Navigator.of(context).pop();
                      fetchActiveOrder();
                    },
                    text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
                    textStyle: text400Size16White,
                  ),
                ),
                const SizedBox(height: 24),
              ],
            ),
          ),
        );
        rateOpened.accept(false);
      }
        
        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
      if (response.order?.orderStatus != 'COMPLETED') {
        activeOrder.accept(response);
        } else {
          activeOrder.accept(null);
      }
      } else {
        // print('–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      activeOrder.accept(null);
      }
    } catch (e) {
      // print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: $e');
      activeOrder.accept(null);
    }
  }

  @override
  Future<void> cancelActiveClientOrder() async {
    await showDialog(
      context: context,
      builder: (context) => Center(
        child: Container(
          padding: const EdgeInsets.symmetric(vertical: 24, horizontal: 16),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(16),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              SizedBox(
                width: double.infinity,
                child: Text(
                  '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?',
                  style: text400Size16Greyscale90,
                ),
              ),
              const SizedBox(height: 24),
              Row(
                children: [
                  Expanded(
                    child: PrimaryButton.secondary(
                      text: '–ù–∞–∑–∞–¥',
                      onPressed: Navigator.of(context).pop,
                    ),
                  ),
                  const SizedBox(width: 10),
                  Expanded(
                    child: PrimaryButton.primary(
                      text: '–û—Ç–º–µ–Ω–∏—Ç—å',
                      textStyle: text400Size16White,
                      onPressed: () async {
                        Navigator.of(context).pop();
                        await model.rejectOrderByClientRequest(
                          orderRequestId: activeOrder.value!.order!.id!,
                        );
                        fetchActiveOrder();
                      },
                    ),
                  ),
                ],
              )
            ],
          ),
        ),
      ),
    );
  }

  @override
  final DraggableScrollableController draggableScrollableController =
      DraggableScrollableController();

  @override
  void getMyLocation() {
    _updateMapCamera();
  }

  @override
  void scrollDraggableSheetDown() {
    draggableScrollableController.jumpTo(1);
  }

  @override
  void onMapTapped(geotypes.Position point) {
    model.onMapTapped(point);
  }

  @override
  MapboxMap? get mapboxMapController => _mapboxMapController;

  @override
  void setMapboxController(MapboxMap controller) {
    _mapboxMapController = controller;
  }
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –∫–∞—Ä—Ç—ã
  Future<void> _updateMapCamera() async {
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É –µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–ª–∏ –∫–∞—Ä—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞
    if (isRouteDisplayed.value == true || isMapFixed.value == true) {
      print('–ö–∞–º–µ—Ä–∞ –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –º–∞—Ä—à—Ä—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–ª–∏ –∫–∞—Ä—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞');
      return;
    }
    
    if (_mapboxMapController != null && userLocation.value != null) {
      try {
        await _mapboxMapController!.flyTo(
          CameraOptions(
            center: Point(coordinates: userLocation.value!),
            zoom: 16.0,
          ),
          MapAnimationOptions(duration: 1000),
        );
        print('–ö–∞–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
      } catch (e) {
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã: $e');
      }
    }
  }
  
  @override
  void setRouteDisplayed(bool displayed) {
    isRouteDisplayed.accept(displayed);
  }
  
  @override
  void toggleMapFixed() async {
    isMapFixed.accept(!(isMapFixed.value ?? false));
    await _applyMapGestureSettings();
  }
  
  @override
  void setMapFixed(bool fixed) async {
    isMapFixed.accept(fixed);
    await _applyMapGestureSettings();
  }
  
  // Apply map gesture settings based on fixed state
  Future<void> _applyMapGestureSettings() async {
    if (_mapboxMapController == null) {
      print('Cannot apply map gesture settings: mapboxMapController is null');
      return;
    }
    
    try {
      final bool fixed = isMapFixed.value ?? false;
      
      // Configure gestures based on fixed state
      await _mapboxMapController!.gestures.updateSettings(
        GesturesSettings(
          rotateEnabled: !fixed,
          scrollEnabled: !fixed,
          pitchEnabled: !fixed,
          doubleTapToZoomInEnabled: !fixed,
          doubleTouchToZoomOutEnabled: !fixed,
          quickZoomEnabled: !fixed,
          pinchToZoomEnabled: !fixed,
        ),
      );
      
      print('Map gestures ${fixed ? 'disabled' : 'enabled'}');
    } catch (e) {
      print('Error applying map gesture settings: $e');
    }
  }

  @override
  Future<void> displayRouteOnMainMap(geotypes.Position fromPosition, geotypes.Position toPosition) async {
    try {
      print('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –∫–∞—Ä—Ç–µ...');
      print('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã from: ${fromPosition.lat}, ${fromPosition.lng}');
      print('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã to: ${toPosition.lat}, ${toPosition.lng}');
      
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
      final routeKey = '${fromPosition.lat.toStringAsFixed(6)},${fromPosition.lng.toStringAsFixed(6)}-${toPosition.lat.toStringAsFixed(6)},${toPosition.lng.toStringAsFixed(6)}';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –º–∞—Ä—à—Ä—É—Ç–æ–≤
      Map<String, dynamic>? directions;
      if (_routeCache.containsKey(routeKey)) {
        print('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è $routeKey');
        directions = _routeCache[routeKey];
      } else {
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –∏–∑ API Mapbox —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ
        print('üåê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –æ—Ç Mapbox API...');
        final mapboxApi = inject<MapboxApi>();
        directions = await mapboxApi.getDirections(
          fromLat: fromPosition.lat.toDouble(),
          fromLng: fromPosition.lng.toDouble(),
          toLat: toPosition.lat.toDouble(),
          toLng: toPosition.lng.toDouble(),
        );
        
        if (directions != null) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
          _routeCache[routeKey] = directions;
          print('üíæ –ú–∞—Ä—à—Ä—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à');
          
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (–º–∞–∫—Å–∏–º—É–º 10 –º–∞—Ä—à—Ä—É—Ç–æ–≤)
          if (_routeCache.length > 10) {
            final oldestKey = _routeCache.keys.first;
            _routeCache.remove(oldestKey);
            print('üßπ –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –º–∞—Ä—à—Ä—É—Ç –∏–∑ –∫—ç—à–∞: $oldestKey');
          }
        }
      }
      
      if (directions == null) {
        print('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –æ—Ç API: directions is null');
        return;
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ –º–∞—Ä—à—Ä—É—Ç —á—Ç–æ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
      if (_lastRouteKey == routeKey) {
        print('üîÑ –¢–æ—Ç –∂–µ –º–∞—Ä—à—Ä—É—Ç —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        return;
      }
      
      _lastRouteKey = routeKey;
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
      await clearRoute();
      
      // –°–æ–∑–¥–∞–µ–º GeoJSON LineString –∏–∑ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
      if (!directions.containsKey('routes') || directions['routes'] == null || directions['routes'].isEmpty) {
        print('–í –æ—Ç–≤–µ—Ç–µ API –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤');
        return;
      }
      
      final routeGeometry = directions['routes'][0]['geometry'];
      print('–ì–µ–æ–º–µ—Ç—Ä–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: ${routeGeometry.toString().substring(0, min(routeGeometry.toString().length, 100))}...');
      
      final lineString = {
        "type": "Feature",
        "geometry": routeGeometry,
        "properties": {}
      };
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
      final jsonData = json.encode({
        "type": "FeatureCollection",
        "features": [lineString]
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
      await _mapboxMapController!.style.addSource(GeoJsonSource(
        id: 'main-route-source',
        data: jsonData,
      ));
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –∫–æ–Ω—Ç—É—Ä–∞ (–±–µ–ª–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏)
      await _mapboxMapController!.style.addLayer(LineLayer(
        id: 'main-route-outline-layer',
        sourceId: 'main-route-source',
        lineColor: Colors.white.value,
        lineWidth: 8.0,
        lineOpacity: 0.9,
      ));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π –ª–∏–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
      await _mapboxMapController!.style.addLayer(LineLayer(
        id: 'main-route-layer',
        sourceId: 'main-route-source',
        lineColor: primaryColor.value,
        lineWidth: 5.0,
        lineOpacity: 0.9,
      ));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–µ–∫
      try {
        // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ GeoJSON –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ A –∏ B
        final markersJsonA = {
          "type": "FeatureCollection",
          "features": [
            {
              "type": "Feature",
              "geometry": {
                "type": "Point",
                "coordinates": [fromPosition.lng, fromPosition.lat]
              },
              "properties": {
                "icon": "point_a"
              }
            }
          ]
        };

        final markersJsonB = {
          "type": "FeatureCollection",
          "features": [
            {
              "type": "Feature",
              "geometry": {
                "type": "Point",
                "coordinates": [toPosition.lng, toPosition.lat]
              },
              "properties": {
                "icon": "point_b"
              }
            }
          ]
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
        await _mapboxMapController!.style.addSource(GeoJsonSource(
          id: 'main-markers-source-a',
          data: json.encode(markersJsonA),
        ));
        
        await _mapboxMapController!.style.addSource(GeoJsonSource(
          id: 'main-markers-source-b',
          data: json.encode(markersJsonB),
        ));
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ A (–º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä)
        await _mapboxMapController!.style.addLayer(SymbolLayer(
          id: 'main-markers-layer-a',
          sourceId: 'main-markers-source-a',
          iconImage: "point_a",
          iconSize: 0.3, // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ A
          iconAnchor: IconAnchor.BOTTOM,
          minZoom: 0, // –í–∏–¥–Ω–æ –Ω–∞ –ª—é–±–æ–º –º–∞—Å—à—Ç–∞–±–µ
          maxZoom: 22, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑—É–º
          iconAllowOverlap: true, // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –∏–∫–æ–Ω–æ–∫
          symbolSortKey: 10, // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ));
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ B (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
        await _mapboxMapController!.style.addLayer(SymbolLayer(
          id: 'main-markers-layer-b',
          sourceId: 'main-markers-source-b',
          iconImage: "point_b",
          iconSize: 0.3, // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ B
          iconAnchor: IconAnchor.BOTTOM,
          minZoom: 0, // –í–∏–¥–Ω–æ –Ω–∞ –ª—é–±–æ–º –º–∞—Å—à—Ç–∞–±–µ
          maxZoom: 22, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑—É–º
          iconAllowOverlap: true, // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –∏–∫–æ–Ω–æ–∫
          symbolSortKey: 11, // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ));
      } catch (e) {
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤: $e');
      }
      
      // –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
      final bounds = directions['routes'][0]['bounds'];
      if (bounds != null) {
        final southwest = bounds[0];
        final northeast = bounds[1];
        
        final camera = await _mapboxMapController!.cameraForCoordinateBounds(
          CoordinateBounds(
            southwest: Point(coordinates: geotypes.Position(southwest[0], southwest[1])),
            northeast: Point(coordinates: geotypes.Position(northeast[0], northeast[1])),
            infiniteBounds: false
          ),
          MbxEdgeInsets(top: 150, left: 50, bottom: 350, right: 50),
          null, // bearing
          null, // pitch
          null, // maxZoom
          null, // minZoom
        );
        
        await _mapboxMapController!.flyTo(
          camera,
          MapAnimationOptions(duration: 1000),
        );
      }
      
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–∞—Ä—Ç–æ–π, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ñ–∏–∫—Å–∞—Ü–∏–∏
      if (isMapFixed.value == true) {
        await _applyMapGestureSettings();
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
      setRouteDisplayed(true);
      
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: $e');
    }
  }

  @override
  Future<void> clearRoute() async {
    if (_mapboxMapController == null) {
      print('Cannot clear route: mapboxMapController is null');
      return;
    }
    
    try {
      print('Clearing route from map...');
      
      // –û—á–∏—â–∞–µ–º –∫—ç—à —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
      _lastRouteKey = null;
      print('üßπ –û—á–∏—â–µ–Ω –∫—ç—à —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞');
      
      // Remove existing route layers and sources
      for (final layerId in ['main-route-layer', 'main-route-outline-layer', 'main-markers-layer', 'main-markers-layer-a', 'main-markers-layer-b']) {
        if (await _mapboxMapController!.style.styleLayerExists(layerId)) {
          await _mapboxMapController!.style.removeStyleLayer(layerId);
          print('Removed layer $layerId');
        }
      }
      
      for (final sourceId in ['main-route-source', 'main-markers-source', 'main-markers-source-a', 'main-markers-source-b']) {
        if (await _mapboxMapController!.style.styleSourceExists(sourceId)) {
          await _mapboxMapController!.style.removeStyleSource(sourceId);
          print('Removed source $sourceId');
        }
      }
      
      // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
      isRouteDisplayed.accept(false);
      isMapFixed.accept(false);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ä—Ç–æ–π (—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º)
      await _applyMapGestureSettings();
      
      // –î–û–ë–ê–í–õ–Ø–ï–ú: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await _updateMapCamera();
      
      print('Route cleared successfully and map unlocked');
    } catch (e) {
      print('Error clearing route: $e');
    }
  }

  @override
  Future<void> createDriverOrder(DriverOrderForm form) async {
    try {
      print('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: ${form.toString()}');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      saveOrderAddresses(
        fromAddress: form.fromAddress.value ?? '',
        toAddress: form.toAddress.value ?? '',
        fromMapboxId: form.fromMapboxId.value ?? '',
        toMapboxId: form.toMapboxId.value ?? '',
      );
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
      final orderType = currentTab.value == 0 ? DriverType.TAXI : DriverType.INTERCITY_TAXI;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await onSubmit(form, orderType);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
      await fetchActiveOrder();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: $e');
      rethrow; // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ UI
    }
  }

  @override
  void saveOrderAddresses({
    required String fromAddress,
    required String toAddress,
    required String fromMapboxId,
    required String toMapboxId,
  }) {
    print('üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∑–∞–∫–∞–∑–∞...');
    
    // –†–ï–§–ê–ö–¢–û–†: –ú–ì–ù–û–í–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
    final validFromAddress = fromAddress.isNotEmpty ? fromAddress : "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è";
    final validToAddress = toAddress.isNotEmpty ? toAddress : "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    final coordinatesChanged = (savedFromMapboxId.value != fromMapboxId || 
                               savedToMapboxId.value != toMapboxId);
    
    // –ú–ì–ù–û–í–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    savedFromAddress.accept(validFromAddress);
    savedToAddress.accept(validToAddress);
    savedFromMapboxId.accept(fromMapboxId);
    savedToMapboxId.accept(toMapboxId);
    
    print('‚úÖ –ê–¥—Ä–µ—Å–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ UI');
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SharedPreferences
    _saveAddressesToPreferences(validFromAddress, validToAddress, fromMapboxId, toMapboxId);
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if (coordinatesChanged && fromMapboxId.isNotEmpty && toMapboxId.isNotEmpty) {
      _displayRouteIfNeeded(fromMapboxId, toMapboxId);
    }
  }

  // –†–ï–§–ê–ö–¢–û–†: –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
  void _displayRouteIfNeeded(String fromMapboxId, String toMapboxId) {
    try {
      final fromParts = fromMapboxId.split(';');
      final toParts = toMapboxId.split(';');
      
      if (fromParts.length >= 2 && toParts.length >= 2) {
        final fromLat = double.tryParse(fromParts[0]);
        final fromLng = double.tryParse(fromParts[1]);
        final toLat = double.tryParse(toParts[0]);
        final toLng = double.tryParse(toParts[1]);
        
        if (fromLat != null && fromLng != null && toLat != null && toLng != null) {
          print('üó∫Ô∏è –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ');
          
          // –§–∏–∫—Å–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞
          setMapFixed(true);
          
          // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
          displayRouteOnMainMap(
            geotypes.Position(fromLng, fromLat),
            geotypes.Position(toLng, toLat),
          );
        }
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: $e');
    }
  }

  // –†–ï–§–ê–ö–¢–û–†: –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ SharedPreferences
  Future<void> _saveAddressesToPreferences(String fromAddress, String toAddress, String fromMapboxId, String toMapboxId) async {
    try {
      final prefs = inject<SharedPreferences>();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
      if (_isValidAddress(fromAddress)) {
        await prefs.setString('saved_from_address', fromAddress);
        if (fromMapboxId.isNotEmpty) {
          await prefs.setString('saved_from_coords', fromMapboxId);
        }
        print('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∞–¥—Ä–µ—Å "–æ—Ç–∫—É–¥–∞": $fromAddress');
      }
      
      if (_isValidAddress(toAddress)) {
        await prefs.setString('saved_to_address', toAddress);
        if (toMapboxId.isNotEmpty) {
          await prefs.setString('saved_to_coords', toMapboxId);
        }
        print('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∞–¥—Ä–µ—Å "–∫—É–¥–∞": $toAddress');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $e');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞
  bool _isValidAddress(String address) {
    return address.isNotEmpty && 
           address != "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è" && 
           address != "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è" && 
           address != "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" &&
           address != "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...";
  }

  // –†–ï–§–ê–ö–¢–û–†: –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
  @override
  void forceUpdateAddresses() {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º UI –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
    if (savedFromAddress.value != null) {
      final currentFrom = savedFromAddress.value!;
      savedFromAddress.accept(currentFrom);
    }
    
    if (savedToAddress.value != null) {
      final currentTo = savedToAddress.value!;
      savedToAddress.accept(currentTo);
    }
    
    print('‚ö° UI –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
  }
}
