import 'dart:async';
import 'package:socket_io_client/socket_io_client.dart' as IO;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:geolocator/geolocator.dart';
import 'package:logger/logger.dart';
import '../domains/user/user_domain.dart';
import '../utils/utils.dart';

enum SocketConnectionType { client, driver }

enum SocketEventType {
  // Client events
  orderRejected,
  orderCancelledByClient,
  orderCancelledByDriver,
  orderStarted,
  driverArrived,
  rideStarted,
  rideEnded,
  orderAccepted,
  driverLocation,
  orderSync, // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  driverInfo, // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ
  
  // Driver events
  newOrder,
  orderTaken,
  orderCancelledByClientForDriver, // –î–ª—è –≤–æ–¥–∏—Ç–µ–ª—è - –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑
  orderDeleted,
  eventAck,
  clientInfo, // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
}

class WebSocketService {
  static final WebSocketService _instance = WebSocketService._internal();
  factory WebSocketService() => _instance;
  WebSocketService._internal();

  final Logger _logger = Logger();
  
  // Separate sockets for different user types
  IO.Socket? _clientSocket;
  IO.Socket? _driverSocket;
  
  // Connection states
  bool _isClientConnected = false;
  bool _isDriverConnected = false;
  
  // Connection in progress flags to prevent duplicate connections
  bool _clientConnecting = false;
  bool _driverConnecting = false;
  
  // Reconnection timers
  Timer? _clientReconnectTimer;
  Timer? _driverReconnectTimer;
  
  // Heartbeat timers for connection health check
  Timer? _clientHeartbeatTimer;
  Timer? _driverHeartbeatTimer;
  
  // Event callbacks
  final Map<SocketEventType, List<Function(dynamic)>> _eventCallbacks = {};
  
  // Connection state callbacks
  final List<Function(bool)> _clientConnectionCallbacks = [];
  final List<Function(bool)> _driverConnectionCallbacks = [];
  
  // Singleton getters
  bool get isClientConnected => _isClientConnected;
  bool get isDriverConnected => _isDriverConnected;
  
  // Initialize socket connection based on user role
  Future<void> initializeConnection({
    required SocketConnectionType type,
    required UserDomain user,
    Position? position,
  }) async {
    try {
      final sessionId = inject<SharedPreferences>().getString('access_token');
      
      if (sessionId == null || sessionId.isEmpty) {
        _logger.e('‚ùå Access token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–æ–∫–µ—Ç');
        return;
      }
      
      if (user.id.isEmpty) {
        _logger.e('‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ —Å–æ–∫–µ—Ç —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∏–ª–∏ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      switch (type) {
        case SocketConnectionType.client:
          if (_isClientConnected) {
            _logger.i('‚úÖ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
            return;
          }
          if (_clientConnecting) {
            _logger.i('‚è≥ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å');
            return;
          }
          await _initializeClientSocket(user, sessionId);
          break;
        case SocketConnectionType.driver:
          if (_isDriverConnected) {
            _logger.i('‚úÖ –°–æ–∫–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
            return;
          }
          if (_driverConnecting) {
            _logger.i('‚è≥ –°–æ–∫–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è —É–∂–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å');
            return;
          }
          if (position == null) {
            _logger.e('‚ùå –ü–æ–∑–∏—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è');
            return;
          }
          await _initializeDriverSocket(user, sessionId, position);
          break;
      }
    } catch (e) {
      _logger.e('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket: $e');
    }
  }
  
  // Initialize client socket
  Future<void> _initializeClientSocket(UserDomain user, String sessionId) async {
    _clientConnecting = true;
    _clientReconnectTimer?.cancel(); // –û—Ç–º–µ–Ω—è–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    
    try {
      await _disconnectClientSocket();
      
      _logger.i('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–æ–∫–µ—Ç–∞...');
      
      _clientSocket = IO.io(
        'https://taxi.aktau-go.kz',
        <String, dynamic>{
          'transports': ['websocket', 'polling'],
          'autoConnect': false,
          'forceNew': true,
          'timeout': 10000, // –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥
          'reconnection': false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ socket.io
          'reconnectionAttempts': 0,
          'upgrade': true, // –†–∞–∑—Ä–µ—à–∞–µ–º –∞–ø–≥—Ä–µ–π–¥ —Å polling –Ω–∞ websocket
          'rememberUpgrade': true, // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ websocket
          'query': {
            'sessionId': sessionId,
            'userId': user.id,
            'userType': 'client',
            'timestamp': DateTime.now().millisecondsSinceEpoch.toString(),
          },
        },
      );
      
      _setupClientEventHandlers();
      _clientSocket!.connect();
      
      _logger.i('üîå –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...');
    } catch (e) {
      _logger.e('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–æ–∫–µ—Ç–∞: $e');
      _clientConnecting = false;
    }
  }
  
  // Initialize driver socket
  Future<void> _initializeDriverSocket(UserDomain user, String sessionId, Position position) async {
    _driverConnecting = true;
    _driverReconnectTimer?.cancel(); // –û—Ç–º–µ–Ω—è–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    
    try {
      await _disconnectDriverSocket();
      
      _logger.i('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∫–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è...');
      
      _driverSocket = IO.io(
        'https://taxi.aktau-go.kz',
        <String, dynamic>{
          'transports': ['websocket', 'polling'],
          'autoConnect': false,
          'forceNew': true,
          'timeout': 10000, // –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥
          'reconnection': false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ socket.io
          'reconnectionAttempts': 0,
          'upgrade': true, // –†–∞–∑—Ä–µ—à–∞–µ–º –∞–ø–≥—Ä–µ–π–¥ —Å polling –Ω–∞ websocket
          'rememberUpgrade': true, // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ websocket
          'query': {
            'sessionId': sessionId,
            'driverId': user.id,
            'userType': 'driver',
            'lat': position.latitude.toString(),
            'lng': position.longitude.toString(),
            'timestamp': DateTime.now().millisecondsSinceEpoch.toString(),
          },
        },
      );
      
      _setupDriverEventHandlers();
      _driverSocket!.connect();
      
      _logger.i('üîå –°–æ–∫–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...');
    } catch (e) {
      _logger.e('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–∫–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è: $e');
      _driverConnecting = false;
    }
  }
  
  // Setup client event handlers
  void _setupClientEventHandlers() {
    if (_clientSocket == null) return;
    
    _clientSocket!.clearListeners();
    
    // Connection events
    _clientSocket!.onConnect((_) {
      _logger.i('‚úÖ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
      _isClientConnected = true;
      _clientConnecting = false;
      _clientReconnectTimer?.cancel();
      _startClientHeartbeat();
      _notifyClientConnectionCallbacks(true);
    });
    
    _clientSocket!.onDisconnect((reason) {
      _logger.w('üîå –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω: $reason');
      _isClientConnected = false;
      _clientConnecting = false;
      _stopClientHeartbeat();
      _notifyClientConnectionCallbacks(false);
      
      // –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
      if (reason != 'io client disconnect' && reason != 'transport close' && reason != 'client namespace disconnect') {
        _logger.i('üîÑ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–æ–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
        _clientReconnectTimer?.cancel();
        _clientReconnectTimer = Timer(Duration(seconds: 3), () {
          if (!_isClientConnected && !_clientConnecting) {
            _logger.i('üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–æ–∫–µ—Ç–∞...');
            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            _clientSocket?.dispose();
            _clientSocket = null;
            // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            _logger.i('üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–æ–∫–µ—Ç–∞');
          }
        });
      }
    });
    
    _clientSocket!.onConnectError((error) {
      _logger.e('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–æ–∫–µ—Ç–∞: $error');
      _isClientConnected = false;
      _clientConnecting = false;
      _notifyClientConnectionCallbacks(false);
    });
    
    // Client-specific events
    _clientSocket!.on('orderRejected', (data) {
      _logger.i('üì¶ Client: orderRejected');
      _notifyEventCallbacks(SocketEventType.orderRejected, data);
    });
    
    _clientSocket!.on('orderCancelledByClient', (data) {
      _logger.i('üì¶ Client: orderCancelledByClient');
      _notifyEventCallbacks(SocketEventType.orderCancelledByClient, data);
    });
    
    _clientSocket!.on('orderCancelledByDriver', (data) {
      _logger.i('üì¶ Client: orderCancelledByDriver');
      _notifyEventCallbacks(SocketEventType.orderCancelledByDriver, data);
    });
    
    _clientSocket!.on('orderStarted', (data) {
      _logger.i('üì¶ Client: orderStarted');
      _notifyEventCallbacks(SocketEventType.orderStarted, data);
    });
    
    _clientSocket!.on('driverArrived', (data) {
      _logger.i('üì¶ Client: driverArrived');
      _notifyEventCallbacks(SocketEventType.driverArrived, data);
    });
    
    _clientSocket!.on('rideStarted', (data) {
      _logger.i('üì¶ Client: rideStarted');
      _notifyEventCallbacks(SocketEventType.rideStarted, data);
    });
    
    _clientSocket!.on('rideEnded', (data) {
      _logger.i('üì¶ Client: rideEnded');
      _notifyEventCallbacks(SocketEventType.rideEnded, data);
    });
    
    _clientSocket!.on('orderAccepted', (data) {
      _logger.i('üì¶ Client: orderAccepted');
      _notifyEventCallbacks(SocketEventType.orderAccepted, data);
    });
    
    _clientSocket!.on('driverLocation', (data) {
      _logger.i('üì¶ Client: driverLocation');
      _notifyEventCallbacks(SocketEventType.driverLocation, data);
    });
    
    _clientSocket!.on('pong', (data) {
      _logger.d('üíì Client: pong received');
    });
    
    _clientSocket!.on('orderSync', (data) {
      _logger.i('üì¶ Client: orderSync');
      _notifyEventCallbacks(SocketEventType.orderSync, data);
    });
    
    _clientSocket!.on('driverInfo', (data) {
      _logger.i('üì¶ Client: driverInfo');
      _notifyEventCallbacks(SocketEventType.driverInfo, data);
    });
  }
  
  // Setup driver event handlers
  void _setupDriverEventHandlers() {
    if (_driverSocket == null) return;
    
    _driverSocket!.clearListeners();
    
    // Connection events
    _driverSocket!.onConnect((_) {
      _logger.i('‚úÖ –°–æ–∫–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω');
      _isDriverConnected = true;
      _driverConnecting = false;
      _driverReconnectTimer?.cancel();
      _startDriverHeartbeat();
      _notifyDriverConnectionCallbacks(true);
    });
    
    _driverSocket!.onDisconnect((reason) {
      _logger.w('üîå –°–æ–∫–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–∫–ª—é—á–µ–Ω: $reason');
      _isDriverConnected = false;
      _driverConnecting = false;
      _stopDriverHeartbeat();
      _notifyDriverConnectionCallbacks(false);
      
      // –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö
      if (reason != 'io client disconnect' && reason != 'transport close' && reason != 'client namespace disconnect') {
        _logger.i('üîÑ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∫–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
        _driverReconnectTimer?.cancel();
        _driverReconnectTimer = Timer(Duration(seconds: 5), () {
          if (!_isDriverConnected && !_driverConnecting) {
            _logger.i('üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∫–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è...');
            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            _driverSocket?.dispose();
            _driverSocket = null;
            // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            _logger.i('üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∫–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è');
          }
        });
      }
    });
    
    _driverSocket!.onConnectError((error) {
      _logger.e('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ–∫–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è: $error');
      _isDriverConnected = false;
      _driverConnecting = false;
      _notifyDriverConnectionCallbacks(false);
    });
    
    // Driver-specific events
    _driverSocket!.on('newOrder', (data) {
      _logger.i('üì¶ Driver: newOrder');
      _notifyEventCallbacks(SocketEventType.newOrder, data);
    });
    
    _driverSocket!.on('orderTaken', (data) {
      _logger.i('üì¶ Driver: orderTaken');
      _notifyEventCallbacks(SocketEventType.orderTaken, data);
    });
    
    
    _driverSocket!.on('orderCancelledByClient', (data) {
      _logger.i('üì¶ Driver: orderCancelledByClient');
      _notifyEventCallbacks(SocketEventType.orderCancelledByClientForDriver, data);
    });
    
    _driverSocket!.on('orderDeleted', (data) {
      _logger.i('üì¶ Driver: orderDeleted');
      _notifyEventCallbacks(SocketEventType.orderDeleted, data);
    });
    
    _driverSocket!.on('eventAck', (data) {
      _logger.i('üì¶ Driver: eventAck');
      _notifyEventCallbacks(SocketEventType.eventAck, data);
    });
    
    _driverSocket!.on('pong', (data) {
      _logger.d('üíì Driver: pong received');
    });
    
    _driverSocket!.on('orderSync', (data) {
      _logger.i('üì¶ Driver: orderSync');
      _notifyEventCallbacks(SocketEventType.orderSync, data);
    });
    
    _driverSocket!.on('clientInfo', (data) {
      _logger.i('üì¶ Driver: clientInfo');
      _notifyEventCallbacks(SocketEventType.clientInfo, data);
    });
  }
  
  // Event subscription
  void addEventListener(SocketEventType eventType, Function(dynamic) callback) {
    if (!_eventCallbacks.containsKey(eventType)) {
      _eventCallbacks[eventType] = [];
    }
    _eventCallbacks[eventType]!.add(callback);
  }
  
  void removeEventListener(SocketEventType eventType, Function(dynamic) callback) {
    _eventCallbacks[eventType]?.remove(callback);
  }
  
  void clearEventListeners(SocketEventType eventType) {
    _eventCallbacks[eventType]?.clear();
  }
  
  // Connection state subscription
  void addClientConnectionListener(Function(bool) callback) {
    _clientConnectionCallbacks.add(callback);
  }
  
  void addDriverConnectionListener(Function(bool) callback) {
    _driverConnectionCallbacks.add(callback);
  }
  
  void removeClientConnectionListener(Function(bool) callback) {
    _clientConnectionCallbacks.remove(callback);
  }
  
  void removeDriverConnectionListener(Function(bool) callback) {
    _driverConnectionCallbacks.remove(callback);
  }
  
  // Emit events
  void emitDriverEvent(String event, Map<String, dynamic> data) {
    if (_driverSocket?.connected == true) {
      _driverSocket!.emit(event, data);
      _logger.i('üì§ Driver emit: $event');
    } else {
      _logger.w('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $event');
    }
  }
  
  void emitClientEvent(String event, Map<String, dynamic> data) {
    if (_clientSocket?.connected == true) {
      _clientSocket!.emit(event, data);
      _logger.i('üì§ Client emit: $event');
    } else {
      _logger.w('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $event');
    }
  }
  
  // Update driver location
  void updateDriverLocation(Position position) {
    emitDriverEvent('driverLocationUpdate', {
      'lat': position.latitude,
      'lng': position.longitude,
      'timestamp': DateTime.now().millisecondsSinceEpoch,
    });
  }
  
  // Driver status management
  void setDriverOnline() {
    emitDriverEvent('driverOnline', {
      'timestamp': DateTime.now().millisecondsSinceEpoch,
    });
  }
  
  void setDriverOffline() {
    emitDriverEvent('driverOffline', {
      'timestamp': DateTime.now().millisecondsSinceEpoch,
    });
  }
  
  // Disconnect methods
  Future<void> _disconnectClientSocket() async {
    _clientReconnectTimer?.cancel();
    _clientReconnectTimer = null;
    _clientConnecting = false;
    
    if (_clientSocket != null) {
      _logger.i('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–æ–∫–µ—Ç–∞');
      _clientSocket!.clearListeners();
      _clientSocket!.disconnect();
      _clientSocket!.dispose();
      _clientSocket = null;
      _isClientConnected = false;
    }
  }
  
  Future<void> _disconnectDriverSocket() async {
    _driverReconnectTimer?.cancel();
    _driverReconnectTimer = null;
    _driverConnecting = false;
    
    if (_driverSocket != null) {
      _logger.i('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∫–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è');
      
      // –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å driverOffline - backend –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ—Ç –∏–∑ –æ–Ω–ª–∞–π–Ω –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
      
      _driverSocket!.clearListeners();
      _driverSocket!.disconnect();
      _driverSocket!.dispose();
      _driverSocket = null;
      _isDriverConnected = false;
    }
  }
  
  // Public disconnect methods
  Future<void> disconnectClient() async {
    await _disconnectClientSocket();
    _notifyClientConnectionCallbacks(false);
  }
  
  Future<void> disconnectDriver() async {
    await _disconnectDriverSocket();
    _notifyDriverConnectionCallbacks(false);
  }
  
  Future<void> disconnectAll() async {
    await _disconnectClientSocket();
    await _disconnectDriverSocket();
    _notifyClientConnectionCallbacks(false);
    _notifyDriverConnectionCallbacks(false);
  }
  
  // Notification helpers
  void _notifyEventCallbacks(SocketEventType eventType, dynamic data) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    final callbacks = _eventCallbacks[eventType];
    if (callbacks == null || callbacks.isEmpty) {
      _logger.w('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è $eventType');
      print('‚ö†Ô∏è WebSocket: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è $eventType');
      return;
    }
    
    _logger.i('üì° –£–≤–µ–¥–æ–º–ª—è–µ–º ${callbacks.length} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ —Å–æ–±—ã—Ç–∏–∏ $eventType');
    print('üì° WebSocket: –£–≤–µ–¥–æ–º–ª—è–µ–º ${callbacks.length} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ —Å–æ–±—ã—Ç–∏–∏ $eventType');
    print('üì° WebSocket: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: $data');
    
    callbacks.forEach((callback) {
      try {
        print('üîÑ WebSocket: –í—ã–ø–æ–ª–Ω—è–µ–º callback –¥–ª—è $eventType');
        callback(data);
        print('‚úÖ WebSocket: Callback –¥–ª—è $eventType –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      } catch (e) {
        _logger.e('‚ùå –û—à–∏–±–∫–∞ –≤ callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è $eventType: $e');
        print('‚ùå WebSocket: –û—à–∏–±–∫–∞ –≤ callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è $eventType: $e');
      }
    });
  }
  
  void _notifyClientConnectionCallbacks(bool isConnected) {
    _clientConnectionCallbacks.forEach((callback) {
      try {
        callback(isConnected);
      } catch (e) {
        _logger.e('‚ùå –û—à–∏–±–∫–∞ –≤ callback –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: $e');
      }
    });
  }
  
  void _notifyDriverConnectionCallbacks(bool isConnected) {
    _driverConnectionCallbacks.forEach((callback) {
      try {
        callback(isConnected);
      } catch (e) {
        _logger.e('‚ùå –û—à–∏–±–∫–∞ –≤ callback –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: $e');
      }
    });
  }
  
  // Heartbeat methods
  void _startClientHeartbeat() {
    _stopClientHeartbeat();
    _clientHeartbeatTimer = Timer.periodic(Duration(seconds: 30), (timer) {
      if (_isClientConnected && _clientSocket != null) {
        _clientSocket!.emit('ping', {'timestamp': DateTime.now().millisecondsSinceEpoch});
        _logger.d('üíì Client heartbeat sent');
      } else {
        _stopClientHeartbeat();
      }
    });
  }
  
  void _stopClientHeartbeat() {
    _clientHeartbeatTimer?.cancel();
    _clientHeartbeatTimer = null;
  }
  
  void _startDriverHeartbeat() {
    _stopDriverHeartbeat();
    _driverHeartbeatTimer = Timer.periodic(Duration(seconds: 30), (timer) {
      if (_isDriverConnected && _driverSocket != null) {
        _driverSocket!.emit('ping', {'timestamp': DateTime.now().millisecondsSinceEpoch});
        _logger.d('üíì Driver heartbeat sent');
      } else {
        _stopDriverHeartbeat();
      }
    });
  }
  
  void _stopDriverHeartbeat() {
    _driverHeartbeatTimer?.cancel();
    _driverHeartbeatTimer = null;
  }

  // Cleanup
  void dispose() {
    _clientReconnectTimer?.cancel();
    _driverReconnectTimer?.cancel();
    _stopClientHeartbeat();
    _stopDriverHeartbeat();
    disconnectAll();
    _eventCallbacks.clear();
    _clientConnectionCallbacks.clear();
    _driverConnectionCallbacks.clear();
  }
} 