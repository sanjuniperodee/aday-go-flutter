#!/bin/bash

# üöÄ Aday GO - iOS Deployment Script
# –í–µ—Ä—Å–∏—è: 1.0.7+23
# –í—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∞ macOS —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º Xcode

echo "üöÄ Starting Aday GO iOS deployment..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo "üîç Checking environment..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Flutter
if ! command -v flutter &> /dev/null; then
    print_error "Flutter –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Flutter SDK."
    exit 1
fi

print_status "Flutter –Ω–∞–π–¥–µ–Ω: $(flutter --version | head -n 1)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Xcode
if ! command -v xcodebuild &> /dev/null; then
    print_error "Xcode –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Xcode –∏–∑ App Store."
    exit 1
fi

print_status "Xcode –Ω–∞–π–¥–µ–Ω: $(xcodebuild -version | head -n 1)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤/—Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤
if ! flutter devices | grep -q ios; then
    print_warning "iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∏–º—É–ª—è—Ç–æ—Ä –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ iPhone."
fi

# –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo ""
echo "üßπ Cleaning and getting dependencies..."
flutter clean
flutter pub get

print_status "Dependencies updated"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ iOS –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo ""
echo "üì¶ Installing iOS pods..."
cd ios
pod install --repo-update
cd ..

print_status "iOS pods installed"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo ""
echo "üîß Checking configuration..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Bundle ID
if grep -q "kz.aday.go" ios/Runner.xcodeproj/project.pbxproj; then
    print_status "Bundle ID: kz.aday.go ‚úì"
else
    print_warning "Bundle ID –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
VERSION=$(grep "version:" pubspec.yaml | awk '{print $2}')
print_status "App version: $VERSION"

# –°–±–æ—Ä–∫–∞ iOS release
echo ""
echo "üî® Building iOS release..."
flutter build ios --release --no-codesign

if [ $? -eq 0 ]; then
    print_status "iOS build completed successfully"
else
    print_error "iOS build failed"
    exit 1
fi

# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Xcode
echo ""
echo "üçé Opening project in Xcode..."
open ios/Runner.xcworkspace

print_status "Project opened in Xcode"

echo ""
echo "üìã Next steps in Xcode:"
echo "1. Select 'Any iOS Device' as target"
echo "2. Product ‚Üí Archive"
echo "3. Distribute App ‚Üí App Store Connect"
echo "4. Upload to App Store Connect"

echo ""
echo "üéØ After upload:"
echo "1. Go to App Store Connect"
echo "2. Navigate to TestFlight"
echo "3. Wait for build processing (10-30 minutes)"
echo "4. Add test information and internal testers"

echo ""
print_status "Deployment script completed! üöÄ"

# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–∫–æ–≤
echo ""
echo "üîó Useful links:"
echo "‚Ä¢ App Store Connect: https://appstoreconnect.apple.com"
echo "‚Ä¢ TestFlight Guide: ./TESTFLIGHT_GUIDE.md"
echo "‚Ä¢ Deployment Checklist: ./DEPLOYMENT_CHECKLIST.md"

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å App Store Connect
read -p "Open App Store Connect in browser? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    open "https://appstoreconnect.apple.com"
fi

echo ""
echo "üéâ Happy deploying!" 